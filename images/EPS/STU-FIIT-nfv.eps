%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: STU-FIIT-nfv.eps
%%Creator: Adobe Illustrator(R) 14.0
%%For: Juraj Blako
%%CreationDate: 9.10.2012
%%BoundingBox: 0 0 112 60
%%HiResBoundingBox: 0 0 111.9971 59.1070
%%CropBox: 0 0 111.9971 59.1070
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 14.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 14.0.0 x367 R agm 4.4890 ct 5.1541%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 68 8%%BeginData: 8758 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45850D14A9FD06FF140D61FD06FF84140DA9FD06FF5A1414FD09FFA8%52F827F87DFFFFFFA8FD062728FD04FF5227A8FFFF5227A8FD3AFF0D140D%5AFD05FF850D0E0DAFFD05FF360D0E0DFD05FFA8140D0D5AFD07FFA827F8%27272752FFFFFFA8272727F8272752FD04FFF8F87DFFFF27F8A8FD3AFF14%0D1484FD05FF84140D14A9FD05FF5A0E0D60FD06FF0D140DA9FD07FFA8F8%27A8FFA8FD07FF27277DFD06FF27F8A8FFFF27277EFD3AFFA85A5AFD07FF%845AA8FD07FF5A60A8FD06FFA93685FD08FFA8F8F852A8FD08FF52F87DFD%06FFF8277DFFA827F8A8FD63FF5227F82752FD07FF52277DFD06FF27F8A8%FFFF2727A8FD64FF7D27F8F852FD06FF52F87EFD06FFF8277EFFFF27F8A8%FD66FF7DF827FD06FF52277DFD06FF27F8A8FFFF2727A8FD63FF7D7DA852%2727FD06FF52F87DFD06FF27F852FF7DF8F8A8FD62FFAFF827F827F8A8FD%06FF27277DFD06FFA8F827F827F852FD3BFFA88584FD07FF8484A8FD07FF%8485FD08FF60A9FD08FFA87D525252A8FD07FFA852A8FD07FFA85252527D%FD3CFF140D1484FD05FFA8140D14AFFD05FF5A0E0D61FD06FF0D140DAFFD%5FFF0D0E0D5AFD05FF840D0E0DA9FD05FF140D0D0DFD05FFA80D0D0E5AFD%5FFF600D14A9FD05FFA9140D36FD06FF84140D85FD06FF361414FD61FFA9%A8FD07FFA9AFFD08FFA8AFFD08FF84FD0AFF52FD04277DFFFFFF7D52FD04%FFA852A8FFFFFF52272752272752FD64FFF827527D52A8FFFFFF7DF8FD04%FFA8F8A8FFFFFFA85252F85252A8FD63FFA8277DFD07FF5227A8FFFFFF7D%277DFD05FFA8277DFD66FFF87DFD07FF7D27FD04FFA8F8A8FD06FFF87EFD%65FFA827275227A8FD04FF5227FD04FF7D277DFD05FFA8277DFD66FFF827%52527DFD04FF7D27FD04FFA8F8A8FD05FFAFF8A8FD3DFF841436FD07FF5A%1484FD06FFAF3636A8FD06FF840D60FD08FFA8F852FFFFFFA8FFFFFF5227%FD04FF7DF87DFD05FFA8F87DFD3DFF140D1460FD05FF84140D14A9FD05FF%36140D36FD06FF0D140D85FD08FFF87DFD07FF7D27FD04FFA8F8A8FD06FF%F8A8FD3DFF0D0E0D84FD05FF850D0E0DAFFD05FF360D0D13FD05FFA90E0D%0E84FD07FFA8F852FD07FF5227FD04FF7DF87DFD05FFA8F87DFD3DFFA914%60AFFD06FF600E85FD06FFA93636AFFD06FF84145AFD09FF52A8FD07FF7E%52FD04FFAF28A8FD06FF28A8FDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFF%FFFFFF7EA8FD32FFA87DFD1DFFA87DFFFFA8A8FD04FFA87DFFFFFFA8FFFF%A8A8FFA8A87DAFFFA8A8FF7DFFFFFFA8A8A8FFA8A8FFA8A8FFFF7D27FD06%FFA87DA87DFFFFA87D7DA8FFFFFF7DA8FFFF7DFFA8A8FFFFA8FFA8A8FFFF%7EFFFFFFA8A87DFFFFA8A8A87DFFFFFF277DFD1CFF7DF852A8FF7D52FFFF%FF7DF82727FFFF5252FF27FFFF522752A8FF5327A827A8FF7D2727A8FFA8%277D21FFFFFF2727FD06FFA827F852A8FF282752FFFFA8002752FFFF27FF%7D28FFFF2753A827FFFF277DFFFF522752FFFF277D277DFFFF7E277DFD1C%FF2727A8FFFF7D27FFFFFF007DFF277DFF53527D52FFFF2752A8FFFF7DF8%7D27A8FF52F8A8FFFF7D27F8A8FFFFA827F87DFD06FF7D27A8FFFF5252A8%FFFF5252FD04FFF87D2752FFFF27275252FFFF27A8FF7DF8FD04FF52F852%FFFFFF52F852FD1DFF5227A8FF7D52FFFFFF277DFF27A8FFFF275252FFFF%5227A8FFFF52272727A8FFFF7DF884FFA8F827FFFFFFA8272752FD06FFA8%F8FFFFFF27527DFFFF5252FD04FF27522752FFFF52522752FFFF277DFF7D%27FD04FF28277DFFFFFF2752F8FD1CFF7D7DF87DFF7DF87D7DFF27275227%A8FFFF27F8A8FFFF27527DA8FF52277DF8A8FFA852F852FF7D272727FFFF%27272EF8A8FD05FF7DF8A8FFFF27277DA8FF7D27527DFFFFF8FF5252FFFF%27A8F827FFFFF87DFFA8F85252FFFF2727277DFF7D2752F852FD1BFF7D52%7DFFFFA85228A8FFFF52527DFFFFFF7D7DFFFFFF7D5252A8FF7DA8FF7DA8%FF7D5252FFFFAF7DFF52A9FF7DA8FF52FD07FF52FFFFFF7D5252AFFFFF7D%527DFFFF7DFFA87DFFFF7DFFA87DFFFF7DA8FFFFA82E7DFFFF7DAF7D7DFF%A87DFF7D7DFDFCFFFD2DFFA8FD1FFFA8FD51FFAFA8FFA8FFFFFFA8FFA8FF%FFFFA8FFFFA8FFFFA8FFFFA87DA8FFFFA8A8A8FFFFFF7DA8A8FFFFA8FFFF%FD04A8FFFFAFA8FD07FFA8FFFFA8FD05FFA8A8A8FFFFFFA8A8A8FD04FFA8%A8FFFFAF7DA8A8FFFFA8FFFFFFA87DFFFFFFA8FD05FFA8FFFFFFA8FFFFA8%FFFFA8A87DFD0CFF277DA827A8FF5227A827A8FF5227FFA8F8FF5252FFA8%F85252FFFF2721277DFF7D520027FFFF27A8FF7DF82752FFFF7DF8A8FD05%FFAFF8FF5252FD05FF7DF82727FFFF52F82752FFFFFFF827FFFF7D27F852%FFFFF8A8FF7DF8277DFF7D27A8FFFFFF7D277DFFFF277DA8F8FFFF272752%A8FD0BFF5253FFF8FFFF7DF87D27A8FF7D27FFFF287D527DFFA8277DFFFF%FF277DF87DFFFFFF2752FFFF277DFFFF7D27FFFFFF272752FD06FF287D52%7DFD05FFFD0452FFFF52522752FFFF7E2727FFFFFF5252FFFFA827A8FF52%27A8FFFFA827FD04FF52F852FFFF527D7D52FFFF277DA8FD0CFF277DFF21%A8FF52272727A8FF5227FFFF522727FFFFA8F8527EFFFF27F827A8FFFF52%27FFFFFF27A8FFFF7D28FFFFA8272727FD06FF522727A8FD05FF7D275228%FFFF52F827A8FFFF52272752FFFF7D27FFFFFFF8A8FFFF52277DFF7D27FD%04FFF827F8FFFFA800277DFFA8272784FD0CFF7D277DF8FFFF59527DF8FF%FF7D27FFFFA8F852FFFFA8277DA8FFFF277D27A8FFA8F8527DFFFF277DFF%FF7D27FFFF7D277DF8A8FD05FFA8F852FD06FF52272727FFFF2752277DFF%FF27522752FFFF5227FFFFA827A8FFA87DF87DFFA8F87D7DFF7D2752277D%FFFF27F8FFFFFF27527DFD0CFFA87D27A8FFFF7D7DA859A8FF7D7DFFFFA8%527DFFFFFF525252FFFF7DA87D7DFF7D525252FFFF52A8FFFF7D7DFFFF59%A8FF7D7DFD06FF527DFD06FFA828527DFFFF7D7DA852FFA87DFFFF52FFFF%A852FFFFFF52FFFF7D277DA8FFA852277DFF7D7DFF53A8FFFF597DFFFFFF%7D5252A8FDFCFFFD8FFFA87D7DFFFFFFA8FFFFFFA8FFA8FFFFAFA8FFA8FF%FFA8FFFFA87D7DA8A8FFA8A8FD06FFA8FFFFA8A8FFA8FFFFA87D7DFFFFA8%7DA8FFFFFF7DA8FFFFFFA8FFFFA8FFFFFFA8A8FFFFA8A87DA8FFFFA8FFA8%FFFFA8FFFFA8FFA8FD25FF53527DA8FF5227FFFFFF537D52FFFF52A8A853%FFFF52FFFFFF522752FFFF7DF8FD06FF7D7DFF7D27FF52FFFF52527DFFFF%5252527DFFA8525253FFFF27A8FF527DFFFF7DF8FFFFA82752A8FF7D7DFF%A8527D52FFA852A852A8FD24FF527DA8FFA85228A8FFFF2727A8FFFF52A8%A852FFA852A8FFFFFF52FFFFFF52527DFD05FF527DFF7DF87D52FFFF527D%FFFFA827FF7D52FFA852A827FFFF2752FFF8A8FFFF52527DFFFF7D7DFFFF%7D52FFA82752FFFFFF52277DFD25FF7D52A8FFA8285252FFFF5227FFFFFF%52FFA87DFFFF52FD04FF52FFFFFF52527DFD05FF7D7DFF7D7D5252FFFF52%52A8FFA87DFFA852FFA85227A8FFFF527D7D52A8FFA852527DFFFF7D7DFF%FF7D7DFFFFF87DFD04FF27FD26FF52A8FFFFFD0452FFFF527D27FFFF527D%7D52FFA8527DA8FFFF27FFFF7D277D27FD05FF527DFF7D7D7DF8FFFF52A8%FFFFFF27A8527DFFA8527D52FFA85252275384FF7D277D27FFFF7D52FFFF%7D52FFA852527DFFFFA852AFFD25FFA8A8FFFF7DFFFF7DFFFFA8FF7DA8FF%A87D52FFFFFF53527DFFFF84FFFF7DFFFF7DA8FD04FFA8A8FF7EA8FF7DFF%FF7DFD04FFA8527DFFFFA8A8FF7DFFFF7DA87DA8A8FF7DFFFF7DA8FFA8A8%FFFFA8A8FFFF7DFF52FFFFFF7DFD34FFA8FD3BFFA8FDE3FFA87EA8FD09FF%7DFD37FF7DFD0BFFA87DFFA8FD07FFA8FD05FFA8FFFFA87DA8FFFFA8A8A8%FFFFFF7DA8FFFFA8A8FFFFA8FFFFFFA8FD04FFA821A8FFFFA8FFA8FFFFFF%A87D7DFFFFAF7DFFFFFFA8FFA8FD05FF7EA87DA8FFFF7D7DA8FFFFA87DFF%FFFFA8FFA8FD05FFA8FFFFFF7DA8FFFFA8FD05FF5252FD04FF7DA8FFFFA8%FFFFA852FF2752FD05FFA852A8FF277D7D7DFFFF277D7DFF7D275252A8FF%5252277DFFA8F8FF7D27FFFFFF2752FFFFFF277D7DFFA800A87D7DFF527D%7D53FFA8277D7DFF7D7DFF52A8FD04FFA82752A8FF7D5253A8FFA8277D7D%FF7D7DFF52A8FF277DA852FFFF2753277DFFA852FFFFFFFD0452FFFF5252%52FFFF7D7DFF7D7DFF5252FD06FF52FFFF52277D7DFFA852A8FFFF7D7DFF%52A8FF7D7E7D52FFA827A87D27FFFFA85252FFFF7D53FFFFFFA8277D7DA8%FFFF2752A8FF527DFFFFFFA852FF2EFD06FF7D7EFFFF7D52FFFFFF52A8FF%FFFF7D52A852FFFF7D27A852FFA852FFA852FFA87DFFFFFF52FFFF27FFFF%52FD04FF52A8FF7D7D7D5227A8FD04FFA852FFFF527D277DFFFF277DA8FF%527DFF7D7DFF522727FFFFA8277D5252FFFF525227A8FF7D52FFFFFFA87D%52527DFFFF7D52FFFF527DFFFFFF7D527D52A8FD05FF5284FFFF7D527DFF%FF52A8FFFFFF7D525252FFFF527D277DFFA852FFA852FFA852FFFFFF27FF%FF52A8FF52FF27A8FF7D7DFF7D7DFD0452FD05FF27FFFF52A82752FFA852%FFFFFF7E52A827FFFF7D7D52A8FF7D7D275252FFFFFD0452FFA8527EA8FF%A852FFF8A8FFFF7D7DFFFF7D52A8A8FF7E7DFF52FD06FF7D7DFFFF7D52FF%FFFF7D52A8FFFF7D7DFF2EFFFF52A85252FFA852A85252FFA852A8FFFF52%7D7D2EFFFF527D527DFF527DFF7D7D53FFA87DFD04FFA87DA8FF7DFF7D7E%FFFF7DFD04FF7D2E7EFFFF7DA87D7DFFA87DA87D7DA8FF7DFFA87DFFFF7D%527DFFA87EFF7DA8FFFFA87DFFFFFF59527DFF7DA8FF7DA8FD05FF7DA8FF%FFA8522EA8FFFF5252A8FF7DA8FF7DA8FF7DFFA87DFFFF7D5252FFFFFF52%527DFFA85252A8FFFFA85252FFFFA8A8FF7DA8%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                                             
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.2-c063 53.352624, 2008/07/30-18:05:41        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:ModifyDate>2012-10-09T16:41:53+02:00</xmp:ModifyDate>
         <xmp:CreateDate>2012-10-09T16:41:53+02:00</xmp:CreateDate>
         <xmp:MetadataDate>2012-10-09T16:41:53+02:00</xmp:MetadataDate>
         <xmp:CreatorTool>Adobe Illustrator CS4</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>136</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAiAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8AO/KnlP8AMmD8yLa4uLa7&#xA;juo7sSahqMiv6Lw8/wB6TLsjq6AgAHfOm1GowHAQCKrYPG6XS6kakEiV8W56V13fR2cy9k8a/PvQ&#xA;fNmpXmmSadbXF7paRlWgtlaXjcFj8TRoCfiUgA/R8932TlxxB4iBLz7nm+3cGacomIMoeXezv8r7&#xA;HXrHyTp1trnNb1A3GOUkyRxFyY0epO4Xt2G3bNfrpwllJhydp2ZDJHBET5/o6fj4Jl5xt9XufK+q&#xA;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&#xA;HFbSyPa6vpElyioxMSRxsHaQAfCFPUnpir//2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Untitled-4</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:DocumentID>xmp.did:FE7F117407206811945780C5360C7B74</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:FE7F117407206811945780C5360C7B74</xmpMM:InstanceID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:OriginalDocumentID>uuid:dbd1d1c3-654b-4647-bade-b035bf19b30e</xmpMM:OriginalDocumentID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:FD7F117407206811945780C5360C7B74</stRef:instanceID>
            <stRef:documentID>xmp.did:FD7F117407206811945780C5360C7B74</stRef:documentID>
            <stRef:originalDocumentID>uuid:dbd1d1c3-654b-4647-bade-b035bf19b30e</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:FD7F117407206811945780C5360C7B74</stEvt:instanceID>
                  <stEvt:when>2012-10-09T16:41:45+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:FE7F117407206811945780C5360C7B74</stEvt:instanceID>
                  <stEvt:when>2012-10-09T16:41:53+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Adobe PDF library 9.90</pdf:Producer>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>50.219157</stDim:w>
            <stDim:h>28.941214</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>FIIT_CMYK</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>90.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>20.000000</xmpG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -59.1069 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 59.1069 li
111.997 59.1069 li
111.997 0 li
cp
clp
[1 0 0 1 0 0 ]ct
.228516 35.2056 mo
.483398 34.6216 li
.500488 34.5825 .53418 34.5649 .57959 34.5825 cv
.817383 34.6899 1.01563 34.769 1.40625 34.769 cv
1.74561 34.769 1.94971 34.6216 1.94971 34.3726 cv
1.94971 34.1411 1.83643 34.022 1.28711 33.7788 cv
.57959 33.479 .273926 33.105 .273926 32.4995 cv
.273926 31.8364 .771973 31.3442 1.61572 31.3442 cv
2.16455 31.3442 2.40234 31.3843 2.81592 31.5649 cv
2.8667 31.5825 2.8667 31.6216 2.84961 31.6616 cv
2.5835 32.1821 li
2.56689 32.2222 2.53271 32.2446 2.48193 32.2222 cv
2.26074 32.1313 2.03467 32.0854 1.76855 32.0854 cv
1.40625 32.0854 1.24756 32.2446 1.24756 32.4761 cv
1.24756 32.7026 1.33252 32.8101 1.93848 33.0542 cv
2.646 33.354 2.91748 33.7046 2.91748 34.2827 cv
2.91748 35.0747 2.35742 35.5112 1.48535 35.5112 cv
1.01563 35.5112 .647461 35.4712 .262695 35.2729 cv
.228516 35.2505 .217285 35.228 .228516 35.2056 cv
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 1 cmyk
f
5.85449 34.7017 mo
5.85449 34.73 5.86621 34.7466 5.89453 34.7466 cv
7.3833 34.7466 li
7.42822 34.7466 7.45117 34.769 7.45117 34.8198 cv
7.45117 35.3979 li
7.45117 35.4487 7.42822 35.4712 7.3833 35.4712 cv
5.03369 35.4712 li
4.98291 35.4712 4.96045 35.4487 4.96045 35.3979 cv
4.96045 31.4575 li
4.96045 31.4067 4.98291 31.3843 5.03369 31.3843 cv
5.79248 31.3843 li
5.83203 31.3843 5.85449 31.4067 5.85449 31.4575 cv
5.85449 34.7017 li
cp
f
10.6992 32.0688 mo
10.1558 32.0688 9.86133 32.5103 9.86133 33.4224 cv
9.86133 34.3501 10.1499 34.7866 10.6934 34.7866 cv
11.231 34.7866 11.5254 34.3501 11.5254 33.4272 cv
11.5254 32.5044 11.2256 32.0688 10.6992 32.0688 cv
cp
10.6934 35.5112 mo
9.33496 35.5112 8.92725 34.769 8.92725 33.4272 cv
8.92725 32.0747 9.33496 31.3442 10.6934 31.3442 cv
12.0518 31.3442 12.4595 32.0806 12.4595 33.4224 cv
12.4595 34.7749 12.0518 35.5112 10.6934 35.5112 cv
cp
f
15.4028 35.4712 mo
15.3745 35.4712 15.3574 35.4546 15.3462 35.4204 cv
14.1914 31.4741 li
14.1743 31.4233 14.2026 31.3843 14.2476 31.3843 cv
15.0742 31.3843 li
15.1196 31.3843 15.125 31.4009 15.1421 31.4409 cv
15.9404 34.5767 li
16.7388 31.4409 li
16.75 31.4009 16.7725 31.3843 16.812 31.3843 cv
17.5483 31.3843 li
17.5991 31.3843 17.6216 31.4126 17.6104 31.4634 cv
16.4497 35.4204 li
16.4385 35.4546 16.416 35.4712 16.3818 35.4712 cv
15.4028 35.4712 li
cp
f
20.4063 33.0649 mo
21.6689 33.0649 li
21.7197 33.0649 21.748 33.0884 21.748 33.1333 cv
21.748 33.7222 li
21.748 33.7612 21.7197 33.7847 21.6689 33.7847 cv
20.4063 33.7847 li
20.4063 34.7017 li
20.4063 34.73 20.418 34.7466 20.4463 34.7466 cv
22.0366 34.7466 li
22.0879 34.7466 22.1104 34.769 22.1104 34.8149 cv
22.1104 35.3979 li
22.1104 35.4487 22.0879 35.4712 22.0366 35.4712 cv
19.5854 35.4712 li
19.5347 35.4712 19.5122 35.4487 19.5122 35.3979 cv
19.5122 31.4575 li
19.5122 31.4067 19.5347 31.3843 19.5854 31.3843 cv
22.0366 31.3843 li
22.0879 31.3843 22.1104 31.4067 22.1104 31.4575 cv
22.1104 32.0347 li
22.1104 32.0854 22.0879 32.1089 22.0366 32.1089 cv
20.4463 32.1089 li
20.418 32.1089 20.4063 32.1255 20.4063 32.1538 cv
20.4063 33.0649 li
cp
f
26.3491 34.1353 mo
26.3491 31.4575 li
26.3491 31.4067 26.3662 31.3843 26.4058 31.3843 cv
27.1357 31.3843 li
27.1812 31.3843 27.2041 31.4067 27.2041 31.4575 cv
27.2041 35.3979 li
27.2041 35.4487 27.1812 35.4712 27.1357 35.4712 cv
26.3433 35.4712 li
26.2925 35.4712 26.2813 35.4653 26.2642 35.4263 cv
24.9507 32.7202 li
24.9507 35.3979 li
24.9507 35.4487 24.9282 35.4712 24.8828 35.4712 cv
24.1694 35.4712 li
24.1187 35.4712 24.0962 35.4487 24.0962 35.3979 cv
24.0962 31.4575 li
24.0962 31.4067 24.1187 31.3843 24.1694 31.3843 cv
24.9507 31.3843 li
25.002 31.3843 25.0132 31.3892 25.0303 31.4292 cv
26.3491 34.1353 li
cp
f
29.2524 35.2056 mo
29.5073 34.6216 li
29.5244 34.5825 29.5581 34.5649 29.6035 34.5825 cv
29.8413 34.6899 30.0396 34.769 30.4302 34.769 cv
30.7695 34.769 30.9736 34.6216 30.9736 34.3726 cv
30.9736 34.1411 30.8604 34.022 30.311 33.7788 cv
29.6035 33.479 29.2979 33.105 29.2979 32.4995 cv
29.2979 31.8364 29.7959 31.3442 30.6396 31.3442 cv
31.1885 31.3442 31.4263 31.3843 31.8398 31.5649 cv
31.8906 31.5825 31.8906 31.6216 31.8735 31.6616 cv
31.6074 32.1821 li
31.5908 32.2222 31.5566 32.2446 31.5059 32.2222 cv
31.2852 32.1313 31.0586 32.0854 30.7925 32.0854 cv
30.4302 32.0854 30.2715 32.2446 30.2715 32.4761 cv
30.2715 32.7026 30.3564 32.8101 30.9624 33.0542 cv
31.6699 33.354 31.9414 33.7046 31.9414 34.2827 cv
31.9414 35.0747 31.3813 35.5112 30.5093 35.5112 cv
30.0396 35.5112 29.6714 35.4712 29.2866 35.2729 cv
29.2524 35.2505 29.2412 35.228 29.2524 35.2056 cv
cp
f
35.6255 33.4507 mo
37.0298 35.3696 li
37.0581 35.4146 37.0298 35.4712 36.9844 35.4712 cv
36.0161 35.4712 li
35.9937 35.4712 35.9766 35.4595 35.9653 35.4429 cv
34.8726 33.7388 li
34.8726 35.3979 li
34.8726 35.4487 34.8501 35.4712 34.8105 35.4712 cv
34.0518 35.4712 li
34.001 35.4712 33.9785 35.4487 33.9785 35.3979 cv
33.9785 31.4575 li
33.9785 31.4067 34.001 31.3843 34.0518 31.3843 cv
34.8105 31.3843 li
34.8501 31.3843 34.8726 31.4067 34.8726 31.4575 cv
34.8726 33.2524 li
35.9541 31.4126 li
35.9653 31.395 35.9824 31.3843 36.0049 31.3843 cv
36.877 31.3843 li
36.939 31.3843 36.9561 31.4409 36.9277 31.4858 cv
35.6255 33.4507 li
cp
f
40.1138 31.1636 mo
40.0801 31.1802 40.0576 31.1685 40.0405 31.1401 cv
39.9272 30.9028 li
39.9102 30.8804 39.9214 30.8579 39.9556 30.8345 cv
41.0366 30.1558 li
41.0596 30.1382 41.0991 30.1382 41.1162 30.1782 cv
41.3423 30.6421 li
41.3594 30.6704 41.3594 30.7046 41.3198 30.7212 cv
40.1138 31.1636 li
cp
40.7988 33.8921 mo
40.3462 32.3237 li
39.8931 33.8921 li
40.7988 33.8921 li
cp
39.6895 34.6108 mo
39.4629 35.4204 li
39.4458 35.4546 39.4233 35.4712 39.3892 35.4712 cv
38.6533 35.4712 li
38.6138 35.4712 38.5854 35.437 38.6025 35.3979 cv
39.8481 31.4126 li
39.8481 31.395 39.8647 31.3843 39.8931 31.3843 cv
40.895 31.3843 li
40.9121 31.3843 40.9292 31.395 40.9404 31.4233 cv
42.1748 35.3979 li
42.1914 35.437 42.1631 35.4712 42.1235 35.4712 cv
41.3027 35.4712 li
41.269 35.4712 41.2461 35.4546 41.229 35.4204 cv
41.0029 34.6108 li
39.6895 34.6108 li
cp
f
48.0645 35.4712 mo
48.0249 35.4712 48.0024 35.4487 48.0024 35.3979 cv
48.0024 32.1538 li
48.0024 32.1255 47.9854 32.1089 47.957 32.1089 cv
47.0117 32.1089 li
46.9604 32.1089 46.938 32.0854 46.938 32.0347 cv
46.938 31.4575 li
46.938 31.4067 46.9604 31.3843 47.0117 31.3843 cv
49.8984 31.3843 li
49.9438 31.3843 49.9668 31.4067 49.9668 31.4575 cv
49.9668 32.0347 li
49.9668 32.0854 49.9438 32.1089 49.8984 32.1089 cv
48.9365 32.1089 li
48.9082 32.1089 48.8965 32.1255 48.8965 32.1538 cv
48.8965 35.3979 li
48.8965 35.4487 48.874 35.4712 48.8232 35.4712 cv
48.0645 35.4712 li
cp
f
52.7617 33.0649 mo
54.0244 33.0649 li
54.0752 33.0649 54.1035 33.0884 54.1035 33.1333 cv
54.1035 33.7222 li
54.1035 33.7612 54.0752 33.7847 54.0244 33.7847 cv
52.7617 33.7847 li
52.7617 34.7017 li
52.7617 34.73 52.7734 34.7466 52.8018 34.7466 cv
54.3921 34.7466 li
54.4434 34.7466 54.4658 34.769 54.4658 34.8149 cv
54.4658 35.3979 li
54.4658 35.4487 54.4434 35.4712 54.3921 35.4712 cv
51.9409 35.4712 li
51.8901 35.4712 51.8677 35.4487 51.8677 35.3979 cv
51.8677 31.4575 li
51.8677 31.4067 51.8901 31.3843 51.9409 31.3843 cv
54.3921 31.3843 li
54.4434 31.3843 54.4658 31.4067 54.4658 31.4575 cv
54.4658 32.0347 li
54.4658 32.0854 54.4434 32.1089 54.3921 32.1089 cv
52.8018 32.1089 li
52.7734 32.1089 52.7617 32.1255 52.7617 32.1538 cv
52.7617 33.0649 li
cp
f
58.2124 35.5112 mo
57.0405 35.5112 56.3389 34.7124 56.3389 33.4272 cv
56.3389 32.1421 57.0405 31.3442 58.2124 31.3442 cv
58.688 31.3442 58.9937 31.4009 59.3052 31.5767 cv
59.3335 31.5933 59.3447 31.6157 59.3447 31.6333 cv
59.3447 31.6499 59.3389 31.6724 59.3276 31.6948 cv
59.0615 32.2046 li
59.0449 32.2329 59.0278 32.2505 59.0107 32.2505 cv
58.9937 32.2505 58.9766 32.2446 58.96 32.2388 cv
58.7334 32.1313 58.5352 32.0913 58.2861 32.0913 cv
57.8164 32.0913 57.2729 32.4819 57.2729 33.4272 cv
57.2729 34.3784 57.7881 34.7583 58.292 34.7583 cv
58.4785 34.7583 58.6992 34.7349 58.9653 34.605 cv
59.0049 34.5884 59.0391 34.5933 59.0562 34.6274 cv
59.3335 35.1538 li
59.3618 35.1997 59.3506 35.2388 59.3052 35.2671 cv
58.9653 35.4595 58.6655 35.5112 58.2124 35.5112 cv
cp
f
62.2197 33.7847 mo
62.1914 33.7847 62.1748 33.8013 62.1748 33.8296 cv
62.1748 35.3979 li
62.1748 35.4487 62.1514 35.4712 62.1123 35.4712 cv
61.3535 35.4712 li
61.3027 35.4712 61.2803 35.4487 61.2803 35.3979 cv
61.2803 31.4575 li
61.2803 31.4067 61.3027 31.3843 61.3535 31.3843 cv
62.1123 31.3843 li
62.1514 31.3843 62.1748 31.4067 62.1748 31.4575 cv
62.1748 33.02 li
62.1748 33.0483 62.1914 33.0649 62.2197 33.0649 cv
63.4482 33.0649 li
63.4766 33.0649 63.4932 33.0483 63.4932 33.02 cv
63.4932 31.4575 li
63.4932 31.4067 63.5166 31.3843 63.5615 31.3843 cv
64.3203 31.3843 li
64.3652 31.3843 64.3877 31.4067 64.3877 31.4575 cv
64.3877 35.3979 li
64.3877 35.4487 64.3652 35.4712 64.3203 35.4712 cv
63.5615 35.4712 li
63.5166 35.4712 63.4932 35.4487 63.4932 35.3979 cv
63.4932 33.8296 li
63.4932 33.8013 63.4766 33.7847 63.4482 33.7847 cv
62.2197 33.7847 li
cp
f
68.8662 34.1353 mo
68.8662 31.4575 li
68.8662 31.4067 68.8828 31.3843 68.9229 31.3843 cv
69.6533 31.3843 li
69.6982 31.3843 69.7207 31.4067 69.7207 31.4575 cv
69.7207 35.3979 li
69.7207 35.4487 69.6982 35.4712 69.6533 35.4712 cv
68.8604 35.4712 li
68.8096 35.4712 68.7979 35.4653 68.7813 35.4263 cv
67.4678 32.7202 li
67.4678 35.3979 li
67.4678 35.4487 67.4453 35.4712 67.4004 35.4712 cv
66.6865 35.4712 li
66.6357 35.4712 66.6133 35.4487 66.6133 35.3979 cv
66.6133 31.4575 li
66.6133 31.4067 66.6357 31.3843 66.6865 31.3843 cv
67.4678 31.3843 li
67.5186 31.3843 67.5303 31.3892 67.5469 31.4292 cv
68.8662 34.1353 li
cp
f
72.7607 31.3843 mo
72.7998 31.3843 72.8232 31.4067 72.8232 31.4575 cv
72.8232 35.3979 li
72.8232 35.4487 72.7998 35.4712 72.7607 35.4712 cv
72.002 35.4712 li
71.9512 35.4712 71.9287 35.4487 71.9287 35.3979 cv
71.9287 31.4575 li
71.9287 31.4067 71.9512 31.3843 72.002 31.3843 cv
72.7607 31.3843 li
cp
f
76.7949 35.5112 mo
75.623 35.5112 74.9209 34.7124 74.9209 33.4272 cv
74.9209 32.1421 75.623 31.3442 76.7949 31.3442 cv
77.2705 31.3442 77.5762 31.4009 77.8867 31.5767 cv
77.915 31.5933 77.9268 31.6157 77.9268 31.6333 cv
77.9268 31.6499 77.9209 31.6724 77.9102 31.6948 cv
77.6436 32.2046 li
77.627 32.2329 77.6094 32.2505 77.5928 32.2505 cv
77.5762 32.2505 77.5586 32.2446 77.542 32.2388 cv
77.3154 32.1313 77.1172 32.0913 76.8682 32.0913 cv
76.3984 32.0913 75.8545 32.4819 75.8545 33.4272 cv
75.8545 34.3784 76.3701 34.7583 76.874 34.7583 cv
77.0605 34.7583 77.2813 34.7349 77.5479 34.605 cv
77.5869 34.5884 77.6211 34.5933 77.6377 34.6274 cv
77.915 35.1538 li
77.9434 35.1997 77.9326 35.2388 77.8867 35.2671 cv
77.5479 35.4595 77.2471 35.5112 76.7949 35.5112 cv
cp
f
81.5088 33.4507 mo
82.9121 35.3696 li
82.9404 35.4146 82.9121 35.4712 82.8672 35.4712 cv
81.8994 35.4712 li
81.876 35.4712 81.8594 35.4595 81.8477 35.4429 cv
80.7559 33.7388 li
80.7559 35.3979 li
80.7559 35.4487 80.7334 35.4712 80.6934 35.4712 cv
79.9346 35.4712 li
79.8838 35.4712 79.8613 35.4487 79.8613 35.3979 cv
79.8613 31.4575 li
79.8613 31.4067 79.8838 31.3843 79.9346 31.3843 cv
80.6934 31.3843 li
80.7334 31.3843 80.7559 31.4067 80.7559 31.4575 cv
80.7559 33.2524 li
81.8369 31.4126 li
81.8477 31.395 81.8652 31.3843 81.8877 31.3843 cv
82.7598 31.3843 li
82.8223 31.3843 82.8389 31.4409 82.8105 31.4858 cv
81.5088 33.4507 li
cp
f
85.9971 31.1636 mo
85.9629 31.1802 85.9404 31.1685 85.9229 31.1401 cv
85.8096 30.9028 li
85.793 30.8804 85.8047 30.8579 85.8379 30.8345 cv
86.9199 30.1558 li
86.9424 30.1382 86.9814 30.1382 86.999 30.1782 cv
87.2256 30.6421 li
87.2422 30.6704 87.2422 30.7046 87.2021 30.7212 cv
85.9971 31.1636 li
cp
86.6816 33.8921 mo
86.2285 32.3237 li
85.7764 33.8921 li
86.6816 33.8921 li
cp
85.5723 34.6108 mo
85.3457 35.4204 li
85.3291 35.4546 85.3057 35.4712 85.2725 35.4712 cv
84.5361 35.4712 li
84.4971 35.4712 84.4688 35.437 84.4854 35.3979 cv
85.7305 31.4126 li
85.7305 31.395 85.748 31.3843 85.7764 31.3843 cv
86.7783 31.3843 li
86.7949 31.3843 86.8115 31.395 86.8232 31.4233 cv
88.0576 35.3979 li
88.0742 35.437 88.0459 35.4712 88.0068 35.4712 cv
87.1855 35.4712 li
87.1514 35.4712 87.1289 35.4546 87.1123 35.4204 cv
86.8857 34.6108 li
85.5723 34.6108 li
cp
f
3.51221 42.0737 mo
3.51221 42.8726 3.06494 43.3765 1.94971 43.3765 cv
.839844 43.3765 .393066 42.8726 .393066 42.0737 cv
.393066 39.3228 li
.393066 39.272 .415527 39.2495 .466309 39.2495 cv
1.2251 39.2495 li
1.26465 39.2495 1.28711 39.272 1.28711 39.3228 cv
1.28711 42.0513 li
1.28711 42.4536 1.5083 42.6519 1.94971 42.6519 cv
2.39697 42.6519 2.61768 42.4536 2.61768 42.0513 cv
2.61768 39.3228 li
2.61768 39.272 2.64014 39.2495 2.68555 39.2495 cv
3.44971 39.2495 li
3.48926 39.2495 3.51221 39.272 3.51221 39.3228 cv
3.51221 42.0737 li
cp
f
7.97266 42.0005 mo
7.97266 39.3228 li
7.97266 39.272 7.98975 39.2495 8.0293 39.2495 cv
8.75928 39.2495 li
8.80469 39.2495 8.82764 39.272 8.82764 39.3228 cv
8.82764 43.2632 li
8.82764 43.314 8.80469 43.3364 8.75928 43.3364 cv
7.9668 43.3364 li
7.91602 43.3364 7.90479 43.3306 7.8877 43.2915 cv
6.57422 40.5854 li
6.57422 43.2632 li
6.57422 43.314 6.55176 43.3364 6.50635 43.3364 cv
5.79297 43.3364 li
5.74219 43.3364 5.71973 43.314 5.71973 43.2632 cv
5.71973 39.3228 li
5.71973 39.272 5.74219 39.2495 5.79297 39.2495 cv
6.57422 39.2495 li
6.62549 39.2495 6.63672 39.2544 6.65381 39.2944 cv
7.97266 42.0005 li
cp
f
11.8726 39.2495 mo
11.9121 39.2495 11.9346 39.272 11.9346 39.3228 cv
11.9346 43.2632 li
11.9346 43.314 11.9121 43.3364 11.8726 43.3364 cv
11.1138 43.3364 li
11.063 43.3364 11.0405 43.314 11.0405 43.2632 cv
11.0405 39.3228 li
11.0405 39.272 11.063 39.2495 11.1138 39.2495 cv
11.8726 39.2495 li
cp
f
15.0513 43.3364 mo
15.0229 43.3364 15.0059 43.3198 14.9946 43.2856 cv
13.8398 39.3394 li
13.8228 39.2886 13.8511 39.2495 13.896 39.2495 cv
14.7227 39.2495 li
14.7681 39.2495 14.7734 39.2661 14.7905 39.3062 cv
15.5889 42.4419 li
16.3872 39.3062 li
16.3984 39.2661 16.4209 39.2495 16.4604 39.2495 cv
17.1968 39.2495 li
17.2476 39.2495 17.27 39.2778 17.2588 39.3286 cv
16.0981 43.2856 li
16.0869 43.3198 16.0645 43.3364 16.0303 43.3364 cv
15.0513 43.3364 li
cp
f
20.0547 40.9302 mo
21.3174 40.9302 li
21.3682 40.9302 21.3965 40.9536 21.3965 40.9985 cv
21.3965 41.5874 li
21.3965 41.6265 21.3682 41.6499 21.3174 41.6499 cv
20.0547 41.6499 li
20.0547 42.5669 li
20.0547 42.5952 20.0664 42.6118 20.0947 42.6118 cv
21.6851 42.6118 li
21.7363 42.6118 21.7588 42.6343 21.7588 42.6802 cv
21.7588 43.2632 li
21.7588 43.314 21.7363 43.3364 21.6851 43.3364 cv
19.2339 43.3364 li
19.1831 43.3364 19.1606 43.314 19.1606 43.2632 cv
19.1606 39.3228 li
19.1606 39.272 19.1831 39.2495 19.2339 39.2495 cv
21.6851 39.2495 li
21.7363 39.2495 21.7588 39.272 21.7588 39.3228 cv
21.7588 39.8999 li
21.7588 39.9507 21.7363 39.9741 21.6851 39.9741 cv
20.0947 39.9741 li
20.0664 39.9741 20.0547 39.9907 20.0547 40.019 cv
20.0547 40.9302 li
cp
f
24.6387 41.0776 mo
24.9844 41.0776 li
25.3975 41.0776 25.6523 40.897 25.6523 40.5063 cv
25.6523 40.1382 25.437 39.9741 25.0068 39.9741 cv
24.6841 39.9741 li
24.6558 39.9741 24.6387 39.9907 24.6387 40.019 cv
24.6387 41.0776 li
cp
24.6387 41.7173 mo
24.6387 43.2632 li
24.6387 43.314 24.6162 43.3364 24.5767 43.3364 cv
23.8179 43.3364 li
23.7671 43.3364 23.7446 43.314 23.7446 43.2632 cv
23.7446 39.3228 li
23.7446 39.272 23.7671 39.2495 23.8179 39.2495 cv
25.1255 39.2495 li
26.1504 39.2495 26.5864 39.7017 26.5864 40.4888 cv
26.5864 41.0776 26.3091 41.4849 25.7656 41.6382 cv
26.7959 43.229 li
26.8354 43.2915 26.8013 43.3364 26.7505 43.3364 cv
25.8501 43.3364 li
25.8218 43.3364 25.8052 43.3247 25.7993 43.3081 cv
24.8765 41.7173 li
24.6387 41.7173 li
cp
f
31.3804 39.2495 mo
31.4258 39.2495 31.4482 39.272 31.4482 39.3228 cv
31.4482 39.8999 li
31.4482 39.9282 31.4429 39.9507 31.4258 39.9741 cv
29.6255 42.6118 li
31.3804 42.6118 li
31.4258 42.6118 31.4482 42.6343 31.4482 42.6743 cv
31.4482 43.2632 li
31.4482 43.314 31.4258 43.3364 31.3804 43.3364 cv
28.6748 43.3364 li
28.6235 43.3364 28.6011 43.314 28.6011 43.2632 cv
28.6011 42.6909 li
28.6011 42.6743 28.6123 42.646 28.6294 42.6177 cv
30.418 39.9741 li
28.6748 39.9741 li
28.6235 39.9741 28.6011 39.9507 28.6011 39.9058 cv
28.6011 39.3228 li
28.6011 39.272 28.6235 39.2495 28.6748 39.2495 cv
31.3804 39.2495 li
cp
f
34.2666 39.2495 mo
34.3062 39.2495 34.3286 39.272 34.3286 39.3228 cv
34.3286 43.2632 li
34.3286 43.314 34.3062 43.3364 34.2666 43.3364 cv
33.5078 43.3364 li
33.457 43.3364 33.4346 43.314 33.4346 43.2632 cv
33.4346 39.3228 li
33.4346 39.272 33.457 39.2495 33.5078 39.2495 cv
34.2666 39.2495 li
cp
f
37.3608 43.3364 mo
37.3213 43.3364 37.2988 43.314 37.2988 43.2632 cv
37.2988 40.019 li
37.2988 39.9907 37.2817 39.9741 37.2534 39.9741 cv
36.3081 39.9741 li
36.2568 39.9741 36.2344 39.9507 36.2344 39.8999 cv
36.2344 39.3228 li
36.2344 39.272 36.2568 39.2495 36.3081 39.2495 cv
39.1948 39.2495 li
39.2402 39.2495 39.2632 39.272 39.2632 39.3228 cv
39.2632 39.8999 li
39.2632 39.9507 39.2402 39.9741 39.1948 39.9741 cv
38.2324 39.9741 li
38.2046 39.9741 38.1929 39.9907 38.1929 40.019 cv
38.1929 43.2632 li
38.1929 43.314 38.1704 43.3364 38.1196 43.3364 cv
37.3608 43.3364 li
cp
f
42.709 41.7573 mo
42.2563 40.189 li
41.8032 41.7573 li
42.709 41.7573 li
cp
41.5996 42.4761 mo
41.373 43.2856 li
41.356 43.3198 41.3335 43.3364 41.2993 43.3364 cv
40.5635 43.3364 li
40.5239 43.3364 40.4956 43.3022 40.5127 43.2632 cv
41.7583 39.2778 li
41.7583 39.2603 41.7749 39.2495 41.8032 39.2495 cv
42.8052 39.2495 li
42.8223 39.2495 42.8394 39.2603 42.8506 39.2886 cv
44.085 43.2632 li
44.1016 43.3022 44.0732 43.3364 44.0337 43.3364 cv
43.2129 43.3364 li
43.1792 43.3364 43.1563 43.3198 43.1392 43.2856 cv
42.9131 42.4761 li
41.5996 42.4761 li
cp
f
50.0654 43.3364 mo
50.0371 43.3364 50.02 43.3198 50.0088 43.2856 cv
48.8535 39.3394 li
48.8369 39.2886 48.8652 39.2495 48.9102 39.2495 cv
49.7368 39.2495 li
49.7822 39.2495 49.7876 39.2661 49.8047 39.3062 cv
50.603 42.4419 li
51.4014 39.3062 li
51.4126 39.2661 51.4351 39.2495 51.4746 39.2495 cv
52.2109 39.2495 li
52.2617 39.2495 52.2842 39.2778 52.2729 39.3286 cv
51.1123 43.2856 li
51.1011 43.3198 51.0786 43.3364 51.0444 43.3364 cv
50.0654 43.3364 li
cp
f
58.2534 41.6099 mo
58.2534 42.5669 li
58.2534 42.5952 58.2651 42.6118 58.2935 42.6118 cv
58.7744 42.6118 li
59.0859 42.6118 59.3633 42.4927 59.3633 42.1421 cv
59.3633 41.7622 59.1143 41.6099 58.5649 41.6099 cv
58.2534 41.6099 li
cp
58.2988 39.9741 mo
58.2705 39.9741 58.2534 39.9907 58.2534 40.019 cv
58.2534 40.9702 li
58.5874 40.9702 li
59.0576 40.9702 59.2954 40.8286 59.2954 40.4438 cv
59.2954 40.0815 59.0742 39.9741 58.6895 39.9741 cv
58.2988 39.9741 li
cp
58.5933 39.2495 mo
59.7197 39.2495 60.2295 39.5776 60.2295 40.353 cv
60.2295 40.7153 59.9917 41.0894 59.397 41.27 cv
60.0366 41.4458 60.2969 41.8188 60.2969 42.3403 cv
60.2969 43.0649 59.8159 43.3364 58.6328 43.3364 cv
57.4326 43.3364 li
57.3818 43.3364 57.3594 43.314 57.3594 43.2632 cv
57.3594 39.3228 li
57.3594 39.272 57.3818 39.2495 57.4326 39.2495 cv
58.5933 39.2495 li
cp
f
63.3994 41.0776 mo
63.7441 41.0776 li
64.1572 41.0776 64.4121 40.897 64.4121 40.5063 cv
64.4121 40.1382 64.1973 39.9741 63.7666 39.9741 cv
63.4443 39.9741 li
63.416 39.9741 63.3994 39.9907 63.3994 40.019 cv
63.3994 41.0776 li
cp
63.3994 41.7173 mo
63.3994 43.2632 li
63.3994 43.314 63.376 43.3364 63.3369 43.3364 cv
62.5781 43.3364 li
62.5273 43.3364 62.5049 43.314 62.5049 43.2632 cv
62.5049 39.3228 li
62.5049 39.272 62.5273 39.2495 62.5781 39.2495 cv
63.8857 39.2495 li
64.9102 39.2495 65.3467 39.7017 65.3467 40.4888 cv
65.3467 41.0776 65.0693 41.4849 64.5254 41.6382 cv
65.5557 43.229 li
65.5957 43.2915 65.5615 43.3364 65.5107 43.3364 cv
64.6104 43.3364 li
64.582 43.3364 64.5654 43.3247 64.5596 43.3081 cv
63.6367 41.7173 li
63.3994 41.7173 li
cp
f
69.4727 41.7573 mo
69.0195 40.189 li
68.5674 41.7573 li
69.4727 41.7573 li
cp
68.3633 42.4761 mo
68.1367 43.2856 li
68.1201 43.3198 68.0967 43.3364 68.0635 43.3364 cv
67.3271 43.3364 li
67.2881 43.3364 67.2598 43.3022 67.2764 43.2632 cv
68.5215 39.2778 li
68.5215 39.2603 68.5391 39.2495 68.5674 39.2495 cv
69.5693 39.2495 li
69.5859 39.2495 69.6025 39.2603 69.6143 39.2886 cv
70.8486 43.2632 li
70.8652 43.3022 70.8369 43.3364 70.7979 43.3364 cv
69.9766 43.3364 li
69.9424 43.3364 69.9199 43.3198 69.9033 43.2856 cv
69.6768 42.4761 li
68.3633 42.4761 li
cp
f
73.2197 43.3364 mo
73.1797 43.3364 73.1572 43.314 73.1572 43.2632 cv
73.1572 40.019 li
73.1572 39.9907 73.1396 39.9741 73.1113 39.9741 cv
72.166 39.9741 li
72.1152 39.9741 72.0928 39.9507 72.0928 39.8999 cv
72.0928 39.3228 li
72.0928 39.272 72.1152 39.2495 72.166 39.2495 cv
75.0537 39.2495 li
75.0986 39.2495 75.1211 39.272 75.1211 39.3228 cv
75.1211 39.8999 li
75.1211 39.9507 75.0986 39.9741 75.0537 39.9741 cv
74.0908 39.9741 li
74.0625 39.9741 74.0518 39.9907 74.0518 40.019 cv
74.0518 43.2632 li
74.0518 43.314 74.0283 43.3364 73.9775 43.3364 cv
73.2197 43.3364 li
cp
f
77.8545 39.2495 mo
77.8936 39.2495 77.917 39.272 77.917 39.3228 cv
77.917 43.2632 li
77.917 43.314 77.8936 43.3364 77.8545 43.3364 cv
77.0957 43.3364 li
77.0449 43.3364 77.0225 43.314 77.0225 43.2632 cv
77.0225 39.3228 li
77.0225 39.272 77.0449 39.2495 77.0957 39.2495 cv
77.8545 39.2495 li
cp
f
79.9639 43.0708 mo
80.2188 42.4868 li
80.2354 42.4478 80.2695 42.4302 80.3145 42.4478 cv
80.5527 42.5552 80.75 42.6343 81.1406 42.6343 cv
81.4805 42.6343 81.6846 42.4868 81.6846 42.2378 cv
81.6846 42.0063 81.5713 41.8872 81.0225 41.644 cv
80.3145 41.3442 80.0088 40.9702 80.0088 40.3647 cv
80.0088 39.7017 80.5068 39.2095 81.3506 39.2095 cv
81.8994 39.2095 82.1377 39.2495 82.5508 39.4302 cv
82.6016 39.4478 82.6016 39.4868 82.585 39.5269 cv
82.3184 40.0474 li
82.3018 40.0874 82.2676 40.1099 82.2168 40.0874 cv
81.9961 39.9966 81.7695 39.9507 81.5029 39.9507 cv
81.1406 39.9507 80.9824 40.1099 80.9824 40.3413 cv
80.9824 40.5679 81.0674 40.6753 81.6729 40.9194 cv
82.3809 41.2192 82.6523 41.5698 82.6523 42.1479 cv
82.6523 42.9399 82.0918 43.3765 81.2207 43.3765 cv
80.75 43.3765 80.3828 43.3364 79.9971 43.1382 cv
79.9639 43.1157 79.9521 43.0933 79.9639 43.0708 cv
cp
f
85.584 42.5669 mo
85.584 42.5952 85.5947 42.6118 85.623 42.6118 cv
87.1123 42.6118 li
87.1572 42.6118 87.1797 42.6343 87.1797 42.6851 cv
87.1797 43.2632 li
87.1797 43.314 87.1572 43.3364 87.1123 43.3364 cv
84.7627 43.3364 li
84.7119 43.3364 84.6895 43.314 84.6895 43.2632 cv
84.6895 39.3228 li
84.6895 39.272 84.7119 39.2495 84.7627 39.2495 cv
85.5215 39.2495 li
85.5615 39.2495 85.584 39.272 85.584 39.3228 cv
85.584 42.5669 li
cp
f
90.9434 41.7573 mo
90.4902 40.189 li
90.0381 41.7573 li
90.9434 41.7573 li
cp
89.834 42.4761 mo
89.6074 43.2856 li
89.5908 43.3198 89.5674 43.3364 89.5342 43.3364 cv
88.7979 43.3364 li
88.7588 43.3364 88.7305 43.3022 88.7471 43.2632 cv
89.9922 39.2778 li
89.9922 39.2603 90.0098 39.2495 90.0381 39.2495 cv
91.04 39.2495 li
91.0566 39.2495 91.0732 39.2603 91.085 39.2886 cv
92.3193 43.2632 li
92.3359 43.3022 92.3076 43.3364 92.2686 43.3364 cv
91.4473 43.3364 li
91.4131 43.3364 91.3906 43.3198 91.374 43.2856 cv
91.1475 42.4761 li
89.834 42.4761 li
cp
f
94.8936 43.3364 mo
94.8652 43.3364 94.8486 43.3198 94.8369 43.2856 cv
93.6826 39.3394 li
93.665 39.2886 93.6934 39.2495 93.7393 39.2495 cv
94.5654 39.2495 li
94.6104 39.2495 94.6162 39.2661 94.6338 39.3062 cv
95.4316 42.4419 li
96.2295 39.3062 li
96.2412 39.2661 96.2637 39.2495 96.3037 39.2495 cv
97.0391 39.2495 li
97.0898 39.2495 97.1133 39.2778 97.1016 39.3286 cv
95.9414 43.2856 li
95.9297 43.3198 95.9072 43.3364 95.873 43.3364 cv
94.8936 43.3364 li
cp
f
99.8975 40.9302 mo
101.159 40.9302 li
101.211 40.9302 101.239 40.9536 101.239 40.9985 cv
101.239 41.5874 li
101.239 41.6265 101.211 41.6499 101.159 41.6499 cv
99.8975 41.6499 li
99.8975 42.5669 li
99.8975 42.5952 99.9082 42.6118 99.9365 42.6118 cv
101.527 42.6118 li
101.578 42.6118 101.602 42.6343 101.602 42.6802 cv
101.602 43.2632 li
101.602 43.314 101.578 43.3364 101.527 43.3364 cv
99.0762 43.3364 li
99.0254 43.3364 99.0029 43.314 99.0029 43.2632 cv
99.0029 39.3228 li
99.0029 39.272 99.0254 39.2495 99.0762 39.2495 cv
101.527 39.2495 li
101.578 39.2495 101.602 39.272 101.602 39.3228 cv
101.602 39.8999 li
101.602 39.9507 101.578 39.9741 101.527 39.9741 cv
99.9365 39.9741 li
99.9082 39.9741 99.8975 39.9907 99.8975 40.019 cv
99.8975 40.9302 li
cp
f
.958984 48.9204 mo
2.22705 48.9204 li
2.2666 48.9204 2.28906 48.937 2.28906 48.9771 cv
2.28906 49.3394 li
2.28906 49.3784 2.2666 49.396 2.22705 49.396 cv
.958984 49.396 li
.958984 51.145 li
.958984 51.1851 .941895 51.2017 .908203 51.2017 cv
.449219 51.2017 li
.409668 51.2017 .393066 51.1851 .393066 51.145 cv
.393066 47.1714 li
.393066 47.1313 .409668 47.1147 .449219 47.1147 cv
2.58936 47.1147 li
2.62891 47.1147 2.65137 47.1313 2.65137 47.1714 cv
2.65137 47.5278 li
2.65137 47.5669 2.62891 47.5903 2.58936 47.5903 cv
1.00439 47.5903 li
.976074 47.5903 .958984 47.6069 .958984 47.6353 cv
.958984 48.9204 li
cp
f
5.98389 49.7583 mo
5.3667 47.686 li
4.74951 49.7583 li
5.98389 49.7583 li
cp
4.61377 50.2339 mo
4.34766 51.1567 li
4.33643 51.1851 4.31396 51.2017 4.28564 51.2017 cv
3.83838 51.2017 li
3.79883 51.2017 3.78174 51.1733 3.79883 51.1333 cv
5.03271 47.1431 li
5.03271 47.1255 5.04395 47.1147 5.07227 47.1147 cv
5.71777 47.1147 li
5.73486 47.1147 5.75146 47.1255 5.75732 47.1479 cv
6.97998 51.1284 li
6.99707 51.1792 6.97998 51.2017 6.93457 51.2017 cv
6.44238 51.2017 li
6.41406 51.2017 6.39111 51.1851 6.38574 51.1567 cv
6.11963 50.2339 li
4.61377 50.2339 li
cp
f
9.97949 49.1011 mo
11.5762 51.1167 li
11.6045 51.1567 11.5762 51.2017 11.5308 51.2017 cv
10.9531 51.2017 li
10.9365 51.2017 10.9194 51.1958 10.9082 51.1792 cv
9.45313 49.2427 li
9.45313 51.145 li
9.45313 51.1851 9.43604 51.2017 9.40234 51.2017 cv
8.94336 51.2017 li
8.90381 51.2017 8.88721 51.1851 8.88721 51.145 cv
8.88721 47.1714 li
8.88721 47.1313 8.90381 47.1147 8.94336 47.1147 cv
9.40234 47.1147 li
9.43604 47.1147 9.45313 47.1313 9.45313 47.1714 cv
9.45313 49.0112 li
10.8457 47.1372 li
10.8569 47.1196 10.874 47.1147 10.8965 47.1147 cv
11.4233 47.1147 li
11.4683 47.1147 11.4912 47.1655 11.4629 47.2046 cv
9.97949 49.1011 li
cp
f
16.2676 49.9341 mo
16.2676 50.7261 15.9844 51.2417 14.8691 51.2417 cv
13.7539 51.2417 13.4712 50.7261 13.4712 49.9341 cv
13.4712 47.1714 li
13.4712 47.1313 13.4878 47.1147 13.5273 47.1147 cv
13.9863 47.1147 li
14.02 47.1147 14.0371 47.1313 14.0371 47.1714 cv
14.0371 50.0581 li
14.0371 50.5786 14.3203 50.7661 14.8691 50.7661 cv
15.4126 50.7661 15.7012 50.5737 15.7012 50.0581 cv
15.7012 47.1714 li
15.7012 47.1313 15.7183 47.1147 15.7578 47.1147 cv
16.2109 47.1147 li
16.2505 47.1147 16.2676 47.1313 16.2676 47.1714 cv
16.2676 49.9341 li
cp
f
19.0522 50.6812 mo
19.0522 50.7095 19.0635 50.7261 19.0918 50.7261 cv
20.6602 50.7261 li
20.6997 50.7261 20.7168 50.7485 20.7168 50.7886 cv
20.7168 51.145 li
20.7168 51.1851 20.6997 51.2017 20.6602 51.2017 cv
18.543 51.2017 li
18.5029 51.2017 18.4863 51.1851 18.4863 51.145 cv
18.4863 47.1714 li
18.4863 47.1313 18.5029 47.1147 18.543 47.1147 cv
19.0015 47.1147 li
19.0352 47.1147 19.0522 47.1313 19.0522 47.1714 cv
19.0522 50.6812 li
cp
f
22.9512 51.2017 mo
22.917 51.2017 22.8999 51.1851 22.8999 51.145 cv
22.8999 47.6353 li
22.8999 47.6069 22.8833 47.5903 22.855 47.5903 cv
21.8755 47.5903 li
21.8359 47.5903 21.8188 47.5669 21.8188 47.5278 cv
21.8188 47.1714 li
21.8188 47.1313 21.8359 47.1147 21.8755 47.1147 cv
24.4907 47.1147 li
24.5303 47.1147 24.5474 47.1313 24.5474 47.1714 cv
24.5474 47.5278 li
24.5474 47.5669 24.5303 47.5903 24.4907 47.5903 cv
23.5059 47.5903 li
23.4775 47.5903 23.4663 47.6069 23.4663 47.6353 cv
23.4663 51.145 li
23.4663 51.1851 23.4492 51.2017 23.4097 51.2017 cv
22.9512 51.2017 li
cp
f
27.9873 49.7583 mo
27.3701 47.686 li
26.7529 49.7583 li
27.9873 49.7583 li
cp
26.6172 50.2339 mo
26.3511 51.1567 li
26.3398 51.1851 26.3174 51.2017 26.2891 51.2017 cv
25.8418 51.2017 li
25.8018 51.2017 25.7852 51.1733 25.8018 51.1333 cv
27.0361 47.1431 li
27.0361 47.1255 27.0474 47.1147 27.0757 47.1147 cv
27.7212 47.1147 li
27.7383 47.1147 27.7549 47.1255 27.7607 47.1479 cv
28.9834 51.1284 li
29.0005 51.1792 28.9834 51.2017 28.938 51.2017 cv
28.4458 51.2017 li
28.4175 51.2017 28.3945 51.1851 28.3892 51.1567 cv
28.123 50.2339 li
26.6172 50.2339 li
cp
f
34.2104 47.1147 mo
34.2441 47.1147 34.2612 47.1313 34.2612 47.1714 cv
34.2612 51.145 li
34.2612 51.1851 34.2441 51.2017 34.2104 51.2017 cv
33.752 51.2017 li
33.7119 51.2017 33.6953 51.1851 33.6953 51.145 cv
33.6953 47.1714 li
33.6953 47.1313 33.7119 47.1147 33.752 47.1147 cv
34.2104 47.1147 li
cp
f
38.708 50.2622 mo
38.708 47.1714 li
38.708 47.1313 38.7251 47.1147 38.7588 47.1147 cv
39.2061 47.1147 li
39.2461 47.1147 39.2627 47.1313 39.2627 47.1714 cv
39.2627 51.145 li
39.2627 51.1851 39.2461 51.2017 39.2061 51.2017 cv
38.7251 51.2017 li
38.6743 51.2017 38.6626 51.1958 38.646 51.1567 cv
37.0269 48.0542 li
37.0269 51.145 li
37.0269 51.1851 37.0098 51.2017 36.9702 51.2017 cv
36.5283 51.2017 li
36.4888 51.2017 36.4722 51.1851 36.4722 51.145 cv
36.4722 47.1714 li
36.4722 47.1313 36.4888 47.1147 36.5283 47.1147 cv
37.0039 47.1147 li
37.0552 47.1147 37.0664 47.1196 37.0835 47.1597 cv
38.708 50.2622 li
cp
f
42.0356 48.9204 mo
43.3037 48.9204 li
43.3433 48.9204 43.3657 48.937 43.3657 48.9771 cv
43.3657 49.3394 li
43.3657 49.3784 43.3433 49.396 43.3037 49.396 cv
42.0356 49.396 li
42.0356 51.145 li
42.0356 51.1851 42.0186 51.2017 41.9849 51.2017 cv
41.5264 51.2017 li
41.4863 51.2017 41.4697 51.1851 41.4697 51.145 cv
41.4697 47.1714 li
41.4697 47.1313 41.4863 47.1147 41.5264 47.1147 cv
43.666 47.1147 li
43.7056 47.1147 43.728 47.1313 43.728 47.1714 cv
43.728 47.5278 li
43.728 47.5669 43.7056 47.5903 43.666 47.5903 cv
42.0811 47.5903 li
42.0527 47.5903 42.0356 47.6069 42.0356 47.6353 cv
42.0356 48.9204 li
cp
f
47.0273 47.5503 mo
46.3535 47.5503 46.0024 48.0767 46.0024 49.1577 cv
46.0024 50.2397 46.3535 50.7661 47.0273 50.7661 cv
47.6895 50.7661 48.0459 50.2397 48.0459 49.1577 cv
48.0459 48.0767 47.6895 47.5503 47.0273 47.5503 cv
cp
47.0273 51.2417 mo
45.7876 51.2417 45.4082 50.4087 45.4082 49.1577 cv
45.4082 47.8901 45.7759 47.0747 47.0273 47.0747 cv
48.2612 47.0747 48.6406 47.8901 48.6406 49.1577 cv
48.6406 50.4087 48.2612 51.2417 47.0273 51.2417 cv
cp
f
51.2495 49.0396 mo
51.7588 49.0396 li
52.3022 49.0396 52.5854 48.8354 52.5854 48.3091 cv
52.5854 47.7876 52.314 47.5903 51.7705 47.5903 cv
51.2949 47.5903 li
51.2666 47.5903 51.2495 47.6069 51.2495 47.6353 cv
51.2495 49.0396 li
cp
51.2495 49.481 mo
51.2495 51.145 li
51.2495 51.1851 51.2324 51.2017 51.1987 51.2017 cv
50.7402 51.2017 li
50.7002 51.2017 50.6836 51.1851 50.6836 51.145 cv
50.6836 47.1714 li
50.6836 47.1313 50.7002 47.1147 50.7402 47.1147 cv
51.8213 47.1147 li
52.71 47.1147 53.1855 47.4878 53.1855 48.2974 cv
53.1855 48.9595 52.8403 49.311 52.291 49.4302 cv
53.2764 51.1108 li
53.3042 51.1616 53.2817 51.2017 53.2363 51.2017 cv
52.7046 51.2017 li
52.6763 51.2017 52.6592 51.1899 52.6533 51.1733 cv
51.708 49.481 li
51.2495 49.481 li
cp
f
56.8477 51.2017 mo
56.8193 51.2017 56.8022 51.1899 56.7969 51.1675 cv
55.8511 48.0708 li
55.8511 51.145 li
55.8511 51.1851 55.8345 51.2017 55.7944 51.2017 cv
55.376 51.2017 li
55.3359 51.2017 55.3193 51.1851 55.3193 51.145 cv
55.3193 47.1714 li
55.3193 47.1313 55.3359 47.1147 55.376 47.1147 cv
55.9873 47.1147 li
56.0156 47.1147 56.0381 47.1255 56.0439 47.1479 cv
57.1025 50.522 li
58.1665 47.1479 li
58.1777 47.1255 58.2007 47.1147 58.229 47.1147 cv
58.7896 47.1147 li
58.8232 47.1147 58.8403 47.1313 58.8403 47.1714 cv
58.8403 51.145 li
58.8403 51.1851 58.8232 51.2017 58.7896 51.2017 cv
58.3647 51.2017 li
58.3252 51.2017 58.3081 51.1851 58.3081 51.145 cv
58.3081 48.0708 li
57.3682 51.1675 li
57.3628 51.1899 57.3457 51.2017 57.3174 51.2017 cv
56.8477 51.2017 li
cp
f
62.9277 49.7583 mo
62.3105 47.686 li
61.6943 49.7583 li
62.9277 49.7583 li
cp
61.5576 50.2339 mo
61.292 51.1567 li
61.2803 51.1851 61.2578 51.2017 61.2295 51.2017 cv
60.7822 51.2017 li
60.7432 51.2017 60.7256 51.1733 60.7432 51.1333 cv
61.9766 47.1431 li
61.9766 47.1255 61.9883 47.1147 62.0166 47.1147 cv
62.6621 47.1147 li
62.6787 47.1147 62.6963 47.1255 62.7012 47.1479 cv
63.9248 51.1284 li
63.9414 51.1792 63.9248 51.2017 63.8789 51.2017 cv
63.3867 51.2017 li
63.3584 51.2017 63.3359 51.1851 63.3301 51.1567 cv
63.0635 50.2339 li
61.5576 50.2339 li
cp
f
66.3057 51.2017 mo
66.2725 51.2017 66.2549 51.1851 66.2549 51.145 cv
66.2549 47.6353 li
66.2549 47.6069 66.2383 47.5903 66.21 47.5903 cv
65.2305 47.5903 li
65.1904 47.5903 65.1738 47.5669 65.1738 47.5278 cv
65.1738 47.1714 li
65.1738 47.1313 65.1904 47.1147 65.2305 47.1147 cv
67.8457 47.1147 li
67.8857 47.1147 67.9023 47.1313 67.9023 47.1714 cv
67.9023 47.5278 li
67.9023 47.5669 67.8857 47.5903 67.8457 47.5903 cv
66.8604 47.5903 li
66.832 47.5903 66.8213 47.6069 66.8213 47.6353 cv
66.8213 51.145 li
66.8213 51.1851 66.8037 51.2017 66.7646 51.2017 cv
66.3057 51.2017 li
cp
f
70.3125 47.1147 mo
70.3467 47.1147 70.3633 47.1313 70.3633 47.1714 cv
70.3633 51.145 li
70.3633 51.1851 70.3467 51.2017 70.3125 51.2017 cv
69.8545 51.2017 li
69.8145 51.2017 69.7979 51.1851 69.7979 51.145 cv
69.7979 47.1714 li
69.7979 47.1313 69.8145 47.1147 69.8545 47.1147 cv
70.3125 47.1147 li
cp
f
73.667 49.1011 mo
75.2627 51.1167 li
75.291 51.1567 75.2627 51.2017 75.2178 51.2017 cv
74.6406 51.2017 li
74.623 51.2017 74.6064 51.1958 74.5947 51.1792 cv
73.1396 49.2427 li
73.1396 51.145 li
73.1396 51.1851 73.123 51.2017 73.0889 51.2017 cv
72.6309 51.2017 li
72.5908 51.2017 72.5742 51.1851 72.5742 51.145 cv
72.5742 47.1714 li
72.5742 47.1313 72.5908 47.1147 72.6309 47.1147 cv
73.0889 47.1147 li
73.123 47.1147 73.1396 47.1313 73.1396 47.1714 cv
73.1396 49.0112 li
74.5322 47.1372 li
74.5439 47.1196 74.5605 47.1147 74.584 47.1147 cv
75.1104 47.1147 li
75.1553 47.1147 75.1777 47.1655 75.1494 47.2046 cv
73.667 49.1011 li
cp
f
78.5908 49.4692 mo
78.5908 51.1392 li
78.5908 51.1792 78.5732 51.2017 78.5342 51.2017 cv
78.0811 51.2017 li
78.042 51.2017 78.0244 51.1792 78.0244 51.1392 cv
78.0244 49.4692 li
76.8525 47.2046 li
76.8242 47.1538 76.8467 47.1147 76.8984 47.1147 cv
77.4131 47.1147 li
77.4414 47.1147 77.458 47.1255 77.4697 47.1479 cv
78.3418 48.9429 li
79.2188 47.1479 li
79.2246 47.1255 79.2412 47.1147 79.2695 47.1147 cv
79.751 47.1147 li
79.7969 47.1147 79.8193 47.1538 79.8018 47.1938 cv
78.5908 49.4692 li
cp
f
2.27246 57.6235 mo
1.65527 55.5513 li
1.03809 57.6235 li
2.27246 57.6235 li
cp
.902344 58.0991 mo
.63623 59.022 li
.625 59.0503 .602539 59.0669 .574219 59.0669 cv
.126953 59.0669 li
.0869141 59.0669 .0703125 59.0386 .0869141 58.9985 cv
1.32129 55.0083 li
1.32129 54.9907 1.33252 54.98 1.36084 54.98 cv
2.00635 54.98 li
2.02344 54.98 2.04004 54.9907 2.0459 55.0132 cv
3.26855 58.9937 li
3.28564 59.0444 3.26855 59.0669 3.22314 59.0669 cv
2.73096 59.0669 li
2.70264 59.0669 2.67969 59.0503 2.67432 59.022 cv
2.4082 58.0991 li
.902344 58.0991 li
cp
f
8.50146 54.98 mo
8.53516 54.98 8.55225 54.9966 8.55225 55.0366 cv
8.55225 59.0103 li
8.55225 59.0503 8.53516 59.0669 8.50146 59.0669 cv
8.04297 59.0669 li
8.00293 59.0669 7.98633 59.0503 7.98633 59.0103 cv
7.98633 55.0366 li
7.98633 54.9966 8.00293 54.98 8.04297 54.98 cv
8.50146 54.98 li
cp
f
12.9985 58.1274 mo
12.9985 55.0366 li
12.9985 54.9966 13.0156 54.98 13.0493 54.98 cv
13.4966 54.98 li
13.5361 54.98 13.5532 54.9966 13.5532 55.0366 cv
13.5532 59.0103 li
13.5532 59.0503 13.5361 59.0669 13.4966 59.0669 cv
13.0156 59.0669 li
12.9648 59.0669 12.9531 59.061 12.9365 59.022 cv
11.3174 55.9194 li
11.3174 59.0103 li
11.3174 59.0503 11.3003 59.0669 11.2607 59.0669 cv
10.8193 59.0669 li
10.7793 59.0669 10.7627 59.0503 10.7627 59.0103 cv
10.7627 55.0366 li
10.7627 54.9966 10.7793 54.98 10.8193 54.98 cv
11.2944 54.98 li
11.3457 54.98 11.3569 54.9849 11.374 55.0249 cv
12.9985 58.1274 li
cp
f
16.3325 56.7856 mo
17.6006 56.7856 li
17.6401 56.7856 17.6626 56.8022 17.6626 56.8423 cv
17.6626 57.2046 li
17.6626 57.2437 17.6401 57.2612 17.6006 57.2612 cv
16.3325 57.2612 li
16.3325 59.0103 li
16.3325 59.0503 16.3154 59.0669 16.2817 59.0669 cv
15.8232 59.0669 li
15.7832 59.0669 15.7666 59.0503 15.7666 59.0103 cv
15.7666 55.0366 li
15.7666 54.9966 15.7832 54.98 15.8232 54.98 cv
17.9629 54.98 li
18.0024 54.98 18.0249 54.9966 18.0249 55.0366 cv
18.0249 55.3931 li
18.0249 55.4321 18.0024 55.4556 17.9629 55.4556 cv
16.3779 55.4556 li
16.3496 55.4556 16.3325 55.4722 16.3325 55.5005 cv
16.3325 56.7856 li
cp
f
21.3237 55.4155 mo
20.6499 55.4155 20.2988 55.9419 20.2988 57.0229 cv
20.2988 58.105 20.6499 58.6313 21.3237 58.6313 cv
21.9858 58.6313 22.3423 58.105 22.3423 57.0229 cv
22.3423 55.9419 21.9858 55.4155 21.3237 55.4155 cv
cp
21.3237 59.1069 mo
20.084 59.1069 19.7046 58.2739 19.7046 57.0229 cv
19.7046 55.7554 20.0723 54.9399 21.3237 54.9399 cv
22.5576 54.9399 22.937 55.7554 22.937 57.0229 cv
22.937 58.2739 22.5576 59.1069 21.3237 59.1069 cv
cp
f
25.5459 56.9048 mo
26.0552 56.9048 li
26.5986 56.9048 26.8818 56.7007 26.8818 56.1743 cv
26.8818 55.6528 26.6104 55.4556 26.0669 55.4556 cv
25.5913 55.4556 li
25.563 55.4556 25.5459 55.4722 25.5459 55.5005 cv
25.5459 56.9048 li
cp
25.5459 57.3462 mo
25.5459 59.0103 li
25.5459 59.0503 25.5288 59.0669 25.4951 59.0669 cv
25.0361 59.0669 li
24.9966 59.0669 24.98 59.0503 24.98 59.0103 cv
24.98 55.0366 li
24.98 54.9966 24.9966 54.98 25.0361 54.98 cv
26.1177 54.98 li
27.0063 54.98 27.4819 55.353 27.4819 56.1626 cv
27.4819 56.8247 27.1367 57.1763 26.5874 57.2954 cv
27.5723 58.9761 li
27.6006 59.0269 27.5781 59.0669 27.5327 59.0669 cv
27.001 59.0669 li
26.9727 59.0669 26.9556 59.0552 26.9497 59.0386 cv
26.0044 57.3462 li
25.5459 57.3462 li
cp
f
31.1265 59.0669 mo
31.0981 59.0669 31.0811 59.0552 31.0757 59.0327 cv
30.1299 55.936 li
30.1299 59.0103 li
30.1299 59.0503 30.1133 59.0669 30.0732 59.0669 cv
29.6543 59.0669 li
29.6147 59.0669 29.5981 59.0503 29.5981 59.0103 cv
29.5981 55.0366 li
29.5981 54.9966 29.6147 54.98 29.6543 54.98 cv
30.2661 54.98 li
30.2944 54.98 30.3169 54.9907 30.3228 55.0132 cv
31.3813 58.3872 li
32.4453 55.0132 li
32.4565 54.9907 32.4795 54.98 32.5078 54.98 cv
33.0684 54.98 li
33.1021 54.98 33.1191 54.9966 33.1191 55.0366 cv
33.1191 59.0103 li
33.1191 59.0503 33.1021 59.0669 33.0684 59.0669 cv
32.6436 59.0669 li
32.604 59.0669 32.5869 59.0503 32.5869 59.0103 cv
32.5869 55.936 li
31.6475 59.0327 li
31.6416 59.0552 31.6245 59.0669 31.5962 59.0669 cv
31.1265 59.0669 li
cp
f
37.2065 57.6235 mo
36.5894 55.5513 li
35.9722 57.6235 li
37.2065 57.6235 li
cp
35.8364 58.0991 mo
35.5703 59.022 li
35.5591 59.0503 35.5366 59.0669 35.5083 59.0669 cv
35.061 59.0669 li
35.0215 59.0669 35.0044 59.0386 35.0215 58.9985 cv
36.2554 55.0083 li
36.2554 54.9907 36.2666 54.98 36.2949 54.98 cv
36.9404 54.98 li
36.9575 54.98 36.9741 54.9907 36.98 55.0132 cv
38.2026 58.9937 li
38.2197 59.0444 38.2026 59.0669 38.1572 59.0669 cv
37.665 59.0669 li
37.6367 59.0669 37.6138 59.0503 37.6084 59.022 cv
37.3423 58.0991 li
35.8364 58.0991 li
cp
f
40.7378 54.1587 mo
40.6982 54.1304 40.687 54.1079 40.7153 54.0796 cv
40.8965 53.8364 li
40.9189 53.8081 40.9473 53.8022 40.9756 53.8247 cv
41.542 54.2944 li
41.5645 54.3169 41.5874 54.3169 41.6099 54.2944 cv
42.1758 53.8247 li
42.2041 53.8022 42.2324 53.8081 42.2554 53.8364 cv
42.4365 54.0796 li
42.4648 54.1079 42.4531 54.1304 42.4136 54.1587 cv
41.6152 54.6968 li
41.5874 54.7134 41.5645 54.7134 41.5361 54.6968 cv
40.7378 54.1587 li
cp
41.6665 59.1069 mo
40.5117 59.1069 39.9966 58.2573 39.9966 57.0181 cv
39.9966 55.7944 40.5117 54.9399 41.6665 54.9399 cv
42.0513 54.9399 42.3345 54.9907 42.6514 55.1665 cv
42.6797 55.189 42.6797 55.2231 42.6626 55.2622 cv
42.4932 55.5737 li
42.4761 55.6138 42.4419 55.6138 42.4136 55.5972 cv
42.1704 55.478 42.0176 55.4272 41.7002 55.4272 cv
41.0664 55.4272 40.5967 55.936 40.5967 57.0181 cv
40.5967 58.1157 41.0552 58.6196 41.7002 58.6196 cv
41.9834 58.6196 42.1646 58.5796 42.4194 58.4438 cv
42.4531 58.4272 42.4761 58.4331 42.4932 58.4614 cv
42.6685 58.7837 li
42.6855 58.8179 42.6797 58.8462 42.6514 58.8745 cv
42.3232 59.0552 42.0571 59.1069 41.6665 59.1069 cv
cp
f
46.8447 58.1274 mo
46.8447 55.0366 li
46.8447 54.9966 46.8618 54.98 46.8955 54.98 cv
47.3428 54.98 li
47.3828 54.98 47.3994 54.9966 47.3994 55.0366 cv
47.3994 59.0103 li
47.3994 59.0503 47.3828 59.0669 47.3428 59.0669 cv
46.8618 59.0669 li
46.811 59.0669 46.7993 59.061 46.7827 59.022 cv
45.1636 55.9194 li
45.1636 59.0103 li
45.1636 59.0503 45.1465 59.0669 45.1069 59.0669 cv
44.665 59.0669 li
44.6255 59.0669 44.6089 59.0503 44.6089 59.0103 cv
44.6089 55.0366 li
44.6089 54.9966 44.6255 54.98 44.665 54.98 cv
45.1406 54.98 li
45.1919 54.98 45.2031 54.9849 45.2202 55.0249 cv
46.8447 58.1274 li
cp
f
50.7397 54.6685 mo
50.7114 54.6851 50.6831 54.6626 50.666 54.646 cv
50.5923 54.4985 li
50.5869 54.4761 50.5923 54.4419 50.6206 54.4253 cv
51.6226 53.8364 li
51.6621 53.8188 51.6851 53.8306 51.6963 53.8589 cv
51.8491 54.1479 li
51.8662 54.187 51.8545 54.2095 51.8208 54.2271 cv
50.7397 54.6685 li
cp
51.0454 57.3345 mo
51.0454 59.0044 li
51.0454 59.0444 51.0283 59.0669 50.9888 59.0669 cv
50.5356 59.0669 li
50.4961 59.0669 50.479 59.0444 50.479 59.0044 cv
50.479 57.3345 li
49.3071 55.0698 li
49.2788 55.019 49.3018 54.98 49.3525 54.98 cv
49.8677 54.98 li
49.896 54.98 49.9131 54.9907 49.9243 55.0132 cv
50.7959 56.8081 li
51.6738 55.0132 li
51.6792 54.9907 51.6963 54.98 51.7246 54.98 cv
52.2056 54.98 li
52.251 54.98 52.2734 55.019 52.2568 55.0591 cv
51.0454 57.3345 li
cp
f
55.4766 59.1069 mo
54.3218 59.1069 53.8066 58.2573 53.8066 57.0181 cv
53.8066 55.7944 54.3218 54.9399 55.4766 54.9399 cv
55.8613 54.9399 56.1445 54.9907 56.4614 55.1665 cv
56.4897 55.189 56.4897 55.2231 56.4727 55.2622 cv
56.3032 55.5737 li
56.2861 55.6138 56.252 55.6138 56.2236 55.5972 cv
55.9805 55.478 55.8276 55.4272 55.5103 55.4272 cv
54.8765 55.4272 54.4067 55.936 54.4067 57.0181 cv
54.4067 58.1157 54.8652 58.6196 55.5103 58.6196 cv
55.7935 58.6196 55.9746 58.5796 56.2295 58.4438 cv
56.2632 58.4272 56.2861 58.4331 56.3032 58.4614 cv
56.4785 58.7837 li
56.4956 58.8179 56.4897 58.8462 56.4614 58.8745 cv
56.1333 59.0552 55.8672 59.1069 55.4766 59.1069 cv
cp
f
59.0303 57.2612 mo
59.002 57.2612 58.9849 57.2778 58.9849 57.3062 cv
58.9849 59.0103 li
58.9849 59.0503 58.9678 59.0669 58.9341 59.0669 cv
58.4756 59.0669 li
58.4355 59.0669 58.4189 59.0503 58.4189 59.0103 cv
58.4189 55.0366 li
58.4189 54.9966 58.4355 54.98 58.4756 54.98 cv
58.9341 54.98 li
58.9678 54.98 58.9849 54.9966 58.9849 55.0366 cv
58.9849 56.7397 li
58.9849 56.7681 59.002 56.7856 59.0303 56.7856 cv
60.5928 56.7856 li
60.6211 56.7856 60.6377 56.7681 60.6377 56.7397 cv
60.6377 55.0366 li
60.6377 54.9966 60.6553 54.98 60.6943 54.98 cv
61.1475 54.98 li
61.1865 54.98 61.2041 54.9966 61.2041 55.0366 cv
61.2041 59.0103 li
61.2041 59.0503 61.1865 59.0669 61.1475 59.0669 cv
60.6943 59.0669 li
60.6553 59.0669 60.6377 59.0503 60.6377 59.0103 cv
60.6377 57.3062 li
60.6377 57.2778 60.6211 57.2612 60.5928 57.2612 cv
59.0303 57.2612 li
cp
f
67.0537 59.0669 mo
67.0205 59.0669 67.0029 59.0503 67.0029 59.0103 cv
67.0029 55.5005 li
67.0029 55.4722 66.9863 55.4556 66.958 55.4556 cv
65.9785 55.4556 li
65.9385 55.4556 65.9219 55.4321 65.9219 55.3931 cv
65.9219 55.0366 li
65.9219 54.9966 65.9385 54.98 65.9785 54.98 cv
68.5938 54.98 li
68.6338 54.98 68.6504 54.9966 68.6504 55.0366 cv
68.6504 55.3931 li
68.6504 55.4321 68.6338 55.4556 68.5938 55.4556 cv
67.6084 55.4556 li
67.5801 55.4556 67.5693 55.4722 67.5693 55.5005 cv
67.5693 59.0103 li
67.5693 59.0503 67.5518 59.0669 67.5127 59.0669 cv
67.0537 59.0669 li
cp
f
71.1113 56.7856 mo
72.4365 56.7856 li
72.4766 56.7856 72.499 56.8022 72.499 56.8423 cv
72.499 57.2046 li
72.499 57.2437 72.4766 57.2612 72.4365 57.2612 cv
71.1113 57.2612 li
71.1113 58.5464 li
71.1113 58.5747 71.123 58.5913 71.1514 58.5913 cv
72.7988 58.5913 li
72.8389 58.5913 72.8613 58.6079 72.8613 58.6479 cv
72.8613 59.0103 li
72.8613 59.0503 72.8389 59.0669 72.7988 59.0669 cv
70.6025 59.0669 li
70.5625 59.0669 70.5459 59.0503 70.5459 59.0103 cv
70.5459 55.0366 li
70.5459 54.9966 70.5625 54.98 70.6025 54.98 cv
72.7988 54.98 li
72.8389 54.98 72.8613 54.9966 72.8613 55.0366 cv
72.8613 55.3931 li
72.8613 55.4321 72.8389 55.4556 72.7988 55.4556 cv
71.1514 55.4556 li
71.123 55.4556 71.1113 55.4722 71.1113 55.5005 cv
71.1113 56.7856 li
cp
f
76.4033 59.1069 mo
75.248 59.1069 74.7334 58.2573 74.7334 57.0181 cv
74.7334 55.7944 75.248 54.9399 76.4033 54.9399 cv
76.7881 54.9399 77.0713 54.9907 77.3887 55.1665 cv
77.417 55.189 77.417 55.2231 77.3994 55.2622 cv
77.2295 55.5737 li
77.2129 55.6138 77.1787 55.6138 77.1504 55.5972 cv
76.9072 55.478 76.7539 55.4272 76.4375 55.4272 cv
75.8027 55.4272 75.333 55.936 75.333 57.0181 cv
75.333 58.1157 75.792 58.6196 76.4375 58.6196 cv
76.7207 58.6196 76.9014 58.5796 77.1563 58.4438 cv
77.1904 58.4272 77.2129 58.4331 77.2295 58.4614 cv
77.4053 58.7837 li
77.4219 58.8179 77.417 58.8462 77.3887 58.8745 cv
77.0596 59.0552 76.7939 59.1069 76.4033 59.1069 cv
cp
f
79.957 57.2612 mo
79.9287 57.2612 79.9111 57.2778 79.9111 57.3062 cv
79.9111 59.0103 li
79.9111 59.0503 79.8945 59.0669 79.8604 59.0669 cv
79.4023 59.0669 li
79.3623 59.0669 79.3457 59.0503 79.3457 59.0103 cv
79.3457 55.0366 li
79.3457 54.9966 79.3623 54.98 79.4023 54.98 cv
79.8604 54.98 li
79.8945 54.98 79.9111 54.9966 79.9111 55.0366 cv
79.9111 56.7397 li
79.9111 56.7681 79.9287 56.7856 79.957 56.7856 cv
81.5195 56.7856 li
81.5479 56.7856 81.5645 56.7681 81.5645 56.7397 cv
81.5645 55.0366 li
81.5645 54.9966 81.582 54.98 81.6211 54.98 cv
82.0742 54.98 li
82.1133 54.98 82.1309 54.9966 82.1309 55.0366 cv
82.1309 59.0103 li
82.1309 59.0503 82.1133 59.0669 82.0742 59.0669 cv
81.6211 59.0669 li
81.582 59.0669 81.5645 59.0503 81.5645 59.0103 cv
81.5645 57.3062 li
81.5645 57.2778 81.5479 57.2612 81.5195 57.2612 cv
79.957 57.2612 li
cp
f
86.5801 58.1274 mo
86.5801 55.0366 li
86.5801 54.9966 86.5967 54.98 86.6309 54.98 cv
87.0781 54.98 li
87.1172 54.98 87.1348 54.9966 87.1348 55.0366 cv
87.1348 59.0103 li
87.1348 59.0503 87.1172 59.0669 87.0781 59.0669 cv
86.5967 59.0669 li
86.5459 59.0669 86.5342 59.061 86.5176 59.022 cv
84.8984 55.9194 li
84.8984 59.0103 li
84.8984 59.0503 84.8809 59.0669 84.8418 59.0669 cv
84.4004 59.0669 li
84.3604 59.0669 84.3438 59.0503 84.3438 59.0103 cv
84.3438 55.0366 li
84.3438 54.9966 84.3604 54.98 84.4004 54.98 cv
84.876 54.98 li
84.9268 54.98 84.9375 54.9849 84.9551 55.0249 cv
86.5801 58.1274 li
cp
f
90.791 55.4155 mo
90.1172 55.4155 89.7666 55.9419 89.7666 57.0229 cv
89.7666 58.105 90.1172 58.6313 90.791 58.6313 cv
91.4531 58.6313 91.8096 58.105 91.8096 57.0229 cv
91.8096 55.9419 91.4531 55.4155 90.791 55.4155 cv
cp
90.791 59.1069 mo
89.5508 59.1069 89.1719 58.2739 89.1719 57.0229 cv
89.1719 55.7554 89.54 54.9399 90.791 54.9399 cv
92.0244 54.9399 92.4043 55.7554 92.4043 57.0229 cv
92.4043 58.2739 92.0244 59.1069 90.791 59.1069 cv
cp
f
95.0186 58.5464 mo
95.0186 58.5747 95.0303 58.5913 95.0586 58.5913 cv
96.627 58.5913 li
96.666 58.5913 96.6836 58.6138 96.6836 58.6538 cv
96.6836 59.0103 li
96.6836 59.0503 96.666 59.0669 96.627 59.0669 cv
94.5098 59.0669 li
94.4697 59.0669 94.4531 59.0503 94.4531 59.0103 cv
94.4531 55.0366 li
94.4531 54.9966 94.4697 54.98 94.5098 54.98 cv
94.9678 54.98 li
95.002 54.98 95.0186 54.9966 95.0186 55.0366 cv
95.0186 58.5464 li
cp
f
99.4834 54.6685 mo
99.4551 54.6851 99.4268 54.6626 99.4102 54.646 cv
99.3359 54.4985 li
99.3311 54.4761 99.3359 54.4419 99.3643 54.4253 cv
100.366 53.8364 li
100.406 53.8188 100.429 53.8306 100.44 53.8589 cv
100.593 54.1479 li
100.61 54.187 100.599 54.2095 100.564 54.2271 cv
99.4834 54.6685 li
cp
99.7725 55.4155 mo
99.0986 55.4155 98.748 55.9419 98.748 57.0229 cv
98.748 58.105 99.0986 58.6313 99.7725 58.6313 cv
100.435 58.6313 100.791 58.105 100.791 57.0229 cv
100.791 55.9419 100.435 55.4155 99.7725 55.4155 cv
cp
99.7725 59.1069 mo
98.5322 59.1069 98.1533 58.2739 98.1533 57.0229 cv
98.1533 55.7554 98.5215 54.9399 99.7725 54.9399 cv
101.007 54.9399 101.386 55.7554 101.386 57.0229 cv
101.386 58.2739 101.007 59.1069 99.7725 59.1069 cv
cp
f
105.518 57.4312 mo
104.838 57.4312 li
104.799 57.4312 104.781 57.4136 104.781 57.3745 cv
104.781 57.0229 li
104.781 56.9839 104.799 56.9663 104.838 56.9663 cv
105.987 56.9663 li
106.027 56.9663 106.044 56.9839 106.044 57.0229 cv
106.044 58.7896 li
106.044 58.8296 106.032 58.8521 106.01 58.8628 cv
105.693 59.0269 105.364 59.1069 104.935 59.1069 cv
103.779 59.1069 103.259 58.2456 103.259 57.0181 cv
103.259 55.7944 103.779 54.9399 104.935 54.9399 cv
105.313 54.9399 105.603 54.9907 105.919 55.1665 cv
105.947 55.189 105.947 55.2231 105.931 55.2622 cv
105.767 55.5737 li
105.744 55.6138 105.716 55.6196 105.682 55.5972 cv
105.438 55.478 105.285 55.4272 104.969 55.4272 cv
104.334 55.4272 103.858 55.936 103.858 57.0181 cv
103.858 58.1157 104.323 58.6362 104.951 58.6362 cv
105.229 58.6362 105.364 58.5854 105.518 58.5239 cv
105.518 57.4312 li
cp
f
108.602 54.98 mo
108.636 54.98 108.652 54.9966 108.652 55.0366 cv
108.652 59.0103 li
108.652 59.0503 108.636 59.0669 108.602 59.0669 cv
108.144 59.0669 li
108.104 59.0669 108.087 59.0503 108.087 59.0103 cv
108.087 55.0366 li
108.087 54.9966 108.104 54.98 108.144 54.98 cv
108.602 54.98 li
cp
f
111.378 54.98 mo
111.412 54.98 111.429 54.9966 111.429 55.0366 cv
111.429 59.0103 li
111.429 59.0503 111.412 59.0669 111.378 59.0669 cv
110.92 59.0669 li
110.88 59.0669 110.863 59.0503 110.863 59.0103 cv
110.863 55.0366 li
110.863 54.9966 110.88 54.98 110.92 54.98 cv
111.378 54.98 li
cp
110.88 54.6685 mo
110.852 54.6851 110.823 54.6626 110.807 54.646 cv
110.732 54.4985 li
110.728 54.4761 110.732 54.4419 110.761 54.4253 cv
111.763 53.8364 li
111.803 53.8188 111.825 53.8306 111.837 53.8589 cv
111.989 54.1479 li
112.007 54.187 111.995 54.2095 111.961 54.2271 cv
110.88 54.6685 li
cp
f
1.5332 11.4897 mo
2.37939 11.4897 3.06738 10.8037 3.06738 9.95654 cv
3.06738 9.10693 2.37939 8.42578 1.5332 8.42578 cv
.686035 8.42578 0 9.10693 0 9.95654 cv
0 10.8037 .686035 11.4897 1.5332 11.4897 cv
.9 0 0 .2 cmyk
f
1.5332 19.9116 mo
2.37939 19.9116 3.06738 19.2266 3.06738 18.3809 cv
3.06738 17.5347 2.37939 16.8457 1.5332 16.8457 cv
.686035 16.8457 0 17.5347 0 18.3809 cv
0 19.2266 .686035 19.9116 1.5332 19.9116 cv
f
9.95703 11.4897 mo
10.8032 11.4897 11.4888 10.8037 11.4888 9.95654 cv
11.4888 9.10693 10.8032 8.42578 9.95703 8.42578 cv
9.10889 8.42578 8.42285 9.10693 8.42285 9.95654 cv
8.42285 10.8037 9.10889 11.4897 9.95703 11.4897 cv
f
9.95703 19.9116 mo
10.8032 19.9116 11.4888 19.2266 11.4888 18.3809 cv
11.4888 17.5347 10.8032 16.8457 9.95703 16.8457 cv
9.10889 16.8457 8.42285 17.5347 8.42285 18.3809 cv
8.42285 19.2266 9.10889 19.9116 9.95703 19.9116 cv
f
18.3765 11.4897 mo
19.2266 11.4897 19.9126 10.8037 19.9126 9.95654 cv
19.9126 9.10693 19.2266 8.42578 18.3765 8.42578 cv
17.5293 8.42578 16.8467 9.10693 16.8467 9.95654 cv
16.8467 10.8037 17.5293 11.4897 18.3765 11.4897 cv
f
1.5332 3.06592 mo
2.37939 3.06592 3.06738 2.37988 3.06738 1.53271 cv
3.06738 .685059 2.37939 .00195313 1.5332 .00195313 cv
.686035 .00195313 0 .685059 0 1.53271 cv
0 2.37988 .686035 3.06592 1.5332 3.06592 cv
f
9.95703 3.06592 mo
10.8032 3.06592 11.4888 2.37988 11.4888 1.53271 cv
11.4888 .685059 10.8032 .00195313 9.95703 .00195313 cv
9.10889 .00195313 8.42285 .685059 8.42285 1.53271 cv
8.42285 2.37988 9.10889 3.06592 9.95703 3.06592 cv
f
18.3765 3.06592 mo
19.2266 3.06592 19.9126 2.37988 19.9126 1.53271 cv
19.9126 .685059 19.2266 .00195313 18.3765 .00195313 cv
17.5293 .00195313 16.8467 .685059 16.8467 1.53271 cv
16.8467 2.37988 17.5293 3.06592 18.3765 3.06592 cv
f
18.3765 19.9116 mo
19.2266 19.9116 19.9126 19.2266 19.9126 18.3809 cv
19.9126 17.5347 19.2266 16.8457 18.3765 16.8457 cv
17.5293 16.8457 16.8467 17.5347 16.8467 18.3809 cv
16.8467 19.2266 17.5293 19.9116 18.3765 19.9116 cv
f
26.8013 11.4897 mo
27.6484 11.4897 28.3345 10.8037 28.3345 9.95654 cv
28.3345 9.10693 27.6484 8.42578 26.8013 8.42578 cv
25.9541 8.42578 25.2705 9.10693 25.2705 9.95654 cv
25.2705 10.8037 25.9541 11.4897 26.8013 11.4897 cv
f
26.8013 19.9116 mo
27.6484 19.9116 28.3345 19.2266 28.3345 18.3809 cv
28.3345 17.5347 27.6484 16.8457 26.8013 16.8457 cv
25.9541 16.8457 25.2705 17.5347 25.2705 18.3809 cv
25.2705 19.2266 25.9541 19.9116 26.8013 19.9116 cv
f
26.8013 3.06592 mo
27.6484 3.06592 28.3345 2.37988 28.3345 1.53076 cv
28.3345 .687988 27.6484 0 26.8013 0 cv
25.9541 0 25.2705 .687988 25.2705 1.53076 cv
25.2705 2.37988 25.9541 3.06592 26.8013 3.06592 cv
f
37.1079 12.6968 mo
37.1079 12.6396 37.1421 12.6069 37.1987 12.6069 cv
40.373 12.6069 li
40.4517 12.6069 40.4971 12.5605 40.4971 12.4819 cv
40.4971 11.7676 li
40.4971 11.689 40.4517 11.6548 40.373 11.6548 cv
36.0879 11.6548 li
36.0088 11.6548 35.9751 11.689 35.9751 11.7676 cv
35.9751 19.7236 li
35.9751 19.8027 36.0088 19.8379 36.0879 19.8379 cv
37.0059 19.8379 li
37.0747 19.8379 37.1079 19.8027 37.1079 19.7236 cv
37.1079 16.2217 li
39.647 16.2217 li
39.7261 16.2217 39.772 16.188 39.772 16.1089 cv
39.772 15.3838 li
39.772 15.3037 39.7261 15.2695 39.647 15.2695 cv
37.1079 15.2695 li
37.1079 12.6968 li
cp
44.3047 11.6548 mo
44.2251 11.6548 44.1919 11.689 44.1919 11.7676 cv
44.1919 19.7236 li
44.1919 19.8027 44.2251 19.8379 44.3047 19.8379 cv
45.2227 19.8379 li
45.292 19.8379 45.3247 19.8027 45.3247 19.7236 cv
45.3247 11.7676 li
45.3247 11.689 45.292 11.6548 45.2227 11.6548 cv
44.3047 11.6548 li
cp
49.8579 11.6548 mo
49.7788 11.6548 49.7451 11.689 49.7451 11.7676 cv
49.7451 19.7236 li
49.7451 19.8027 49.7788 19.8379 49.8579 19.8379 cv
50.7759 19.8379 li
50.8438 19.8379 50.8789 19.8027 50.8789 19.7236 cv
50.8789 11.7676 li
50.8789 11.689 50.8438 11.6548 50.7759 11.6548 cv
49.8579 11.6548 li
cp
57.8579 19.8379 mo
57.939 19.8379 57.9727 19.8027 57.9727 19.7236 cv
57.9727 12.6968 li
57.9727 12.6396 57.9951 12.6069 58.0508 12.6069 cv
60.0239 12.6069 li
60.103 12.6069 60.1367 12.5605 60.1367 12.4819 cv
60.1367 11.7676 li
60.1367 11.689 60.103 11.6548 60.0239 11.6548 cv
54.7881 11.6548 li
54.708 11.6548 54.6738 11.689 54.6738 11.7676 cv
54.6738 12.4819 li
54.6738 12.5605 54.708 12.6069 54.7881 12.6069 cv
56.748 12.6069 li
56.8047 12.6069 56.8379 12.6396 56.8379 12.6968 cv
56.8379 19.7236 li
56.8379 19.8027 56.873 19.8379 56.9409 19.8379 cv
57.8579 19.8379 li
cp
0 0 0 1 cmyk
f
35.7144 7.90771 mo
36.4854 8.30371 37.2212 8.38379 38.1626 8.38379 cv
39.9072 8.38379 41.0293 7.51074 41.0293 5.92383 cv
41.0293 4.76758 40.4854 4.06445 39.0684 3.46484 cv
37.8564 2.97656 37.6865 2.76172 37.6865 2.30762 cv
37.6865 1.84375 38.0034 1.52686 38.7295 1.52686 cv
39.2622 1.52686 39.7153 1.6167 40.1563 1.79883 cv
40.2593 1.84375 40.3262 1.79883 40.3604 1.71973 cv
40.8936 .676758 li
40.9282 .59668 40.9282 .517578 40.8252 .483887 cv
39.9985 .120605 39.5225 .0424805 38.4224 .0424805 cv
36.7354 .0424805 35.7363 1.02783 35.7363 2.35352 cv
35.7363 3.56592 36.3496 4.31348 37.7666 4.91553 cv
38.8643 5.40283 39.0913 5.63965 39.0913 6.10449 cv
39.0913 6.60352 38.6846 6.89746 38.0034 6.89746 cv
37.2212 6.89746 36.8242 6.73975 36.3496 6.5249 cv
36.2583 6.49072 36.1904 6.5249 36.1563 6.60352 cv
35.6465 7.77051 li
35.6235 7.81543 35.6465 7.86182 35.7144 7.90771 cv
48.2603 8.30371 mo
48.3613 8.30371 48.4072 8.25879 48.4072 8.15674 cv
48.4072 1.6626 li
48.4072 1.60547 48.4302 1.57178 48.4863 1.57178 cv
50.4136 1.57178 li
50.5044 1.57178 50.5493 1.52686 50.5493 1.4248 cv
50.5493 .268555 li
50.5493 .166504 50.5044 .120605 50.4136 .120605 cv
44.6333 .120605 li
44.5313 .120605 44.4863 .166504 44.4863 .268555 cv
44.4863 1.4248 li
44.4863 1.52686 44.5313 1.57178 44.6333 1.57178 cv
46.5264 1.57178 li
46.5825 1.57178 46.6162 1.60547 46.6162 1.6626 cv
46.6162 8.15674 li
46.6162 8.25879 46.6626 8.30371 46.7412 8.30371 cv
48.2603 8.30371 li
cp
60.5898 .268555 mo
60.5898 .166504 60.5449 .120605 60.4658 .120605 cv
58.9355 .120605 li
58.8452 .120605 58.7993 .166504 58.7993 .268555 cv
58.7993 5.73047 li
58.7993 6.53564 58.3574 6.93262 57.4634 6.93262 cv
56.5786 6.93262 56.1362 6.53564 56.1362 5.73047 cv
56.1362 .268555 li
56.1362 .166504 56.0903 .120605 56.0112 .120605 cv
54.4932 .120605 li
54.3906 .120605 54.3452 .166504 54.3452 .268555 cv
54.3452 5.77686 li
54.3452 7.37451 55.2412 8.38379 57.4634 8.38379 cv
59.6953 8.38379 60.5898 7.37451 60.5898 5.77686 cv
60.5898 .268555 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 14.0%%AI8_CreatorVersion: 14.0.0%%For: (Juraj Blako) ()%%Title: (STU-FIIT-nfv.eps)%%CreationDate: 9.10.2012 16:41%%Canvassize: 16383%AI9_DataStream%Gb!Q;Bk-]pcKP3/r!-n.fc^Y`V3Eja6<dWdHV7L>8m*+kS9a87qqJ<@3,q7t_K,(gH[B@L+Ef#7Q=NRqCo9'R>>>"4ko`4f=3Ago%k^QjU*bT=bB4Z<@/2S)n;'qfds$e2p0W5lo%p41K#tC\+(q`e;oi;`7\u^grT!2<2B&f;h8D+B#3`CBSh!'f7cJ3!<bn%hr58,E8%V4D1L%"--:mJL]Ymbb)m>sV0;_m)1K*,Zu<X[QkF!''I0IXF0CNE:P%%Y+obb6]S'^k-eMI;]D7-"o/$%=;!_I]h*N9%fV?da#Z.%Jt1ZA?X>YFY`8t<p"<L45POKW0GlF.@V7]k:#A*3F2ZaZdLetL1^(T`\6q97NnP.OO9m::>cB/Gk2X`b5ZEZJ5rKcWfHY3o@?XRU%Ds7]r&QCh'%^WtS(Zt&b/t<2:&kpdrM+Xt)3C%::M-j+n/c7I?r_D.M42'Tp3Epl@Ram0V9^S@[C^g=QaN$ao%"gcaao,s*Looo\%M$]HZ9]B-WB743YZ?,U6r4"PEH40d%T=@4o,7]AQi0N&@"_j7--O9o1S@-Wa5u\ENc@otRp4-<dLrC%D0^NV?5s:,mb!VIe13#Al%6\l;K-"Yj_q8<O]3!bIN!F4Zd!tMgULP+PB'o4Y^1`-NHU@pj*"3d'iZ5dJ@Z8h2$HkPW/$2f?8(/.R):Qkb<*WTY#Qbl_e&RaD2%[/pU*j19dR1qs&E:HLp/8X<$%_>#<Aj77`"VT$id"/lop-L;K+?hXDi-"L?er.W&X1DYV8aX$d8'ZeaB)#bHa_pWK@QA3;ePiq#[%poRX,er%H)Y?24aMT&u*=H)DLb[_@;8L@l:,l!"1-^1c81'qa4Dt"Fk.MQ9m634f'.);!4!S64T=N^6?(jqh9@6)ZoGArI[HZ=Bd%7U-;X,irI-2W,sa"oAEe@4g+ZdSjBTHNZQA*S;V3$2[FFJ_u00JtMNKlk0/KO>*4ZACr.%$2Y23Khl-L+APU)N$$W&rIUZG%aW%*%A:.e.0o[n&0pUZEIM;Gq[iW"![gci&/LP$rC>_<Y$hb*[6:c>(ENa@"*\mFCX9JJk7Mo&-^C0oD5N+9J4$<N3'=SrFJY0.^llZ/D%UPQG`dhUnu(^U_gQ4s6@@tr`nW=E]P\e2O3T&\D>QK*-s]GNCA03j/-_)efEKJR'*i7kcn\.nWII_o9U^L@-r:%5da'@q`JZT/>)%'A:3d_\b(O'-8L56F[K5*-2JL"X4an9JP@ClS-jD?;*<1E\\i7Dn,2=(;Z$)j7dORrkg>.P)6^eO#a'HL;9QKbeK%Bj*,<7,-?`5%&NVARO1CbL]u#9gD2!b$Uar36W2tp[C_<?dHs<9KBe*mN_2I:32d)G4J+-gH'j9d^j)BkG0E-T&)Z3P5`IBdY1l@nRs5Le<*<0(=%`IE^IrgcRkg^33uQbt,l^\BISa1mmhnXn'//E/&"^\G!3_S;@cnK0"U@=8X+%Y!DW`P9MJr%I7U(F_bHM'u;5,Io(,A,mq/#ZH\e%pj41dJ!#n-NWm26G<kCt!kuo,\2^+:(GWR-!nQDk*;h_sl>p2M4QGOA`Gc;p01)&am2W&>"ZQL*V?F-mpie]PJ)anH"K]i^;=-@@%%5HS,!"8Q4Zp;KeJ+F!2.DjCY8D@MY_9[^QKl'@K,lFU%;ZEMrQOnM&_0s>*7:c`d`XR9KH5hXD\TkcCCJ/nsl"LH6bU&uDdXIZA%&W,Yk]?slB_,LNEP2TLe$GL$&i4g[qaqBebW$d+1YU8]_lkcN&X:ktO)T*3;q`+SWDASN`gbSL3TMW9,9->QqKHZp"rf44I'^C7Y%Mbqh%9SccMDq'!ZWd$7)"T@NQLf%9Q\)8Z$W)@!<Y8iT`Mt@PSS#/$<&?,\7+3qc:M's:m3#pI:KMWQ7S5:!J4%X**01Its+/tT"%W5$7Mi^MMgDun.9_DR]6!S?fjY$k=8_o%d1Tu8+7Q8q,QEP050R)9Z!8&%[#2LZUD<Jj"^8Q\1sUEpWI%dN*lQ;Gp<:_+D+Uc1lp%:=O(M%J;!%7KZ0hjs^!0W</\WDNQ?a',cP[73jE"_)qd5Usq`k.)/J9K$]]W&:-_#a<dYPN75?>_LUDSQg'(9,;#N1ob$@2.@780%4:A\9fI'Oj'8Ycoq?VS'DsP=(i_Zhp4t/?HGbUQiOZk5R&O<+BjOr[[GQdRc(lrWpZji$VdOLE-/%SBI0B>!L<U+94f7i**0$JAB%MN6g#p1TEI%EsNZo/G&,i0O7nq,>k+H5aB9L'^)]1*E8:,'u>E;;u>Zlh:_V1DhhN6'!1,0+iYf3Y>2M=*Pb-:_LVk]H&Z!R0`PB%kN)X#D`kB@9L#d_KQ'cV3NO+n,$U;GTeR`RPbVkQ1l%e\<$Ml%K^82$/Z"tbas.J8;?A^$_1VD,OTSKcH'<tlF(5)AYUfJSG0JWU%!E1(5.?\TjpD`F=ckaQLn2^:S,mW"]L8"NQfn?ISF!$]EN[8q+DU1lm):md[A;1:LN?R1>UliL*dTd@nUN]7EAaJIaGoA>uhS>G@%Q:SANJ%uOE&h)-]ek6Vc:8VP'iC<9&I71o5.4j./W'@(1V@T(^&Zm;t"4eT>i&C44iW<9Wn7WR_ZAp46nefc%Up[!'"Kqk?ni:Pa%d59bpM248Ent[@j2%[YM`[;%>Uu,/M^mYnrJPYMB+<"C_R8E#Q<%C6o9Tj?ddW$?_>Vm,aC)[2^!KR;6-cq-3)2Zsa?R0EjV!)/`%T@a:"4%[3^"Q="k2FWr8Q6n^-&I>2!\3FY;np!PF[pWs&Fs[nu:hE@HhBW_'5-^%Y9K=B?TMC[";7*,+L@cLH\&A0./lI1cH+"t_%OkKqPNdCqT)='?opV"Z=ptmL,'-s,8\-DsTF/ksUPYVHq:7g;#1V+?na.t)gV(C5[k("F_*RG^jE(b'XY"&GS\V+%!&.+W/@$)mG%*[WoV99A^MZF(ur_,<U>#"pp#b!?JkT+]6m1*U]_BFWDQ$MVZTWp!RH/Y4=PM7&DG*>/^,_NbJ!M<mf=0?X?C)mpiME/1\,&6W!)%2l_oi?fF@ZGZ^jV$-#eU%7'5^>-D=984l]si>A_5&ZE=`gTiZWUHgpk8bZ-Z'%_mYXL&0(Z63pS(39kc&+R/mB+f+_BSnaDBMkSW%G\(,W5NT?#4q$mqn<bE5-I2lQ7)^fZ.)mX!;DP,jX-%43?GZtnN/S,\8+onJ*d%l7M+0*`k&7h\Ut%k"na)[-m7i:Ue8H#qPXJ@i%Tq[=I/gkS<B+32uJraj`[e(:$$K!4[W+J4[IEa&PI[>H&,j&C,LD?qIH&9m/-f\'q.eCA2hdN-JdYYJ`MFYc7'RbnQ<^ko-\KiQW%mE-8UHD;?%/o+]5g,0]pBe>P^ir<D7SD]7KLMLS20WgllO%OkRZ7(Q"bU[i`YC`93<fbh7<,6[2`h^")X])4-'tG`tZ=oYYc\SsF%ScYpFALZREY:+^\=BVq/n;?o^RYc:K`/@%;N@2"ac\f$XP$+0rK#A;?hCPNg(W#R_,H$Q-8?F9"XnIA^hBQ27[fZ06U9t9W\2^b]%0H<NMGY0d=]Vf]Vl&e:oLm*a+Lq*+_6K*,D$HOTh\X.![[C-b&.s;9LM?Gi23oP#*>$R[r:Yg2q>DORp4DCba\<nJ(oLqP-&Z2!`%.n,Y1kZFUZBo_RUA]/Nu@7q?,;'7(N$R[,41nODtkaICj#<bm99)EPLVdf1)MbBpeQp?2SP]mg'#JF9'Ap`Nu8S&6P;GM>(p'Ims%=?QeR@T*?3(Ae;6P`.8];"Op<][3.fo63/H[32Z3]PP,U[[,JKPW`^F.A;^mYLG(_<Tt'O;^jjuq997IfM9C%<j3.8WG?:W*-n^^%3_B^()gf<;@O';2q1H$_Ij_Q>0#sE;bh,$h@4Bckng9m_8P`n]Q_Rs<]YRJ;MCUkPSkhmo7E1S#P.:m>3,+XoCT?_VX;u!-Qg#/^%1pGDKofPjR"8GkoF;1=W#sATBXK.V0.oBt/^;)0BN^f]fcNkh#1.a_#gK=1u1U*UIPY]7f_"]Ue.@Q@B&J16@,:$*j:/]d!4L%!S%]bKcFekia:\jm98,KCOu?I=4t*(Q:(Q"UV3#POXIZI1W@C$@Yn8C*R10rHPnULX["#k&Ei9P0h8't&jaPhA^Ws6uKjUEFr=1g#TJ%7=(gU&r#5`3`+7+PV#.67$"hJ2HM*),^u6V4"c:D#$P(PFMbCa7M3h9U32=UNqnaoQ6X3l_NRBJ8aK2t:[uX8[m3)LlPu<GPGB5i%$mNs:MR<[KWMJ/Ob"SRc:EBONr`8A3Jm%WV#Rm3O=do'CIM2R\0UojP5mt!IUb9s4ZN2\B^S?sHY[#HC-5uNgI5:u5LJt^F`HHl+%'(,O?"cCI^Cc/ttIa)]s>^t<>lqJ)[2&b+c]0AW#l*7js#KjNqC:Ft0S`/@6$A]dJ7)=lk_9;$iq02Gb7H&#/:6aB#e'dkA@6C#X%@-&c,C#ApB&a,WLf>jFr8$o&S1?@0Y02U't1f@^3cR](`/ALTJYqYPuA=3.i)BO@9).''CG9Vn;]XV-mgRGP&=9bfYP+bO0d8O0I%^B6tH]eI-j@KNZAOt(-"ji$81*>VK+(]u2aDh_T^N5rhefU74"H[5s>b%48VC`CCj1[33)_o5%&-gF::,;+bbZ-`9P=:,]tBTO->%_eC2H,#UHoCM/hkgqINAI!=]SK":gA;9ah(0\Q_gO]Hm]J@SEKiY&c#Eqs?!/8V$FFS>GCrNN1bkGC%#NmLL5,1uk&:h)JQK3h*F%N;_<s2DU;/A1Js9J,07r>_+Omi6gHUM#H',qTdaji9A]RWqY#PKs9]"Ze7]2nUZ0IQs[\Yc>(">[t(&9kjRWQ<%U%`2/!CB%A9Oa%R#TUtGK']G37Nb1f4MD[(,fl8>MG0Bn(A,Xn`!l6D"Q"Z:qN<cRm\rK1X\.2S0mf1O&:U:=Gg[/&a"QKk5Ru5!?fWS"5m']adumV%&%"^b2]-o:CY49Hl\L&[n#,L*c)`S^(7s48s-enETJuqYU,_MBQ3*G\r30p2'Kc>55TBbf<NGjW*;;m1MX,6Tcm>?D>RE]]J"WNd%V=)gsUA\.`>ath/C&mJ5g/1lKX#"(E](#O4T\^AR,-E9#A>/km^Q^cEaU&^g1S48/6Ji,]859,6[U7i68p=YpoF3JZ0VND]-T:^[%Y'lu%hie\S.4$P<J(X"G"Y5PHEE)rs$$tkibG#KIreEKPG-AAY/8(1HX=!i-pb9,>5U-NZGsK<LZK"/%(SEA[78<UX5tVr#J,^>2%`rBI%=H&$Ks6[BWRLHJq/85XN$_=PB=20IJi7j-.aYj+)3gaL3?nrU\D!KX0_uB5]9"1URs63kK/C4isqI??hJ,Tg:K2Po4FQQqr%eB39R1\OXo2DaSeGI@YJ5Y_#Wi\X4W]iopK^L6J"9!9sRM*1lN.f[O:IkX=iVjf@PQCU4DL%]@REmJnKpSHf#(%.eGUR0Y)O9m\l%S"nab^D`/)5iY-A(I4KUWV"'n[Ep"u-?^[C)2>t2dpWc[,!^18/8LS^,%q"q/nOV]U:i/d$XmaNI'cuiAp.Z6j=ZYiNk"H$3b%"'%K1XL7f%u[=)s&8K_RM(.(Q!4V&E-$:+l0SfVSE5(Xd8Y]??*3&Iio)/Zja_[!Auo2!OPfkNig6/;2/aF#kqM)I,"*OMkqO+s,Fm2%'H-E[@7Kq0m:nWdD)HfuURJn244D0]".6.`#;ge[[kEL9[S".`a@oHA,PC+@@9'[%C`r^'fUKamQM+4+\En<mj5KQi9P=an3\T#E%e%r%?&FB)CS.),mo7ph/ORl4Sb7g)b@\d_e@Qn"2C3@P6"Z7j03W8b-.+(S3!kKi'ns-hok>oco4CZ/Gf-KbTc5]Bk@Q7MM43AtW%L*TaI"!3D_'890ko_'qHD$k6G\2.W-K/h!#cB'^Sn,t'MPL!08@s5io?^%K<RR$/"N"0<Y=rIbr_K'G6ckJOi^H.:-ggtf9)>faO%rGsa\ZbHW_%YLeio+u`5i>`C1\t8p']JKU&>HH!lr<<i%nSfu1Q[l?BeQaZEfn`>#/48qK?!B^L)Ycth/HK@*46+Vn-`^:`CqZ7h%(]*IQBFiqCQE"D[k(i1pTnRnS7=C^YcjG\fb,'23B*W6cU0hWWU:LM!dXjm8H^^`[NJ/mL`D1mgAIgEY@MPb;5]K6jnLL"(6P#P\%H(%PZ"c$mFi!@+U22D5]""f,L,[g#9HG_3AE+K\,XOY"LpnU4I$/KH'c(s63_W'jM.D(.j#bQhcRkQ[kMa8><;X5'7SN^@e+V%qF%ZqahdnpqDccDVNG!4n**(Ecc9hYgq;MEjailP>*GIDn`coMG0:/MXCr2ai]hW"POFV8et5m:Y!M[r!/D=:@s?gL^m.qn\[[#b!YX%Wq.%'KCiq2HC_<+?u<">QV#@tV>7Xqa-]eES_eHs7T*&q$"e'ap#pGX?nr'Ai9K-Q3l$9?/3*Sh4YS6$2u.7#%/.`A+jmEu=ER3=%_KqRb_6NKr0K,&f7Bek,U1r'27;s^b3m(-5:oQCC0%!:P8Y%RD-\`+FZMqXlHAh5e?P!B0Qg*(QZeAA\BN5pUlX07VC6$c<!N6+`%BB+`!$F>"r[\:RTV!FsGJ$k:9Tm>I!JAo5.aK_3-/1C^$]/,uj@o8YJenT'M_S$8P38B3*n/qLMrjI3Hj5TbkpLWC9c>p0\4M[dQ%L5EQgbZb:ec,JAfOGFaONtN9I_GKt+ke.C:Y\3"$J7^"UN4K4CYoJsa"dq/uBSi\W26";F<`\(FpE9^\;p1/hpFQKf_^E48-B.*$%+Zp&?.#Y:*[@0a_]qY&,Gth/(b7]cJ,g1=Mgh>^f3rAbW#g5rm^,=HlBF<qA^9AFaVO_j"<*KqDD-)T6R6a4U.2FhDf3*3Nb=T`B%pV<f=Ni94`N$`S<LOm"AKYF*N;diDR@dh1op8%].NMaaa#jo:ML'E0c?U1$.cbt=6>tf)ej;u[P%.";I`c5Y*g$XseRFhj[hA)o,%Ois0riJAJ0O><D.h>r8;*%ke4#]fd-.BEl0)Hu6;]269,F!)[El'KLSKW9mYeu)53#^">'*H>LS>fEE<njI0t$^G9L@A0j&13kh/%VA2PDYW=gl;;GspQ/u%NW(XPP6>a<a]#L,;O/mt2SFuIBVhlC'95uS5c),+4NpO(Ye0,3@[K*b&YZ)QB9&N6MPDED-KH*CnRKG(_%$ef#kG:>fg,C</5EQFF$?l#^e??ZIfes#0=0,DQpOa2OG5J>12ObjuU.aF@;!ZbK4;*u0HacYk3kTK1[(9iR2+g`A/8M9R3bQ',c%fmJXO!U;)VeZ<Q$`C3a:+d=&]s#em]>[AbO70.-_=;\TY4am""+4"5*SL=G;q"-J+c\gi+GA8gS>k&<=gJo)6Jr>gpX&=fqVm<FF%juROFWkGsGZf7u$k=aTQ_T>7k`sf:&rY,Tdjs5<I&bK\arqRbMW,a&N1OE/DLnrJL1-__me["FqcmT=K1VI6OkSgOrWqDtb^3Gca%VW'8jAb"qH+*e1fF-BaDOh5E\^O;O&nVSth:*0!kA(RL#=o;a3]"5[PilSD!_qjW_Y#u#o(aGmCV;AQC&c\Fs/V4XCdI1?1mW/?N%k![/I5MNZJin+';4?q,OT2K%lmq(H>rkb\VnTe=)Z*iJ*qSMo]iIE7.$6On])>JCO>J0<03q@j?cUk8O31f+f4E^KNRksm#p@V%k%kaf?T*GM.BF3a9S07W$^oOSE5(1.VRhTWmfnb61if,;DC6XT)Yp5Lf59W/U@LF8^niQ"q_5B^AC!i#.#Q)cc;Ipr4;fs@_tGkU1N%_g=:#mC=RXoBW_ZI.DGEN5n;DYAd8'?*_1AMNo@YMH>]@5dn0qLd-W^IVMsjFhmdXfB;RP?c\;goa1'&F3U+)>c*Q(9E&ID!QO6l%20PLH(M4c'oL&X9`H@7!&_P=W#s+<-H&ppG]Z)"&G>h&19Rc&Z"XMZHkgp[FrV3r@lD.4$L[RZb=CSMm"$o4QCegjSF;[C%I2P4#%I7lejWjmAk?i%^V\7b4BYjN1bb@F4oY';Z\Qf'utVpG3(2]l]YjTYg3\+utU"]WWOaUNJr)Sir1mpRLcJt>COq-k;*\gT*^,-dKe%:G:<NrqM@XU$?QqdrCr>A)5^AZL3*Tj_bJ%HL\$jr6>5TVZo%l54[KF@q*0jqCe['l[-]CSoV;fn`R/_)#hH?B3u>8J1l:q=[9dH%B0:Y#T.0OJNSd;bG?aZ>q4aco`O$eA`k2gOIlS%rq(<^L^UQY!=JD!BCG(Zgc)]r@]k\P/;KO#`nK^.$W!8?RgVVD$/A:\H"7@sn%;.TI2C`'EBqD6A4!I&ee^AKPXTcGX@Aa+al"+`Jqid7ps<!%KAl#]oUkLrugig@)kIeLmq^T,*iPA\*RSs,3lDMX`$Z.48#i8(;P%:Z4BY5:ZJD6!iML+99_DW*pU@531'A&?<i$kh<;>0_d7Pib,sUI4kN94_i$1?5Yu+?ltY,!Im&-2^HM-:bC=i\`S%l#;f+$=j5Kh%7s_:+25to`kP,i)RM*Y[jiI*Uk:Gr3V`m<)MpW?dQRRCgCegg6TNAf[^/U'2o<H*u"&_*E[dr?H8;j1f\MsPplqd34l,,((r-g[-%+K@UC^qAa#h/N:++T@hAs8$nifA9<p0jj;eCJ.Inb>jCMf$;"7(+_U2<JUte#cd@<0V9AU5=#JQ=mSVl+*0#HDkX=XR_*LPNY=Y;%5T4>nAKh+VPk*KBPKo6Eo-'_YZYiCE^YF/t1ekbj67H]9l)mYHoA<&LVU:V0:3J;N"400(Yu[IkoUT8?^4=5k*Co_fCAaN9HsRP`%dU_c%S$!HWTZZF"ciUW(4SuF!k8LC56n(QiJK=n(-<[U?3lRj_b@g$!I;rJY`oGUp0lsaMbq`;nU]`mXH)AaXF84M?o6CsrHcgkO%SLj_u*TYTe!"3)=,J@3%%gqC:+7RO=XQ+N#[g<*E#6UIeT\dXNq"@Y)<M[cYN(%V*X@0rl==-Hg#cdFc)cre`;/-PX&o8P>!nmXZ%i,0`pYYh!>"$`!"TjAlnn80b6j<eZ)f$Y1J!'Jbtf*gm2X6"1:<,,]hO4P@G8qc("OX3t#hbbZ7oR(Z7&1AV\KsC]:HD'ncG2%Sp%%"jLmF-I!95XVC5Y8KYS'fg4rjX91,`&SD#H5d:h@V&),&+DLZ;(>TEKPU\0`IK[:f]'kIUO/iAauZe(!Q:^&/DO;p#so-%c`j]-%;%[_CI?k-e;bYq]n;`/t#,,oD-)A&_Y8J'Q#S//.arkt,7S>nER!'#bXpukR-Rt9E_UkF\cqK<nrSV[HjkGrE,JP@a5N/ao4=1TO%ndZGQ6")-!6pi/@(JtT41;rR:h3)]T6a.N>Vlhtdl0$;K+0&7'lOoZ%df8=j#pYk-K"5nuj$0`>;nU!e"LApiFAiK$gBUK(j\d(0%+-0WY_XO=k/bMTJVg'\db_bPhDX>ZqAr#ge\MM#;;`ch7TuB=5F+I'#qPE@LRH%9'(3?!oE4M0dn(%A0Z!.+NdiHT?L"uX6GaiPt%Lg=E)NjBC"NQ$[#LXZbhDPmT/r(L<53qBob-hLhRlM6pCI*Bn?.)1nhG6^RQ>H0*['ss4.<_8!!Oqm\V\><Fhg5#a3.J.J@@t+-*%c*K8-:D*)"?l$>fJ'5ZO!D<`$ld;&IS.c:5$+,rjFA=Bs-Bcn,F(bPs%D0h6htLWVGUSDg:om2tcuP-lqrm8oO3C^[:(!s"^H;nb%8/$KQnlDjS@kN;Ie'6c]?bQ7skPGm[_ou,KNU+rJp-fPIB4BD!na\'a;9/r($V376r4-Mfr\1K4F188$@!<`aQoUFd(c`=uSs`^)%.gnU&5E61ZOnB5\E[:AYH:*D@@X7#KJ9]nH@8N^(^A4,Wq,')=oUSEge6m%r:.j5o2,$$^(h\9TmD1I1]>(l;Z7SREnl2)b!>'#\%g#2LD0;IREpR<B2)Vf4od=2[YmKS7/k==,fi/#mt,-l`pTO[JR+*$HRV*JX9-In`I))t;k.N^[:kL69:TF<-lJ%U,hq9j?gUlodG%-OJ""rfb]E,2TA+jmVKf3p1d[gdhl[4Zd_/2iS(+CQj@jT<L`DfdRRVXh&YP2@khkMd&Ks@$[TdKDX#_D,-KFq5bun[j%g;`s[RY%N4CqFK\g!cq+;DT.G2-$HmKk;jVcY,=u]JknG88?SlGl55r8'N*9N>9<q9nBUT4ajp%Tas>s/8h`o!D?g$,*kgE+BoltJGKmX@j9%O*A=ee@2V9"I!3`#OsgNS_!o[PsFk3oR:6j>NZhn.>)EYnuDh(9mX?PmM*or0FkE\I`"e)d9M!sL-Xu,Y2JZI0O,#r0WG\/"nk=J%\"J:c_98alhDrBq9r'_lQ4)4tWfgg)NZ0,<T',r*=++]XGSnc-2uR38P4TFMEutEIrIQI6.`Zch$HsKX+:\P4kh5!A1aRO@$5/mZ%oh^)W]Oq8l`Y=g]2CHLhdn79>g)nUAd.i/:qj[V)b;7_Yb]c><`_N%S'$3d+k6su=d*#7&_]Xs;ML9V^^9.oqV%eElSi>/?2m+#o%LJ'tuj0m\H[`KCd3+&7Tcc<][,4=M4:k+N4C^Wet_oLI&7I.=*3>oQnUCU/:gmto<aPAe'4HL@lq)t;kZ$h`m<UbZ^*\(L1f"BA^%\49PLG"t!g)P:]7Si$69n`b,b$d^Cg:7V*;=)O'<))nkf,>2M(*!)X%*h@_M1qn*o7_g9q^F8ojYqLELK4?cWk<H6_-d/?F\H[e5%i.rt#4Ri.:d:P)*.WRP:bL^c<![5mn-pi:ZoC\@e]'c_P8a"Fi`TN+[YA:.a;4l*Yp-*hO1TU0+NSjBRDDbG>KFcB7`R.RBK<o".%5C6giArO%+7[/BU:R5<'XS5(=bSh9<0>Lh5rJ_8SMqCt=E)V"kd-udsH6G=UJ_BsJ%gG&k93I#_-mf5@q`)&Fd/o-L(^,D;<b&CU%rjS%CNb_M2#aP\bj4I6,C4+;6_kWDD@-ksODOS,+l1#<)(W^^-Zedfir=rd_\#E7_H^:;QQFGALZo]cBOt3JpZaojXs/,RVr!\is%K]T1fT#i)%eHGLCa)c.lIHq%N;_s>J/tnnU9&i44/hSS*adgDgH45rVj\!d&4F*"3`cgn<D?4?[X=C$s<fZuBmX;keZ@i%saZ4^9%985nrr@0hr:\LK-g#:E!-.Np,M3!_'WCLBY:!CR7MG(*^.<-C^)CrTlol$lo`Fb\[9"I.!T(k)2EWsZ?^Fs6Gnj%n[U+@m(R/RS7%a3SJniN'M`?tWqMX((S4+3:<sIR]QA%R->d,CWgXQ<n*ArQT=>0_uG:ql.[*)Mc%\O&&)W+[VBfEk<f%4r0'N^WVtlSeG`EnDa%X%IWCp7Y4Kim&X^:%0@3TXA)0Dr7@_.mCPI^R9bB@3bh%N2^rs^oBA(BgW`ele@p/_uM*W/:9nHMhi.5Z*:OM-e,-6T]jM*t?+:\LY%fYlcFSplD&(EIo?b8I2X9T3Kja'a6)0+/Za)=P<+5=4Q(%I/bIU6,A)Y/8>Z3.PP)-gYu&&lJ2c&QhK`TA2#f%g+cf@['T"k/Xh[%&i0f@l\?l<1(4+T/CTK@Em[/F%Oqg/*=Jm#)Z%9k:#.hoLp'NG^$$/<%KnpU`,au!NGBSo_/haubC-qoYlMpJ'1O,"^j9GoWG>iX%bbWK^LF#MlYrs-E,K?(&n&uCMEH@RY\-r9G0\%OLl91'Q@^\&l-'eEbB[F^P,F+n-A$g2'=VngDX-Y>o3agNac]@,>'BDbV$^i`Z%\.JD;TY@p3"hrEZgf$6:EF&)gq=/_/WH$i2*i#V"DQ1gT?*jbg6&acSgpeTE<Jb4q=Ms4fB=2<uJ,@tJQI9Fm\!imq&=1dCmjRl>%4;ipqQP0$-Xg.D#\Z[/Hq<Vm;H4&I$T9s'qku[r;5\$.4BWqLQ':\"JZ/iN>q#CF[!bV*\f0BbF-NGqEeAH*Db.&P"kqVY#D/_)2%L9]N"&cOB;P`hYP6LeV&01eSm!c87UFRHm74@9Y@-8[h[V'Ub[<8uZm:^lR/fJjh")O,9!nmVol^&u%F.e$8B>Ed$oO?/q_52U^#%baI>pZ6Gu;^?>l<D7Re8](5q[,p7p=En@8j>AqNOIB<WLX*SF8@Yf=t?5Q.*@roY=fjk3;gC9b#%KM\O<mCVUrf&)!(XW9[!S;jM%*][VhUp"hKIhn!d^cSBt+Qb6J<_)O^+qQkg#%:3C?=5g_$MhcAhiBq-hB*C#MaF90rRsJf*nF1HI2Dl2<ibI0H*LKK)R.9Wc=n_S%p>,j_BDg&qE;n`9d./h70^!o0F8+_YUIki:T!AaMdo!Ar'aAK(S=f*r<3g7GIu-,=X/X>MC)5*QK4sU"m9dO9A!p\B$$\bm?Tua/%,]8k>PH:4/:6P8%6?4R@VnVb=r2>GF%Y0;H(ZLGR/.J]Nq8l,l$#ZX:rE_;!FhIDF35@Gq:G5LB0J:P]'$\<oDEbW^rptR2%<l$d%ODbi#qO8'R&G0?dn>%Tt)IK2R,8g3A4#cO:(:%gV62]XfBF^j3=K'#!!9<`^"UOni"D[=AV3GF1Hd"?OnYSXbj='n("$N8=W^<#5%b+F`&MOH>Z*0\+);__-;XLp(>/:*)F?J>Eac0#`=9*k!.#l9-`<AoYl-r1%;ZLCK%R*,/D\((gj/fd&A3cM)Gh&V'g6$PQY4O/D+%pDPO[3;HHm2Cs8=ICFaD#s@NQs,=@'?[j=1;rcaD@Ip)PfrW\]H(t+MO(T<%?JbLN-a&Fuhgp(QRWedU5'\R\SeHa(j=qXI7Xt3l%+68m0KfA^0m9H.`hq/C.X#-ls-U[Eq"*s..7d%bbiU\eCBJLRgeq5tq@K[m&=8:)7"3&H'iDDDm1Ygg@1%2:-iApQ'(]THZ^FB^7%P;U5hqOc/5[onS<RSee7"W@l94pkDU#g#^P`DiLk*+o'4QqOI/q>BdGVAG7Rs65!qTJ4"nY8go.dQ@TCrGd"+>IffkSm#FH(P.oH%7)3Q#[^]cN@.]#<k5bkFkZE6aFo6,kCJcqAp6De/8K`.>5EMT$U=@@c!3"K5r$9rF]q-JSO2+6i/ZZ[sI./B4r9c.F)uh91n$uBc%HRkhLGEalr=6KP0[2O@ZYDph7_Y%ZV*6uSk:<IP+C`$+amS&d2;:;+T7NQ&=X!qtEg``F&DBjoC&06prWLrd52Pt[&K%QJ$9X57p%rTdsWg`fj90cJ?Lj3H.bY9^1r$@l.b!VSgdL:3j(^4d7\ncmW'onH-oq!aMEC-*b8o*-0Ac%n-08X>YI9<Xs!>.r"d8TspkGe?@)%\n<3\0aGBBFQPR1Hq;o0rCYVGmu\1qe_P[k1%jFs2]L522[ge(59pLu8t[l-p/1+jARCfWLL3D)Sft;3]BTc;gG%C`?([+3,\M'H%j8]3G>/s3,k(uJF?DO&up:Bn=jg594=4;9IS2]aOh\Lsi3-3muHdD8F&)4"u&\4!$Ud7#tmS'1gU#.'lg+CGPil0RRB^WWJii$RW%JuKL%>Ygl443LgjO$N7^[_nEgPd=cmB$EGd_=5-b,s*9E]/-(lGs.YBMR1'qpi*l=R#@6qcMjQeh+ceoI069s!^Sot&PMR/PQZ^*%E8'231hEr`LO/3&ePV@`i&ChdOP_n_YSg3LmTOD.Uk/0-X.MDGhcqaU@p:(PRVI]l]k<;PS@Y/U[H'3\Mj.L_+eZre8`aDceBcR*%c[Ri&jTqq^;JS2Vho;rXm/st/T:'GpGCdR=k4js_??S9BJKD,7)\A=mJmHM&[0(u8p;"QEpU;ia004SKW1BoY2?r++@IGc*@jP!*%SGEo+"-Q$5i):*OcYR0bK?:t?FLQeF%YPaQ)g$g5GgH\LaDV=)jB&70\G#"mK'3O7+Z^@6@iopo^k7P+o/W2Vn@Yu-otFl+/uM.&%N2_?DfVUpkX[)2a?OHYg_S2J!i/-S^b;AUC_mt$o&ujY#62Raf"uT<NXD@l`j7+aV![UQc:$Q,^c2'mf<i)gn>.h-*_RX/7?/EKe%Ckdt'V`(=ZHfKqhe]i$Tm8_\SR\gRpWnq[8*)sCLa^6mGas>N,ic&qo&P%m$%c^CP"I/cm?YRY1T:*Cn[,Ror3i>TBk34]s_l>s.%_A67P8c!(_m\\p_o*6s",kW6:RrdM("n]9s37+.0mkjY%c+iBM6Zc;:Cu^2NLW*4lJ^+'?F<?7Sh\Nd(FTHI'S):8<GM3ppM.sY3%0S"u-a,C$X(6i32\01ZjUhn<;<:4*i?NC-]i2ZmOpI`SE#W)EI2bVMaM13Hm(D#=5'CoH+Hl(\`0`8pZdW_[p>];'?6Nq,]Mrld%%r(<8FQ/hc5%U?*ZaJGEqr''iAn:W=TN^1[.Df[seR8M\s\Tpb-r80k<o_B5Dpf=AK_ghVaF9ItHNX;7@]+On<UYr\@/@`YVBO#Nk%\[_U^K_(%>,5)Y=]V(fV-j$9116o:EYW5-,F5G1;k;QJqC3#G.<76gnIeFD".#Djq9_!gdDXuu$o,d5B`MX?7nB%6)&FeNYI'o>=%GB&CiiEGdT:i*73D'=dLM^C^K^LTZn#4@5oZ:0@P5&_UMd4*O/AJ+'/"g%LE/CFNA@cbdt*N,jrBO$Fi?tbZN7hWRL5N$1"%,QFc%Wfb#Pn(2K%qFJg"O(dhL,H-Omj5d(LF)'&O87TPPfr:#hm;Rskeg]l/Xg;r.,;/(XOP633g4d_"*AB_srH<BicR""8Oln*HB=uj-%8<<OpbiV$Ehg985qTA<Pa.`U_fWhd>aQ8ABIPU$FQ^34;A_"q:bCQb\Z5\2>-1KYb-RL"=]3H9FL<l1G5!fU$Z!1+ekqh8YGOF`#%U@kUKC@F*$IU2FDUlj=K.t+4=6_r-"mEnftWc0^_gCZYFSIYoqq-In&MM628/opDh,GZ&>Z.\I79Y[dq,PT%i58EjQMQ9P(l#C(C%^?ZqRpgbhK+9blsUO(@5&C:!27\8KTrk3?UgX@BrETS6p*ZB>qD,-tp?elRk20S=!#2*45SiT3t@U;9M8A/g"^#QdBnZ:ah+H=]a%:2O?Rnbf_HoJtj\+H86nUBcaboJY]/4akF-[F\;U&#mga33)m/ihPPG(db8lHL2H&L.JYGFs1LKo[Ui9;SiJYKfl4UE&I,cm0ioi%0%*5dilhtuc!09ZYD3g,rlAl+H#PnmF:!=o4'jcKh0q[,ksLH$)'Wp_6fg$hC3/\4[E:VU_c[);(S6DCa3U8.d`79K<t?b,aUi=$%SQe8r&GRio]\bV1qFGOB#<u#'Zr\(.q_EDOOM^g)]s!X2n+=^-.F5BiIae-aDmLMT27FuIOM\[U&8gYZ&2PGJU>gF1@;6Wnk@e"!%$dFC8H@1];UqS^[\NN.JI&nZ3+I2oSF&C]D:[e7=KQNINC1`o5k5$E^OE.L_]:qb5'GlD&@u)t7+9bjm"]5XghMu).5aku[WPZ,I%&gP)/Qi%cm3cb/#$R:(,VQNnZosB*ZQ1HMV"eZ=,X25VkLt>CO!)e9B74Jd#4;-)l>u9A+8h9?m9d?ImMcQs7O?tM.YK*i)B_SnE%OYU\T^.Fn;4Y?+T!E*f04,^Z;[,l@`e,#p:"OP9:XkMNpDY^<m82HTN^84,p/&QNGojb[50ESoEiQRo.@B#iQWH>&C3.Jf^nhmj9%WdN.7<2N_X(#udlQ)LQZ*rX6%R:%g(EW*@":EA-Ca3pMEl11p%H$-dH0<I"u2J::tMlmK2A*ob%B&tcrXa\f!nV;X4C#\9/,r7"5%f:c<+3K_?;Y[/50D09/X)2$AEqk9+#b\Ba]MUh:S`tNH[2gDsoD\lm-2uV1j*<1*J$%);;DskH#r3L('Hj8\.5EkR\`#4e7IV44o%OO,Y/I]pf[3s#8^%`R;<Y;1=*^YSm;+Snp4[.D5,+8Os0&]KF$)h*'S/*ObH`Op]4IP-\'9:_,fr<Kglk!H7N'[PNX2J5!rkB=c6%i-IDM^V%8':LNFU&e]9QahmT9.dE>&5#Z@&1[Xs*V/$bIjl[\'p<hVlhTj>.l+-0Nc&n13,V(6,8:*(Vc[%m#c/O&P)=:Qd][\gh%i@j%P3rBL1^oqSKRh#1nB*H'#U&S87"KH<H$U'L/ppJ?AC]mqja<H!=k0S6[l2pD;dgA)sa@lA%b@lr(_t1#9=Em=^i9l9JH;crc%>j(d1jQrD\kUAK4*/<bYC4`"Im`GE`T(cs+&^Qq$dNe`9@#1'+o<DL%Up4Ff,u)9iD$@$Kl19Z:d]t*4N3lh*T4Og,BO+GJ':%V8%f]nG=/W\EbI]&;t)CI@en$;[%df/LqZ%<Zt3?,GF'XSb[6Z/CZ,E4fM)^@N*#E28)eS(*6@"8r9PJDD+)BnJb,)+TmR7S:i'j2f:%8>/2p1*Wo/6&McPF^Hdt25A=jJZXLMUMnRGgoU@<lJ3Kh)VI'JH$"E$YY\,#[7<ta>JNGGg@Fk#66j)"D84hlT.Oq7pOdAfB`D?^%_@Xl4&mrAd#;j0g9-4rY'u!!(+m;usr:dQ\ePCaBFM/HcG'EBGTV8>fB(#(G[8A0!4s0V:MGEqd/0jY!_H^!G#IN[%aEmGB4KK7:%+;D5Macr=F#LJEe]e'DnW64e^?W'>XXrP%R9kLQ&:+,mgbb/u5UmBiZ4Xg.^h/J&l+@Z$FWt'TM_O53$7JMtW(cQ3'Bp>JdE-ni3%I:.B\GR]8!YR7<;HnfQB[b=DsoPm\(j?!7O@&l/urn3f`&(*o1WMhb-b4pZD*h(]M`m9,dnI+uE+HNZ!&@D/TCJHGHj&^+l6!q&E%Q3jc#@qN21/[2iR/EY.Kqdbtu'Y]_Z7W[.>m@:[9>>a75mNI:JpSN=^@8;$9)6l#ukLi)MWh.XC@88&/H`pI52Wr*-paEDDpI/3h%&_8=;\U#_CA\(cBHFmIO[Kl&?5Q#c&K<B!s.mX]WWi*:bV:&l+[ID:@[C0)ee?]u=p"T"K;P.D9127(>FP8=C=#>u;HK@.U^!]uW%ci1J$Rb5t1!tA1T.gAul7M\?+T//esGcJ4&l!_`!hgQ/?jEU65K_\6N?]8U]4.0g\'IWcOJ/*[>(4bY%!`GqR_.L:69Ik=XUY;mT%\MKR5`5s$+Y%05PrfS@Q87TV6p"?&Y511BFBITnc'RiSV&-]=]Gb]>%bo6.Bk^2GRf<bp*EpD8LA_\r*In<u2GLE+-lW@TL+]5?f%AO_NeAk9_l/^[PL>#d^sBTL\L]YVOna_"NB@_]"qWmnCdF)F"PUVpnolUbIW60#QeF(2ubKf1h<H"8[3.daKKdK+aQa$reG9!WAX%":\'d8]eDB/lS6H21h;k3pYfRb#;<-E:Q3.qQ<T8]NmFn<FD<o%^U>Xf#/.S,G*f,PDW@a!/da5m@G"jCUC2m-:P?g7cX&8cN1H6%>(NDGg>4kkg5=nfYW^1R#0fFO[/,)b:baf1D9b!@>MiJ[BKblKUiK;jhH0O<(61.Vc!;F5jb6X,NT>q7:EAb=+/"U(>HUi$>b>+-%,8g&!ZVZm<Oh=d5-8QH6dh$=Ekr*+:(9l3uX_kT^9f@hkBaF6kJL0F*SYG[NmDsH73F:-u6en\),bHNm8:F?i[b\paFpJM.)OG]&%\%IFk0G"fRL)h-ial_BY;*-6-RE$_<qmehN!W`0\h:CIBm,(7smb42l2N'sV/eqU,;ER<Xaj[LYmX=WM*epYE5X&-*#!BYfa#]3-%nt/S;M`lBp^n8'[,?S2S'lcUM8+MfcZ(cRVCJLphch!u&^nDfZY>uFOm`j.U/$4=@77bX3$,B;"0lN&FrOs$j$(n#$TO<s^C`t'N%V:b6iPID'd!"a%Ki=2a]od?H6[:soAnAaOH&Jh-3S'rK,@C8I(.gn'mgP.+^pa#YSYt>j#Z61]8ELRf$;7m*0a!b8hk%%)&WZhme%;]9OJB%3]"<GP4-M/RH=0W([$8DP<T83::AiV"+l8Stbd<OA5se^Io.m>Gg=&Z4t++>6a^*4Q*CVsYP''X(U+)N>56[%(P4*O;)S%H;uccmA'aE<IdLohsElMo3e8/IB#*-AKc3UgW`*k/W9!Noi1*oqpbL%5d-atk&P)eF_XYU8pKgt#oJ%#B_oBM.V^hI"bDB/a:%,b%o6;bg`pBai$V6=i=*sKf)E!^-O':Su$qK\UDUBA69cV"&>65D$2f6d1d`L7ZflGrEr-]Snl4q1<-;i=i+I\E3;lr\!T,h[#!NdS^%-CgV/0<hQJMa#-rHq$TD;pup>.J)$NeFV!tNTSd=BW^YZRSe_@aMn6;g1$j`XgW,`lMr_IoHA:P`>'X(N8*5f.KC9YEO;q9\+DN2%%^P!G?DHc(/eFQO2-T<"CTe"=gMlC.b6Z9l#dKH80X>i%)R)$;d">@N*U;B-Z>D$J`<@7>N*!?bbNd(P$[]%J*Xj''lV$eV3;&N;%*.d!BblV;--s7hmL2-F-^A[I)XY>78INpc6h?F>BEo=:$@5c!M)KK&i#+_6BiU"5]!^Y5A"P6`32o7;8*(,opG;TC%gG8&,2Ac4d%fS+W0I,)cV=#&so0:E:CoD"u6[:'-#p"8E[&-0&r4rV_#.aJ.rgH4Oq!$`bZlp$CkDBI<TS])ZEZ0t[hUq(HJ=mT#3^=S!HF)HY@%Bf7f?$]0W&**mX_b_DRs&8hgK.s%D;ASpnZ:>:n=n"9776=m<q2btmW0FVe!d&mmHG>q"',aIL($g9-XYUD)*\jRnJ@$UrDJu&i?%75mXM9QdJ+@T02TOi5u%cm*kB.-G3CVa(r(Hu(N`1skf_\'o&\UbAO2P:_TWAmu,49M<]ddun-%fl1Ec/khclK:Qetrr06I0>.rH%/I30^`:HbLF5P((QF?nqorFWeW,^L*o`bJ%>%ZcR'XJEJ2HgtpO!Ndseb33G?j7rI+W)ufHj_n8mSK0n,%RBEAmo*]iK@ha.0cRb%%!Y^\%R0`*(AIc!gu8;4Bu%s&RNmn"[.Q3<CsKrZd$\OnX^qq.QpYMX6&3/*rH%2H1[*&g"h2UI1XD^mB++.!6YDuVB6,+@LX&#7%:6R9>Et4ad#+a"aQlJ0Y$p(c-irD)]k4MREdfFLQbVSJH.,7!HFQOH_P!-66LJGN+ff6lcY%MU@mX[=B"Np^]eKgn\DuEYjZuPuU%laDm.79P%cm]<O_DV,P94jj`%<8V:@\a^SFh.=7JCb%QKBA'BT2"OmE#4kt'U8Z]=9Rus5mN8`B2eUE=mpC$t]N?MlAhdq>PDh:>%2h]"@R^AYA#G\%u-I#]B2:$_DXAsUo[S*:I@Oh_MIA>%0+/QlVc/H@2]#d@pFj8EXQZq8%9QjA'K\S168EQ7e,K;"^9n1hclQpCA%G2$^]Lg"!a_O.Fjd]Vh(2["_qZPi8F^EkT,(+eCMQ@8$5)d_QglXW1_e6/?;-hAo"PgaDHSRK#dTY+]rkuK71;BDI\'ZSD34g2>\%:"a%1d+RQsTl3(fdP'o4&FHo82+e]5p?Q:@TtLefH!mgKF)tf[4?iA3$S:bQl^&')(t3i7Pb=:]C0G4pEFmKB'2r'f!Y62\]E_aa%3_SM"4P@(HIZ$>&WVK[!a'7WpD9RhkAd26FY6:p]4UbsP.j)d!.GFi$cRO9>ltqC,Z5(?;QU8.KUnlC]V3j=5)].*a3\<,qNBO_F%"#6`j9OO)Qh(W_\OtW``(.J9<Kk$MGfOXNm#3fH#S60`>Cf[(>[Eu(5ZY+5H"IFU%3o(#D9Z,<O>%mA))/02Ad&D%INmRXFLp>99%SDpt[p,A2QG_o;8p4gMYc;iLb%Pu;)@XdBpI+jE74-FqtFG"<ino@Z0/C#(fc1N6J51=Ac(2L&cZ'7oqjE.bhECQ2L#jc)_JL3CZ%L+Qq_b`GRm[oIE*:U>,q2DiQ+S[>FWC).p0G*Z6<;eDP.P;N*V0V*']Ll=oh_V<=EAf5dC+u5X2Vcu]L1MN$Gm#DJIC8$L*KMRd&%%6g>JLs-$,4kbCPg6IAJN4d0>_/5QEm1YUZh_i2M?2Jh?-R,>Pm]`:;[XCP5-X/;#]B]Z0HE>[Q;Kp=1gEn+S&Eeh%fsK5b@WDsO%:!=4t>MCHd?*,EAVsYOopPiB3QKQdcj<S'==S!O8<ZDPgKrZ7AW.V[Y[rYS5,?m`,483R+8PV(Vbc@&</o43'dqi;Daqics=1@!l%7bo)b<NH#ibk(+a3R0H[Gk2+OP[%jK8/9Ckf!aiEbf;?\[WV)`D8%5&:NX%)kBe6o*tIapfanqV4!/@,o>e;cLXY,aIHZ'g]lp>X%cA1/Y6hN_?E(DAF/V0D^iH.iu2;B:`CHe832\]Eo4)@*NcFK\]fR`YQ/=[>lJ:'=k>j*bf#L8+Rn\kp&F^QJ+f*+30^)1e65aM.4%C5s,h[OnWJM-Sd]Z((*hp.qlI9$$!eaGk/_Fp;/WiIu5-cLWrrOmOk+BAX\U$t\75f&$SE=eiAu"(L!_cB@O`MP8<n*_]uu:W-*:%TmZ`uI\t^_188ZQ[f$Y]!pma*EX_T-Tbs*PSp*^QeQCj^h?OV0kP7D="%I7R`6atIMW!hEL,9SeKR9;5KAdZNVsBtPA[ou'!`L0q%Zfs;')V!JTNNe1%9ahCngLs3K3Rh"tlJj$C;Vup6R#q`+*A/T0mIpSuWU*LS&/hI<UMIV)'PeSc!7"nsPKF]JFK3F%f''\@gLd6b%56dR"M=pW9+TX;X1j.PI7drg:PhWr"L+2kOJZopAP#C6Ip"2Q/iLi?BECZ)$P<5SW)3)gJ;rRG->?XdUgWm"X2&/l-##SV&7oJ;f%UC%6%KenUI=nL%Ur+SS7B[0C38UOESOP&thGca.&I'<_'@)<cf+.JlcBH_m7JZ0/(hnt350%>XbDn!6Lc:0Gi6^F$W9XZRh/AJS0%*KA$)EjMW7(--u(Np9:K;?Z1nh\rE9cG]?B(M(P#?GGL=(]L+j%5%1ZP5'%R5&V3,XNanhLTV\Va21iOGi<EpcY&la)#..7K:8qE%s7F>*3EP@ALi#Hmm\Spb%m%gM2]$Qg(/3@H.u>P)mJ,YN:5?#P.:AQCiUtkPg$Qm8lO;Xoa-pPkTkh%FON*=>V:tB-a_i%Qm,h_d%V!qQ)6_s3Lm=A+eQ:IKSVb)'47l^pU3X#pt2(^''-G.)%1<2j%FqKd,L><I!#oY"!phIBXJ/$k\kD\115E1i^g1JHE-S],,jh'Oh%"mO`hI*UL*FiOdP]a8t&WXjhTJK?>,>.f/\:[io=jI:7\h9('cZ;`J^?o7P\]P)(9TAEPm!^pC1[O`k+-g:/C6u.T.?BRro67nSl%\_jpY<boMQZ:7"B256h!%8PJPHd4LHC@$$+QhaM<CO<4C)cbOpT@A7\L[;\qlm=a+HfT:p<8$Ra\LjRqCPSMKS..Kb3LL?>Lo^:C%R9h)H@:.oC/s.sVT>A3Z(AI*3Csp>8"tUGD_H':Z=_bS++(nkcAt.)hfA#_.m/jjnOl#K3l#r'(CmRkok6ED4\3jiVl/g@XT+A8(%2P"/J:e+jcbbik4V;!6dEJnCE_k$K_B@CS9U<Tf(:c=jcW/W0XCn4:ukL<_*OgiH0dp&`Dk/md;e*5uBBi[\5OA2VhB2P9/GDL&r%]i_o+]cJYmcK(Lr"(p$HjjL.&NZKC6:2eQMUOUX,3kZkS:H%&oRndo"CsK0,;[_9#HK1p8)euQm\ogggmhFV%S'KZp4CgA+<YX:K%Rr05\4A5(gflXi(CqFLE4V,_Zn8(-K!%>>QT\4F5!,MndVUJa$=ka%nG;c!u/tLR?h*7B(07?O-13/1e3k\cZmJO8>2OtmD<4?EZ%,b*(G-J&:(l1B#\9^^rqhZ:B/(IdBbC@2lWCbRRp-AXZ=FP"'m_cl&`ASm"#MaQB'Vq31mlXHdhl:e;fCNS9TZ`T*VAL_Ec`%N\Z%(=lT\\5X(T%'uPu)n"NJ9<,eUm;cG$P?sIBmZ'pJq=I_PUplK'9Z*7E8['\XW_>%Q8#3Kb4Ln?c#s-hB9d4Z./7s:Wh%i"dqUaN%%cag>nP&GipS[!p[ZEQN/opRt+9J1+;FI(2T2rC5Y?$*PgLTX[.@f%L]=LdM=8jr2aqs/\>,Dmfah-%j".[XL_7rmLqf`u=1'ae<T%I)gP]hWgW3H1bQj()Nr39?FB,[jZg1V;-F\o$"/#p0n%$PkU4'-dlkAY$a&8<i,cm#=tZF\G+Te.DsMW'8P,>1e="d5rOj*%7>VK%::>2\(=J?2q*an4iC'Sn2O)U8%np%4mVnkOFuNC\E4_e^LYN?hYdbWe_oCj8`2`<DaF*XH]bH'k(`ip"F)D4q[jb,7,p>8F8g&_[%dG79[_OGam+^gcQCJA\Sf-](k7hembdm#uST;AZ^$4)1tQ<RL:`\p$a``_"5:<d(!V#1h;)H'bKn(#@4JC^/Z]7V"adpCJ0_%Sc_%6f$J=F>p`ZmpJ'k_R]5F)4M-m_aK5rA:H>>FOAItbf;O.^?.glrKQ<4<iZh&mIE7Hm]fqWU3P9rC%"XKnff-7J=%]>Cq7CjD(k?]%,(o3*@qLTe1#2)L4!hX>s,O^^`,P*u]A;qXhWBPS'5JTDEHd5_a.i#f2s"lf+3QV)*@*;[k`39WH_l(rpKCmdQ&?uu^>WtIIBWYC%(tRggm]<!p%QC@,,dC"rY$p\1>#26e*47`d_V2(=eom(b\fh.`:8fZ6nGnERDngVOmG"4RL#Hhec-eZu!l-f]@P*7"2EI9'@[l<n%T*n/-XeF$n1e_D*ga^'E8##23<RFT<5Xu6Tp5WocpV%Le/>Fs&/0lsX7?+LIT#EUb0s,#?=``>sEA;RjTD%-#77lU)V(f<B,c8#K%n_JE`.q,0MeKcL;:>p?7"Xs4TXI-IP$unaOctXJ_-,Zqu$tp&:Lnt[<0UGlu%%dt<6aZ;kgDniCe$n:-%D$3'itL,U1Vu&[793K+%0ZCDC2!u2GL7iX@PIoI$C\p%K/hWOJ/\(h'O50u.ngn?8Dq8UJVC,&OZC]<]>SZL76@:kfLQA7!#mF2=@%B8GYB^_0[Q07!r,]4>%;A-=H9!!;<a9R'G69\A&gGg-n1@[?ElK1[c--\ShXnh`l0-AL%KZRr3-5YLoV<TlfWUf"qB>%NE,eW?Mf9pg+BUu5"fJ:bN>9*23%O<IMVDs$N\OP66"*]?&P9T/Plm$bOOP!Z1o&ec'1hh$_kBJ6rT4FPi,%!)B.gkMeBip)`X9u6uH6Ng/V9rL/:1hh3'g\'&ZI5T4G%RrGAEX>]fkenc6K4fo%JI3YP>*`@%I>N4f5acO;3l/oBiJ2C,#?!aHuHA@S[1\*759rS0WS!8So=rVngH=r!*UqP=^pKPlT`/(=O%lUfQ9/Z*$"'#E[2j0cLk9]O&o^"L\IgS>@P/uQ8!luZi^s-VKpr*!('.rZ7J,fV9)^K-hW1E]@0[FJ:pUVnLX`t#JalEt<8Yt?$h%[1Gp0]<keh/.A*+bq-';mC$&`,_0T)T%lIZD:8thBcjE&I[Xu<F4\)g`GN&"DJG?'20J!!1=<5mdR*J7ZW'3M3:W=*@^8c[MqbSP%2cd&`K!Vl(lXrG)?`&9!QSipY;6mc\BbH%ekJeP'e@6,2r<$UUI?Y5Gaof6K[XW\kUND$-)o7p-/Qm";Y4[g;AaS@%dNK*oKfOZa%o>NV6/J+<>/hJUD1!QSX/iV6kc$#+^k'a\<@Ck7Z:d21=E3R;h0Q4I6%^.3]\\:g-XD?k6Y4P&(LgjuJb+OqA<#Z+cRnm>:g*;?D%Ge\&M3Gt0SQ<8%=1W=AYfn]9k"(cS`cEZ)6]W%X1Ue0nJ0<TB4n=0Rgei;K][=(YoU]RRh]l#<tk+!s^<5?2e:R,SO3e%DTN#<[g%RX'B9?m,pF;J4UM!8Dbomktm7Ge]=4:3),c=SRslM\lM"9,CpD%Ma9B,n&(7%\Ru8pC7L=(0jXUWeM+ANG6G!EWG(^n"']]*C$;=%5\c)>%U">E3?2i#@QS0&C08I%_d)((CG\BTgo,uW[VHYOC.M$=!7u7m%*>d#NI$hM]L*I-EKenW'$Y_KDU2Li1tL.,Qh#!9,MUM1%nu6QNqPPt-du,[qr_gJT2mOI`;EjFl]+.1U_b9gP9&b"Qi9bJ4T3`6"n<`^6hN*&g9DP[G?b+4RI&a+HCfE"WB$dL2QDN)=K3S9a%EAeNDfC'iM>R*>0C;5,oe6UNM2XRa'<qfobo;IaGNn$o!qJ!H;F0"3$B1$D%oeVX9)1(:HhWnf.6IMub7V>)*H`s%f:>YkS5P(Eh%<9.etHi5L+EZO(E5Ffi,'[E!,QTag11[j&orKY"NlXt[IhbH+\khPK:hBDh<WnZFsV`RT7Vjd'nYFkWN1P<$,e^UjmIUngn6s4qb%h<S];d@jR3"5N3TI]M@l-Vt];lY#YN)XN(4qHcD">uSnJIXBtmGCZ3-lhC7D6U@JsJ:%7=(K@=Rh0[uDB:_)`PEEH*]mfec.caVp%c0Yp$hs7bc%?A0QO6fg!3B]gBf?[]ifedd%Y4qeWY1(H="SS#P^XpeZ_mMNMFn^7]<;Ba6\,*4tF1(&AIc^bY2mVgtYFheq[3-h=%ia+k@e_r+Jj4iT.&+t?uqr^-+hs.\!2M_:FIca;A`k-)s]@YBaP/fTOqqp^PI]M@7ZI1Yuc`fD?F0D53HF%c2_63P/RG[;=a*i>>%Csk#LO)OL)FQ?[)%WWZK7UOldkmctQqJC9gT16`bGH]n-ZA%RE5<34ec[5V$p<pY)DjRQ4mEHV<*o$6l5;P+Ym2,Qp#J&IT&:(IK%n+F#QpU]h,IPMUqGGFVMYMXMMY&s+)gH?E\^=?#%5;KpPZusZXfr]]MVjqUHYFg@ePK\Qb=_u-*rQI2]Xi6NJ][tIX4YF$s@b,Ul%;Jp8J\bEddg\I,HhWq(;>\ghFmB_/$^=U]$,A\-J]US?^1H,a(Q,GiSoeTC"<G(=jme&BNePF4,gZ`$/1F!1[0Sd0ic`.G\hn=L(%Ojr7QB:<,<`P$`_PJ`,+:<WD.R84<UV$*,7K58q'/Rm.=4>3f)ps>N]'g>3L6?q@b6G$nGdnlRZ2r:Ua(,^ChikJQuhOLUahE@Q"%?:Zfo(P8;:!KmMLTS)(S*CMS+bi+$DX;leQlT,lc,u7(.g-QLa7F'j4Lj,PC1NaUb]T2-K1#M!f1,N3X>SSEEoNo2%]GrpaQQAYW%^CM>JJ&G54NQ:(RF#7a`>f-4t?us=+[GQ.Te?9=eUX,FuWmF9`Dr)tY%h3\grG$`;%EGSkk^)pK/plC@G/<A;H&hmZ:?oR"YIX*J%]+geF[n@FQ-]Xsi0FKn/POC<R9<IsH9DYgIRGX3"%EcD+=qnr6<8HM]04-fNr9`-\er+&VT"2orI.NJ5b/^h-VL3a^/W.H(J@PI$%\/$^s9c&!.+_=hhIS7EH`6BeP&dM$U@nI:%[^[/Z*CHg='m(1R1bL2k1p^:"?hdlc5L5npPUdmH4bBj7n%Coi`b_I@h)YR[ZC%3&%DB+]r<M*T)EDKZ._%Z::o;R2%3#h%Oog\c"p"?i;O!IN)@m2n5'F`Gp.1i\RrW'CrnV\Xk1>i_!mspU1!p;_6>&Hd:4;DQ"q/hWs%YuPI48Fb9DdPYV0U$6M.GM)uVbd^4.1&q-4%5#7^?S^%=j\&i)$_CX2A\VEnRp795H/hOecS,(SaaLqnIW\m]4lu7\^(M2s[&T9<%5J#f4\$,">Y'>0PnrbSQUs_/6@FtmkE,_\NhWQo?KUtX6Y$L;hR8E'*!9a+j\0E0thZabVq.pbZBH76g=JFQ2?-!mm6ICSor<*hX%cG7bj&,eno2VnCb#?_2M"X"/$oIYHR:4MhOcYJgAqT'/PB/PGMg0LNol=ZudEe0Q0-oehZ!Sf\/'t)].>SNtA#3T?6!CIS):+j:Q%_2S]mPV(LI3q>'KWbcb9lK+(7:G)uNE6@bd".t:C.3X#T^kANj>D^lipliV"],sccp72^ql-<FV9#k4fRU8eiZaeum0R#ffW>@'M%3-Pcl2P0;9DUD5dD"$JN7;`GGHKKXLlc(=]8t19/b'@GFR4QT*_8:Fl&e$^:3(s7Hk9G>n4IjbL8^]>uLT0fM2-qX1)q"_o*<n&^%JRq3hMmT[1-H7gCaA";dhKNI:/C/TJ)@hUfT3o.aA6)pqWfN45$DVU4<I[DmnE<r.N[n/UThY<<q4&tL>d@H3MS7amq?Api3,W`a%e(*ah&ppeBl*R:*g`Qqi6nsMk9,9jA$)25NXuuta4F4KM\sHfSHCeZ]Hf8WZj$(fc5B9W>=*f+k^qOpP^:_g6/t>M4/D]p.P>XBG%5#;rR]UD)bcC2V,7ag4!qC3FfbV,(/.BY`)>?urX\Z])oI@0VdSKT[9GYj0HhRl0Y_FH(=quZQM&&L&FK:d&i=;m@7q^1^'Nj<PE%XXC]2'E!f9Z**=22'R;<m0*8a^XD<J?%\<PTagSp/;XTDMhOugVm3Q,C8G6ZK/#V)]h)HXIpe=uot.q*:igkpQ',Ch(j"4T2u+IN%l4UHY;aC3)%C^M@o&HJoch]lc!i:B%nV9`qF-Ptm>BQN-ar&Ehjcfu[c8E1L),M]3R>!6%g^,[KK3P9Fr0!3]6m.QH"Jmi^`Xso%%PWDlnU\n<6Jctugc*<q_oJn@K7"P!e0;5LhVoga7p.kZN9<<rGFP9AeWS%hGF"H,T)+8l^7)W:>7Oks*A=f=;]X/Q3GW$QbG7()a%V`Atl3NO&5kV*!l1Oi:J+F9r$+S$Za!Wc^)V_Y<7#]r0gJQLMkY.U>m^G=8i;H09BLAk/l#>_lQcQ7PWZY)!L]Uem5K`d)'VQ*`%%;P,2*2p-Gua!`(J$(c?lYFSE098;!,F[K@Gr+\n6R<)-.=1m3VD[2[[prirpbk2@2JWU=OLl=tdIQN^Q!8pm/7!bZ!RfTXC,M8Gt%obdfPKjmi<=f?uaM@fC*YD>pZWOmLts+YRO,%^-Z&sZ79/ed2r-3?-9,M&XQKdMB5'TZ+#:.UI8[kQ8YH@->L6p_4m@!bAm?L.O<%F'o(V/lJGn+bA7E^)bsP*KZ+#+dGgG5XRjO_12[O9>^QVLI)'3dh,`qT#sGTi<*Jk0."W`H`Ah-.dt3KT,&S90VHGk`8_LlD&8mU%MD\cfI1R$A+2Me"!+r*1!.bX&h7X9e$mKf7kO&s+X\Y=l!D'&42fNSU%oU7HWJE49CH%=W^Te5]oSl,C;P>,!8cnLEAInj?a*%Lb%Vc^DPh<)#&28<2'TuZ)r$:5h"Ep;CU_a*D'VqVD#Nj(Oq-rKU32hI^WYQgc>"uO4Hc'@p7FOE)TM"'_t:!b"Hi`;F=dfqk)$sg$_%5-i$$k64>9%Q:6H8Ip&i/-<(9.Tc1)q62"1Wu1i4lBUtU*iU4\_trRqRj'f1:V(0*aLdSTb^'G/3D/V9Gg%XGJ.ns/+@]%>F)'AB%=H?W$fhPe'^T1oW8Lc<9UN2M,D(i%A*ifEgB!6(Pn!l8n0rkpo\[^f\ZpDoh=;a@MZ4+1ioSa32!h5V#X:=!:cY(l71*[aG638lS%[ppm^)ZZ2\8Na5D`:j>r6$#r@);.u/ojWWGZjmEb"()_Obj;/OPq(h-iF[M53'?$_q1Ep4f2F]Xd$DA\:LBt_7ZfI@j@B@05`3f;%h,%7^QXl(/'FhW!7iC5S/f1`?j&;58$XLp=3=_P[$hb;r`J#F[N=YP*mQ(Ba<p7%/QqlD7RA_cBa&NU8<IJsTbpNb*WcW2Qjh6E4%JpCci@:ADN=T0-)KY4!'G<koEOh2Ps>qh)U!@m<\!bVb<#95UP;@XT8#&-`oqZ;n4&+4,`5Qi3Hmj.WEn7#"1)uS<$O$t+q(Z^Ca%O;(R(\:eD)A#2-P=pQOFpQ*eD-s-MrpqoB%c4c"![V8WmiB.q01Pk-$?6=<^*sW&->eTl3.on;D%Eb"aHe]"?=Z1QN;rQ1e_P*[Y%e]q_Sq<5,5,1rFIpQrf@f3"RP9/$6)N);K9KibhZeONXI#![Tj#qIkXFF<F!0!iN,5RN\1'qd%$%$<?%^iodjq[U<X8!_)<*mq:=%%"8T-h]`n*l"gF]mOo3kFq5&QM]>!1@H;@.3^1Q3%-@7dQtkhtEHECYJOVk$g_[8"'ID.g)2rBb:2sB@6?#)QV!1qL8hhX;Fl)U[%64C@9"iI#Ebt,\?a&3/_YCSV9q6&^H9EcFUGjp!tMc%<#b.2!>eV?OpQILGLPDCJ%Y),Bb0dh![%1m@S7%EHe"4p68Un(4jHP7(8%7,6/*"WGnX:<>5e9F>p[c'CQiYGfQ>c3%1e&`Z5GXa$,&0q^9DPVq/V>eh<=n<G=m%_Z:%;SX7Z_WWE5@6*XP_H5/p5ab-I0Fq=o%_!<>Rs2in+/B7n2>aViF^dg*$-DU:]rG!m>\)M?\SD*qM1Ku8Oag/$_J&[CuckQJe/C&RBM(i5h;ta%j;7O847#OBMeed]:!0QJX%>^"VFd`>(>G@@7H4Y/,&Y@MoX3PI`H'Yg$u%(5sH"UdHOauN_s"%)>CAO^BhkN4)Tn:(s7dH=TXiEN,s%fc3#d1Kch3?1+9>4W*a%'B)@G,rU$?#<qrdr%ZFfPu8<gJkf;-]USN=Dm$Crj<BedU`Y6elm;4!'&R"4F9!gp/45W?qW_rMBt/tU461hQJN/3%r&d";%j*+E%pr=b;44$!>rO[Y'B9#50>R.r+rG["9j,>3:]mFhqHGLj8:,o4a<jXGY=Cr4[dZjRj6a^m]3LRP=35"ST)+W69auGj?!b@lJ0jmR(%.rmlm8f%nd!U90TV$dU!?^_h)4,nnJ.)/:VPa,?$Oqi\u'nJ[1U(j9>1/a2;=Hk#TF]$>D,$J_pNLHh$PW2P(b:+,5pX#:YoUs>,%$`"i')[MQm<^=G90EK>(OJK8+[g^b[4s7%m-2?0Q+D`1nSRk\#:bVTO'u+9ae1UpH1;M$_M+YGs7$Rb(VZlj@cbKN=$U4FVk7\%-%jCK6oB#Kn+LFbJlU6,R\$LAXu:Mtdt(<#fW_M@<Tn/^P-oAdc/Jmq:kgN:+E0JMlp.V7$-q*(SZcfX"'@Z-qUZ?;`gjBAHoT7u`Y%Fe3C2VN49:\GWE%")p#%8*W7Zdn_d$9VqCVG&)PP^cG@Y\U0Bs6?pqJ#Cl%Z4Ws.U=(WDE9_0pr$B3t/"'/$$U2SK,FpCki09T$j%C'=Wo1(-Q'Jb&"+!-ZYI^NE9Yk>H(b*G%[@$c'5(j9=Jh+@7EOQ`/E#-g$fMGbNtF"^hF=,&/H9Y%E3=JVlptAq9Go6Z%,Qok#60%RYo#O\S19,R1l]k_&O!X/%,jpGL7c%@kWu>`a#Onq$dna45s:7Dg;h9_%Sq[@5&?Ij&A-crr-s:U7^B(H%sq_3EOf%/r`'E0Re-%%)&f$ln7`cY[b/s!ntEIXnB"ht8oHp:=qDgW;:5\#BLs^[RCJ%'0TrMLc@)M1<QV]B[nt9N=Q8m4&fOb=lS-_(og6\CO.fQ!1fjar%SFdAqXhEgAM's2<p_e6;b*PCVk#OGCYLugCEJ`YSm(uWedD9Tf=gVcdXVaK>]QV9XW/s*(=,\1W.n4K\j;&dTKR[+PJFF:K0(A9m%K,(.pjle+6;)V[$Z8i^k4RZ670Z$[DU]L#X<6rZ/L2LbL&n5-_E5M,q]q#>DVe<1aTQ/A?_E$'+g#slP(E\8(l2.1q7e7g4JbDu1%H/K-.9.85VcL9m'3csqp:Kbq-risa`#5!u6%9>:3;Z>Bb#$T3S3N]ApA=ibKIH!2!WN#6JLeq>5A0S\66s..Zb!aSrn*ZrAn1'1)%KEN]H+HaJ%oFtX.++sp9J;OWrQnNk3&/'4`-k]c!IV8;)Nk6^&d.qQf'=?04lG=TKB[eU#KmXZ&p'g`3j7]I=`MB9Z[oaL=G^N`!%XD+lLnSSk(%D\kh%qo4L8q_<Peb3iVNfEYs]>c8dE7P\<S'th*6Mn+jV_'Y#1)4R7J6E(2!o`lUODZl-p3UZ%I6m5'@JkQV&6:g.%O'.>Ck`%j+g7ST]ZnS$/m%)l_0E65KDUfm'@O_XK@4=3%^F]`B!\"l+5dIQs_%@6`@n"$G8*+JO<A3E5lG7fklC(?ujEa!_4D*0F%O;4mM(P)u\"SUpJ:ls\Ah'>0pR6_7jR"UiT]0U-ORrc&VE*K`$Cbeh<#]H$;9'#mg\Fld0@O<!o!T:=g8"#LA;M+LYhZh>abjESQ%>YpJ+en/I!dGV)C2b7q&e<Vj7F,X,5e?f7eIDGg-/o\03\QS4bg":Z%DU:T>p2#[V]0Z>@gTsJQ:VB'kd+bl--gPTq54nPbUm'Cg%BHMPI[M64#Cs]W!4e)5pHMaYk40u&,ppLT.G>krpWGKcWk;Hnh`<NV"qk)W-NCI:/Q>M%K2HPf@LfZ%Q.bd0)Y>V)p-k52YMH;7S%.Q"p<6h)Xu*3I)(b[S5"nNRoGREZ$SOkQXGT3adg3M#)"6WgMRYX5^f(C%ckXn,$oD6+cXa+43JB09m@\V-N37_t-6Hs5jigo.BH%p"4&q&S[#@ij(Q1/VgZH8,Qjm_+.;Q[FSp:T!ICfD,BuNmKTe%g7U>Po"\8+2J?OR`n5@js%e.!<]9CRI(Qd@')n#QOkKlZs*u1m%i6)XUoX?tm^UCnk1\O"[p"m]o_0D?*fYc*E3"h5*-h'\_&J)c,8M1mif5)uSA=*Y&PDge#G5+.h@+"F2/<#$*_GRkV#N#f./:s"?%Z)@k1X965t$''YQP:XVn^VLlJ+;^_eKS,D#3$u+$rZ)BPnO+A36(UIe/FY_@@D_MXPY33jnK\Kl`oC;<2[VK"*b=7MVuXCMO!ilS%80g\':'?t5Mn5TEM6dfDE@r;,g;D#Ta.P>qCbeJ/U*digM'uC'Ik,l8?-@O>47!:E*PP)GOoZjes2gt);?IA6_]D?fHR';'V7*&0%h*Q8%L>Uim.t5gT2P_=(`k$pk1)M9h_-lX$>fN*]o90'!.u2n.[eor[XCi0>?k^d[?[ABaqto6Z,*mKIl9O(9^&&qX*cc,j,,![9%O7q@Yd>0sFmqh*SS\OCM*;j9Q/bH]j`)&^.7T4=_>kX(+g/1>h&bND!PnJ\Mn%3N;@^k#VY?kaaHR7Lo.akZODegt'c;hVPpKBVt%Dg.>8d<0>lKcoE&?d_k&gSLN;(#-bW[`DEEr`Y&@II;!kZ(I6F<nD4Mp,4Xs.ppZ2:h=nSrB>4MIf%IKrhoecm6>P"rnW)#2ZNOg%s725cqqqFgk%7b?=>u0+IY[Uf"i7hP]cPJ'rU`PTkhe\`k!::oFlWYG\W\Yg>^D>A1FgeSFQ$Y!)6G=u6_:=[M5Q.YC*e:RgtC90%FQ<PF*Ut.]/j3e=&>"_JXlLYHq>QnmQ%pQ[G:>nN3g6XC+b)h-ouq<h#6iglVQt`ofD#No)Lm2RPE5b6iN-$9<]'.6>CEZWn"]NO%H7Q8M3IUS5@MBg7U;gME((o_IMbLh5F^0X,^YeiM>F4?;#62l$"U)@f\.elQB-?SgBg&i5r:+^PVu!beY.Lu@jng$A9eteXD%8K$%kp=ELerVt%TA)RcB[dDB5H/,?5>gZ[rPUACpBN4ZF"l<:B)pX>%p5u\7^V]f(]U$dqJY3qG%1DVY0!;$p=ccfJ@6cegg>XS12fg4%.#%2>T#'B4f#%=bE]&EZ=Ke-3l+?'g;cSoa3DHt9c`s_/RVlJ?eeSESMS>=+!PNTA\PY>\(&M4%%=NAtG27AKXil2=aCpFPV,p?h%9=>J^l12LC)7?>2h>]UOeU`>:"0ud;9,B&DFehl)pNK6pK1M=4<FgAhCel\L]9V^pU[dBfq#$<6]jo`QDHI;47_9nsmTt<a_iYHP%[A!h^J//=V'0cng[XcbLKI]"<!1*PoMD6=PLfLAFcY/Ic++a3MP7a6ZQ`fHFOq)e#Z08MoUH]u?"$fW7;<HRX77Np8:So)5OG)gU%O:a%sM'iItC=R1Z[d;Zp-3jA<d&O<*QS()&Q;#I[i.u:R$/r2W4@RH+;U\6VQYE9T>ROZKN*jrC%61Ys[324Y#]1Yr\^c;:3gH"n%*bm8-O`BJB>+$#s<!CU@gKER:p:CARe\9L?1pM@83Z&l(F$TSH8X^8AJig$)Z]`Q+pY!hc1:t=C;;g0BcOP+nR`#mGjU'iW.oP#f%*a!ia40T<\;8Fk9DWb'_dX112"t/r0EW@OFm3.J:3L=q?A78$9.j8`]V6b#[l)S#=2[h3ZCUmjiWAQ-tV4T+aFeVm8%>jT]6mQM0%<SgcU&!43R#O$%2:FsL.bL5p\m)NdFpQpb[nl96fQ25R2Rb?-BY@GG+Z(bkq+E]V-gOYsHO+*EHc\eLV:DC=_WZV0l4aN$=h5*p5%@@#a_3)ur+_I(f.afOH\E8$A%$/s;#de@\m8&&9K0)_TPT=7bFI^eWer8R)+[%I:0_R&.]:s[g,G24Y:WfYMT(RV,oo_6fUh]Ouj%V_+P>J/jtR,1o;if9]fadaPO0a)SGmFS<>fF8GI6*U*=;\IA+Oo%EIiC[G'um!%\Kdod2k_3sJ!59DQU"jY&]7ian]g!:6nqdD>D%'5'OghOH0grQqn$[\*LZ:5>RK4SpF.c[Lo<g$eLeH^GOpWMd,g2Jpl.r:T?l)DS?K%?BdeHM5Mq"(sjF?.L^$rSApIc^7Ta9oiE6%c\(o$hjpQ#cKhbDFqc&SKh=_qiWmmO(ot9FFm(S$H$S`j>c^8b[r07=RQt4cPZ;Er!-`9aP7qP<`V^"[f>ihX/H\.F%0fs]hXgW#%F+cI<,#8`5mF&ARSRnO,H$$uka+SDWFIkOUL7`p*H1Z:5nn@FAhcm:C?-p063J''JhC@Efh09Zb!ekcUe\Y!LXlGGfZZg05SK%Gd%WD21CUD'"fDLI.PL%IM5oXeMGCJcY9j6H&p[ISF22TKmj%lnO.+Ut6>jb>VUReG?+n'alIabuDRZ3(1XCZR<`hpIP+hk-<,o!YWZ%>*@Aj!i^aBgP68L2FL#gO!=tu!knBC#HG2MXm2lTO&;60_ng(6Pm28>VG!uKT1b`dA6h>+i[uJ%bhe;://n([#*,es/P`D<=$?"X%A3;Ue*2&?G6hX06f]_d&\UWLhFi@/m4[%Z>='\0^GiC(m?OD?%%^,P]PN-egk,frReAK\b[>7(C3EERo2sDq9Q@=#m)*m^ZS9o_?%g@AQ276]>j*U"uMj[>.pO$fM>bcSR60mjeYG/fUJhpEXr9;DFIdpC*FCN*KP8"`YdinCBcjZD'rlc,aCFI+`7[B]&0nQbiAN&5t.%D,!(+IhJ_BN]*Q&)+U;mX.gQ-`qi1pB[0trDfJFsg]p!7PE#nNa,;\$&RfMKGZbp^X%*A1]8>[dKKKD-V)'9"l^Xlu+KO"(gq;\A%e.shM5[V6eJV6\<pa'+q:.P5lPRt:X=_b^a:7&r4Wdo@,Z2dd;M)(EHoG<U-U,`:lK8<>%N*mVQ'Pt`N#$oj(,5A#S+0IK-?aF7d%j@u!D>18Wn!=5kJ'Uc2r`SdOR+k*eO*H6d#65Bq;]>&m2^oMR<JiCk9$BDVd+X?J)J6q5WUNbYEm?'P:4USZi/]TYi-qp^H\HklW%fj8?pB3H8^$*hlK#Y-+ab%Q$r3Z&P(?/K?M-LKhA!V<h>BeIji:EB!$OV#oQAZ=C$<Vl@77euDT7dKNF:W=u"RiR7%lj-!kLTr[1%f.(9Nf_EDGYS"5d2Sq@4JlZ6q]DBNf34X!`kB_%%'M)$Pmo;JAE(E'-mT0X2eQAlc\/^'i],d$b2&]50ch8[(N)cM1_MLq2-M16B%^i"/s3k&lI]3J=+G'B9HF&$<).Deq$\F6\XFH_'O4_C#nA*Rd*F-M7J/SCrda^_\%B.TPV5aO[*-4f?2r'JVI4X#BJm0H4R7P@Z/%NZh/+Q[YBpasQ5I$U9;l2mN39qqHi9T7;:W*ZVPJM#gNpOLKJ"UVOam_0R(Gao//,%KHrb`&,,>PqGdtihpj8U\g,=QNugp`?jpQ%)5/e(s)Df.GmK2mQ9_;u3UKQL%a'lc"i]M:E0"LQoMiW[$D)1/8+X6Z^*mt@`E)lMZ:jm)LmWgP/2J+jCq<<j6@JfA:hBj2%d9%8%P+^"BpLEMm-Y)7DA\Hca$V0boK4goi-$."+Z@m2aELsHmH)7s6H+RlEo7h#]l^.,L>1YN"(8f!-/9(H:-CAmtR;r$QI<kIc,djFR%'*tLnQ+8_V!mWULW)\)4Q2PD'Og\W-eo1\CS0Q2Y>@Gj`J>_[s<+)?*9-i5%@7]TN69'_>d`0r)%)&lWKjIlnXc2qrGU?Ve_@Y8M%Nu(2V:qEOm-@_kAI$l4orl8q?pS1g>k(n2r7j]CD,\VL+7F7CfFf#Ul(HmN,aBYB%eOKgSm4gAQerasj7j]IBU9dfJH_!>UB]\U6%lO0Mq(`C\]?&.4co[6aqe%38'#:h=8UE'Z+8I1)qj4#+Z!WAg+OD?l&Moo9MqpIcs<ARFK<FlSqknAlO]CFD(@$UT\Z$-$:\ZBP*%q0#>N5JnKNHKYNa\>.q<kBD"XQ;"g*568-hKgp2Bl:jQr2?i>_p7$XZKF20>D6U.f:lqRRpJ;ES,,I@2d&eXk9=0Y1,;E=&OgZ3)%m94jVqYtr07@[EP(-e*&FW73/h=g:fo@h*ZF5#sc#LoWWdUKLBD_pW9b`+=Pp<e4!2<caLNWq=s8[mYsfZ-ZHOA1an2!HbiP:cqk%ks0%]B[W$8\>RlQgCW9]aeT$eT&V.<kgGn=ChWL0/"(M9O7Wg&PLH<0h+'BfXrqmJ@FAHXC;60YQYNQ:2sN;=iMmc<gL<t.W,pYt%`;hd\2X^4mBI!,6N4KH'ZWL3'GIp#5;2</PZBJ-U!Baf?D-l+h;+H2'R>a0K6oXC]k^ea`*J\Kd;<Nhp7U9a4NB4FEVbmER<JSJh%472o4F`dBSl//mcl<OXfd119%`t(/(Vi*bjVXrp&T9icrK6(LZ49.P;(MG;^@Cn]$l_f38!uEQW?['F)RZ(WO!8Z'@pnU.pD&GHV%HfUJ-nS!1cMm5".M3`k8&RT2a_M-!Tb!P*Qg-Tj)!(dqEDn$ReIMonnFjY?M4m[s/Rb>[J10+'$AKF;Ya:lkWT,?]O>M=fcYVf*Z%O?EB=P9%#:'<%,n?'g"M+$-o#e6>c>_Oi7u(NT_/&2B_AHR;KF8Iq^%A#7SEhd89ccqc(T61g2=j7Ho8f(_]Rl7:_gmQMA#67C>0%+Y,%:9C7Pg\I@o-gGu4q`,a0*MulW<G&4YIJj2c=bb=]"UR/(8QgQ4@4.sc\Dqtp*#0r.Xn(1JRkZ2oKG5J73^$o^'3gA,%s#suU%KtkARH]7$>^V?#K:A;W;T\L"V?HV'm#NqD9]^Q0o5I#4=m%!1H(3IHH<Z>/sn.u[He(sMK_2ZLknG'sI;)!+0KC0B5U2K`.?VoM!%%1bkq\`n;CI8A[ek(1_Sn/%0_3qpMokn8qB5CB??N5Bn*(-h_d1k&qdPp(]CFj!5RB-9iBSYa5.]0Ve6\&X7C/MZJ!Eq`q*HU_5U%5Y8)/!P\UQ%La:39)uCt`5S(\i#Q#$TGMM@Q'S(U>QuXm_"i]]C+l;)l,GGKe0k_8HTeaC:sW:'-GSkHAK9L9m79Aec+rc=gl_,6%oK+_pU?NYLAo1/;*[cUM6qhdhnKg1OUW6Z8pnGqkJ[UYtNLR7J1b/IoAZWd4=cPtihY,q7n``SZE^IkId\j4Gs58&`O&CD1F4A]O%,Sb[S0S-*j:jHYV#0N$bQ!kKj@0gJ,nH=j@&ZaIGT@3:C3?im&m:ZdhB?Mt'T&@[:#TERh,IehsY4^(<pldoDnWm_h/H^tOFKafS%#i/0+dfh,,m/F33m#s1t_B#1[U/@u\W9n/l'#Kc/Sj$&\b_:4SbEI*d]bn46QgTq(6s7lHadg&f"17AgLI/UfdsHT+oa.F\U]sOF%+]F"]Wu<CLe0#o6"(CFtTQQ!jCR)NSOEJO%Bp(YnGh&?rU.*XfKWHuHVCPI2Rb!p>`LA^D4Gijn0g]q!"[-U<+Tg*;Q516*+Q"bW%HAROb7R9]Bdqql0N:o[gNPodBX,UQ63<+7+EO%Q,)(sBAB3o>'XI.$R(P?>aN<+H,"pj'objjN32KYWTLLJM2.803g8/*gTB#`r\%4E"CTQ_%ncr/&ebofO``Chj<cQ,+WS*>sjVi9H"[F1ge$Q;)V#9O_hY^lciP]&\%_A\KG4cfcHX`p"cfH46lD8'[p&hcc<25XR_k%i.PjdV%;ui00QO`A9tK)NZ`kS*T>r_AS+'tm-_82rA.WSa@@@ScF^h96e71#AA(#uG,)Yd:8\uJMpnX+&usc[)F^)E*C@tO-MO5H%Q4TV>)<'O%=AmjMVbZUP>VgEf1pJ\hGKb/jI-"`U'.rh0OI4W;_7Wg7VJ'"C.&SsRFOSt27C6FI1"!;J3HFF(1.DSdaiSflG@X`/%=VrU*N$0rE"r2dS7<FV109F0]h6,/sj,4Ntoq$@@W)TMIE#<X=7P>pLoqgsfqq7h7a^XDk_tm>=L(E6oWQ6B4>3RiF_l$$D^4\$t%]@@YnS(3p]%rXPXI`Kh!aU:$X"5?QR.0n4ml*4]J2N`lf;!qi%9`8VHMnHZf%o,E\"B^2:Y.#c[oGZ06E)UY/#Mid%WBlBgHPYLJ%&71M@QmJd81iE,&gWV+Rg./hVl$M0jRUB5^hT+;EE"6[`3<"l01k\<.^*FTc":Je81mNgFH9]gY6[1itL]2s)1[=g>=ikSDp<G^J%!PXqY,&F4DGbS3YhmsF]Nl*/Q>gq&L!b&17+eX+sU\^6iREU]dABm`2,(4@$gKoU.'B-8tPX1X;CY0$3;MJ:"]&4nJ#K(4Ubh.k^%H6nU$T2__ggc`5(4?R]q#ib`o%"]7)`[4S1C]KDqrlDll-7HAABHdj6hjS`#9bEAto5G_S7_KuS3`JN5E-V]Aa,!4(,*DqdZ10Uj%YSqp%H.SN>m5ePV51p),n.@mi,_9hjeWsn!-q2S2-%p;>Sj!QdCDo5R!R&[5h.,Mn@Qt$emHRC2i$jflPn:B0H)A<\eg.4RH2PZ,%d!ce-fqSo`r8':_P+\FX6"F02TSP0*+"mncN)!H'Co!`EC3au3Fg"s*n5^kf<1qu`Tl>i01s-dE8LB+R1nH$cXjdM70!hmj9frtR%ha=Y6cP9)QVF@a0nYI][BY*fbY'I,mN?^/l8K7u=P=C?1:,H,B7)FduniT@'Uu2R<8A[*JefrIcTU?Ml9fmekYsuXK9((#Q?h)6g%=?SC]=TQ<7^B)UeTNbUo(tJQDHaq-Q=5KR#e7>_B]9Jj2IHV*NI1X72auX2=<^5)]]HE!WeX']H1RDuTZ?@jY/iGuC&p*&:)0k[U%F-an&+R];EJ6j#Oqq,Y-bMWds;3#>bOE'uC%=("+AC8A5RUjgL<S^Q@92Dtg.Gmem(8j%\k[jQ,I=)ni&,P^\AN`-WhOP7RM/3T0%YdIUkC7Ts^hgBf#okG::KQ`uRQ6%/3g(1Ktck"L"Y1.ng_[b?foR%.%2`*"!cngXr@s!&=c&"7Kb;gE\:*-"K;&k%nT#LYGH:"5=%cO*E.U!G3XD4Jt(PaT&>V,aV^+P4n6b1YhZ=)&R_5/NWdHLKk)%!mcB6kALfaq[9;3Zr$.5c43(@Z<AY]'gK#+('ce2r*AJ%m7ta%nbI#:GGYsTa@=Qj<?,,$M(WEsLea'>p\[#G7DJ#"g7#?%OADCekDE8+Xbm8Qo4^/#/^%Eh*cYiNJgAaOnCkhn$g0"&n\i"t^qDX-%RX>eCrlH>W!JJe3?'&:-rGAga[&cZM`.!u6,uKirFPOl?CCM;0QgfdUf6Lg-`\R,,Qrum@-j&,2?mnF?AHOXiY*1Hb5cCft+hTcj%ADp8:i@bs'ctJ@c@`6r/6TRPk_1Bm0D&7hA>I="BQbG]c]krQh.UDpA`#UNLJHH,K%/1*=8lqMf,eS9eHlbQ5[O;1h`dhB8@sQ"d%51,<MOgn7WpgEX?Zg?rdKa;u(U\'U#?2<s5YP2Q<#`_7hJ9qkJn?!u]:rQ)rQ2L<Jqm2K40;Rp58\5!GO>.JqT"QpQVa\3,$16"D%K6ENXY6@g<;XU6fTs!0d^96=NGq5b=&JD3P"@MNh\r`0Y2MJ^S0$R?8iC6r8NpW7VN<&%0\A&#,PEu8kl$73]>^:+T"?7^icHAn<%R5$o-BskXmO)THl3s,.$]T':8bmq?-@F8AEg^"^`Z]l$<ps/aRocbe%:4rW26WhG%Oc4AN?dD::.b`6n2W''>$\jqo<n_SXBlP?0%pZ$J\_25-?p?'4dZoZ6<mfQJ"msQ=Nj?6_'!a++r['g*(VK%8<'/K_9_E$+\"1b&:aR:Y/3dNP?1NF=sq4pA1aH\(U@mcm]EppK*%59^L<`.IPWUN4"XObombk,rsVR*W?/VRj$M]0YQo!;'4\MK#!SEBm%r#d3='9TdMFP:l'3L$9b#ZMVc+k51g>:2cL%Er2]qk!cF)%fTWj[OpZ:%^!pt8d-_NG*;8Tn5og6p=i._5BcV([i[C</./p(U*_0YcA^iQ)2I:a%m#;$D:@+)KWat%[*[ifrB44;Xp!!c;l\q_j%OjtA-LPqRcQf!]pc%.'Mi8tJ=73^hACk/.2'>Sc15O4Zd(p^Zl*bG`b=U\OAL4-;n@C=39d:1-5P-dFs*605;ol7uUmZJB<GMPeu%X%-Y>h8X$Mi(?m6ki["R9Sle1.?[l%&@PD\H4..3eA?V[F`Ik@oUR?%`q<tLaC\V`=-9:9$.5,6H"CN7doqsd]ZDBDKa>B&eB34O%*-7!>M4"8Jr+(oHC9elO*"#lQ*Xcj]%PhS]mXJl2hD=5GIiD92N)'qCE7nQ<,.^QArgrhWr>g)GH[$2:c#>#L=W0'"4X0k8CXo8b%*jS*E,OPV7Q.SN>U]_JU41;/KCc#tf4bj_*KOtYh<:i_=#cUbqWKGUXpsX\3B5`e237jH7P'Mn)A)JM+6U3'QTV^\Q^?!H(WP(qF%)[6jcd_c5(a<Pba0>e:FRt^IC_fQ&fTD1KnaRhr3:=FkF3rL5D-i**h3#jOM7Fd%p<^G*?aR;\FNW_6P`a[$jAM7(\etaTKS&oMc%Z&K<#"!R.t"mJ`RcSWTk@N2Vr9dDGZLQ3o+N6XJ?Sa&4a.k..hibHA+LIVc]Ga5lXS9\E`Q2pQ=TG=8DGb6lCWd%*91->&S^*$ea%3o;Y6M2I?=O+e^rOU$^1Bi8L=*m"-ijIW\-Mr!s+AO`oN,aKX*W)OS:K*3VZ04$odLrJ].4;L!(7*FS$81\'b_;]#gI?J9GZ$8Q@%C7FJIFk#":1+H_qR:oaIhacceI&?#9[Bt(>&IXEJF2Ee<`:Q'%Bb=J3F@MqjOsF;(kLHC*+QTd.;XBOU>I=f0O)3['EBc6A:*6YN%o!gkcb]4sJJGp1"pqY#$?6Tj[c#eY*5]>;/D&&+G=LE>j6O&751lkI3cOG5?ku("9@[#;6=YdLm/+l=dQ-(/EmK.e48.qgRq]t2;%&?VJ,DSHUXRCDrCT,iT5Mr1*NQNCp[Rc)&urDN&B/_k\FGVp^0"gX>BoQA/^62EY&E+")7Z?:lYQ-`4b6f>&37Wc`!2CjBNK!QZb%d5d(ub_,^c#rE*W'DF""5/R^,leObTPNWKY6;30qS8]R7/6i2LJ21K#\A++(g-XFSD5U96cW4:"&CA*jrNP5(`(tXsA%f?_P(I!Q%9H?KOFLn0#5J@Wcn&-Oh*69Cm5f9Qn\N2fV6r/4BU=\'@!aRo8N2V%',bun4O/[GV.`7X5Z,TI+jW7G;:%YrqJ:'A*J[!<0-oL]L%!f3/'NNOB4=Zoludh1:kQ"jb@kuO-bNN^Kd/NF\X9PL_r;+rk%P#L:?I'R+1:ebhN!`-D0HNA4K2CS:3(J)EXQ*IBj<M#H1R[CHe%HP**CgPa35!?)11O<=7(+BWa2=-%8s[@d8Bo]"6\,94[%#OL+;!f05.Mo,M>A>tak"Nc/`1ujeQa'3QAK)idi'EO3`/!>*4aK`<g%MH@TZ9F(>P0(CH:2%gXer0c;-jMMQ6>gG@)_)qf/,8)h.(8)g@U\T;qN"u]V&"I[l,qgM3$(RiUXOA76<.02gOT<MPY5B,H4NAOE%UX>5Frj:gD7.fN=N0ieWBBL-h/!X0:MEFli'1;E1k<,f`;g>E:9<Rr##9r_4-#<\qCt.2I?19KF?#>$\j/-?>6NI*K2osI1NMg=r%TBGGU#X0!]6\,N.F^h/.g?-UA\d2]H/WVN)"4ia\<.nk6L..=*/k8V_/Y=eGR(4:l#ZA-^mP&]uYi'#`2%MCRgh#RJ`i?Jr!5l90%HLSj:.CleX,ZaF,Vhq_2b/)an8[7BB8`&h>d^(M[m7A3h?B-@H/ABa/,)E9@+l=S+/8YO25sci=PWlg?S(i0IXt;i1^b#N(%lZ\8%:lu!!W#Y7tZ.i&<hTNQ<QWJE>)\\T_V!2IG^LX@bUK'mIh;i.F2)tPdr<(mP8g:gJ5pj[7#QQEi?DPH?.l&'rk0aUBGR2'djb[)X%`BOce<@Ip*'kBB\:nXF;/<X3YG&D%1nm\_db;;W&-_<fnZ=HM-9*paT.a$4^ctX$'[?cO'>2)snG!9"XWQS0FB699=%0S>i"IY<G%KL0s**dRui&qZrL<QU/d)MQgp>'$*QL3/u1dT(<>K#X"`+((6]4YKste#ABF[@`Iad99op_c.e*4:SEVDsrYGX,/mgNZ[oJ]MX93%dT4==@7Z>W+<jq#cUo_/X[A&I&BhTHd-!hK6fU\2%)Y_sV3<f<$6V!"X3.*Ah0d(C2&j]7QbLtrNg&O.%u,?(&+1Y8$tZ)4q_OrN%5+iH43Za)AWiC>\\M12AnYLt_FSm>ACQ:/*VSU_pf)"FMW;jlW7IT*/<1'oeo*+AIA(4QRnHZ2^!GT9i.'n\`n4cB#`!DJ\e_cN]%0L4!#g:Ih^FP04kf8.A/P;(OelOL*`k=OtL&=Cq\mbFLhQMJ**[&lEIU`g2Cl^]GLg@/4H0r/p%Nh1uiB'h%X$tYrR)Qh`k4taV/%LMC+8GZ^k.M;US77G"drmgs?_.L&8i2YqY!plr;KH#7]a$M;suR:D5)l,anI6MHM*Bt0qqDW3[Y7\K6I6q8IF,!"[tP-nJ'1^72@%1QTP?A2.D&+t5pIVhqk0#Xlp98$)*te,![aL-13d`D6!fijVZ<jP/N:A#IM7;'D#J8K]pS0BWA_q)%U4Mg##Y@d,aF(qIl\5*CoK%m+Y[LQ@<#Yg9\NZHWb.0P%<-XcJhPf6L[qWYrH@TVSDFU1>q1a#&_df^-FPFg1imV1UD\']?lM"($+:G,tUBT4k/8hP,#SQVde/g%`JaFA]8;uc*K*2ODJ>qSYZq'g[&HV27kuJ?;&i!tLGaiWmRI`).9S$c;`QC6][!]2)7]-Fk3lC@@_'uBE1,FW-i94UCZZ-(p8uEj%1Qd6*/ERt*qH)D&5gH_m-<_db+ed]u@=OQ=Mbr^J&U)eZ,OYUtb'5@VCTj/&dCSrf&o16/XQac;&RAnKTi1@-LhkN1L][Z2Z_>pA%JTuSL@==eaYTN$&pZ`<QT(NolaM2AV[D^@(Q+S7`q1MR<_U4#bonD&+JKa^&k9)Vu-rWei*^`2:4[Y%b1*?J4eWK+l59*8[&;Z;$%QFdJG>J0'IYm;uQ^n$_^!>j#F!"F8!UgcWZ4t)Td+V<$+jluW7[3g=;=a+F%&'.9W!GK2#eUn!<c::SpoAbbkV#8[9PTH,IGB]$!%T()5n!Q!qo$irN!%$Qn\XWF[!W66\7oQ_aSFOd0je`i?&VG8d3P,\[0Wci)eG&uJR33_bNDE%kcq0Y2;fQA`D,p:ld#-FY88=F[P%a>Bl)pMh*cX_HMJdNkA1q$c38=_[.1>RmQt*4/GR5h*)Y6nJf0WE+W&lBVT![RW)(!&1FiMV'V]@?G9OXZ$\]]!WghVO[ppDCp^C%2e:k!<4Tp9)55O#,0pL/N`<P\#)B$5)^<"t%\oF,gG]K_o8tS"`kcAm_\$\'M62E4I-ZQ9E\>o@88@iE=\KPI9<tX/>s^/(Vk\Hj%@#)F90a;f[9Ju-%o<sW;g\qT*:?3CRN]ITR<[\2gjD-,l^-:&^[faQOn6gtGF<p!V69&=;\)c!=rR>XQ?DR:dbt&sQ6L_!aYE=)K%X`MjNR"G_(Hnh3NT<-V2K?0oaYCt4f,b?X1D_Se6G(OZEU[,9VH8+0_+@SK"L%O!1F'[f6F$.[VQ5NaY$-0Tk@&,4I,+5#Lf"N`L%LXVC#(a1W\4fqPD8Gu*i:@]epr<Dmno57/=F_2(?9:3DZ4[I-^j3),*]pJ5>kD,Z\9/AmH5#Br-b`X-UbNCf:]o"*2(:oBKbWZl\%5[&,W9A:4'e:D6?Yu[P=8F@4N'bK5l=;bnR/lnD&@eJTChn2FN>B7HsnJDNrY%hui^;V"2f6iMs>KO.aQo>/s&OAQ%#,E-uJ1*Xr%%(a>USQJ:(4p]C^@Jrb<VF3drR4/.Mc80.':l;%T'o5O3jlqsrCJ>IWWKeP=C<8DN^!)YT#!EBW<0sL&L*eP"-U$LKcKA\t\^V)b%1dd?cdCJ1hA3-Q>DDa?]mlO8`WF8H7VI0\nhP7E6f%no=(oN$`W5d;>DRH?m6IbVPa#"q3Um:E<@B,BPP;Z)9,jj9JZG[GNh\+2!%<KOJ>8O["3eN^dHp$Y$8_TGtM3nGV*pDID38+(;^'4uUu.=c:fT>`G"GBb8Y+?dm`*^79A_0VFH/gpPH1i2!op)/G8J3M*)?8*Fm%OjsYoB_ME*fJSbEFnc8k-EX_3kjo_e0/DO5\-IV1&3J[F?V&Lt,hbo>\GHA+OX=eXRSK2rTP_8=_OV3+ieXtQ5&g#/rVOC,7jW0p%@>F`6F]n&Y4l'Iu:\=R,s&S9+het&;1`;5:>*<XK]*GP5:>H:]VhH;^F3FW-!ml&4kY;/I42()8CZ8R4g#mUBH$W^&K3i?(FmZR5%*##')BL6680qP7.<bj*hgt8%GWEnFn[+ik^BNqM=d?B,+eop(fI>^`_PK/uji^k1q5#L]Y[b=M(j$_AZBL#`V"-J_ap:+Su0?rtI%-09X*NYHtM,WftTNHW\s?]'B*.i.eGX.TlX(++\d1nIa_eJ^$p7H31!Kg86sG,4gfSjod[)A7pk&8O@QVS:/6!*>\7GpGu;@it8\%`Wbq)iO+dUA0<R*D9YVdO?R@#rm^D9T-fVJ:Bh]7,0XS5SsrA/-J;E`Gr1.$0l_h^8/dRT7!P8?9!@<YD!,B?gkbYpY!0.!fPE%T%1jt4Wd5E&'V""^Y`^>%JG\F3n4LAZS*np6c7!]q+NAgG<q$_[?o/-%[nIc^q7pm%RS3d*[a4-L;B\!m$9kp!VKM?%%^>^Fos"6Su%HAVR&:qr3NpeeR:7Y?+M^n&(mMEDI8$0[ZJIaDqE?emp<@\aUVTf4uQpQ9Ak)9YFS;IKSogVjCOD9-h)XR''%<%/B9a^=,jB$6OX%P-"EPo+Ls&TT>CsS>f7)(_E@bOX(.L``9%W&^3bNlTY/g`XQB$4"Qkr?iRK:5d-L*MM$#74hI>J<;Ur->=%"h!1i6/28B5FMBD:3%q3s*^%/W9q8nC+75#.#TPp.B0N5$k;8:6Oi';`iE7n!&*UoWdF<LUa;&ridpUX>Hkd*&A;ZKS'QoQL[UX`ET0#"*l)?2t0K,#JZ8%1$#kOBV\3SR_aFTa[lqM[,9sd#\_/l43o5`)UM3Q41g0GZXJd>8mUJhMSsb:?Z_9H><I4b3'&8[?c3!*FM<tgGcY<dmco#J+cu''%%/A4YqY2gb*qIh1?t4`0P+]pK25Otm@%@)[Y9.,#rtb'V>Oi@mrZm(WE'll$$%q:8U.goVEC>CL@Zc]fi1\1g33"[Fc4D+aOSL*9%UV\qj*f2s5!@G)gi?3ZZlJi$cZGHo<;[oeVe`g?T.EcEq!c6#@YAZW-nbP"-3H[?B],WIe>0Za!VYM+/^</)IG_o(Q<J"_T<UtmS%j:_O8$U9iee`UuI2S.ZsdZHQ+bB/SG.iS-12/^YR[qaXBX3uCoob!!=.KL(9bPREu6)q^4[EmX0WfEZa((R>2V$nF\"\U5T-G:-:%L*n,YVK"G$>FdK2FFiQ("YJ>>:+NX_<EAb"Ct880T^c.S`tu^?M#`ai9s`)lIUa^i4re!%$h$e)!6O!+9DA$Ene@2dh*j-:)]r]p%V7bA\O$ks1MlOcf$16c?!"#^h7nnA)QF]t(*1&^#@N5t*O:]c3<)Qj[fek4^!&9K?)>ZI2YI%P;SM?-pZL"K/e5*Ar)?%d[o1ZMd%Zp;d,ac[7Kn4l(f`ZdmSUd`#0"<mmfD+'fR45R=)[?/j.:]9=3etbF+Qt/jcNs"AhF/$Mk2$?\\kfBoh$CPuLCQ+Z`"mPk,^`jrA%[sgNaoK&4KPR9PmrX5k>-TDq`FVnSi0Fl[V[sls5:o_-4UI`fIQdN5dX[peW<h`+4U'dIg-V0Mu$I5>Y)NC\b1]s4.j7)FP9g1i/%*/on=%'`hM#A`F*5@-!og:@[ci<KbSh"hGtAmklbIf/VJ@UO<fE'!0X8VgWI4\\5hGo'jPeE4bX-G*kB'u6_T7elo739kV6)LVZ2%.kNq)&/1/_4ACPL^>H;Q$miPl:*Y(%0*r[4"HT0&1YFPN#Z`kZS.frj6#Htu@"\tRks7[9!bH2]_ql]s4aD3e.3RBhb84@X]U3j:%,1B0!!BkQ)jQk#A?X5@dQ[S%,#92$N015)g5(VVIE6-B^p:q5r&je&Q6]c%!VoDA&7NS<dT<tj2"u%5-%/=^0<ub2ET"I[h)+UcI%?)<'F0pJc`UGhb>+#S4F<iPhrI*#?7%hG@sbZ)agkD&UY7nf0taJB)dfpYNU[RU4'>*"_0Cmnl7T+EXgEpH^>HfAS2NQee?B;;4X%`QQD8MDeC93nZ+Z/HMIm)8T!dNiMh[VpCWg<"*K<JBgX*V0=e\!uWORc]nts9^"N^DID8ejjE/LJbC$KVHTGLdc=uSf?tu@Bkl6W%A6-sp:r`VrF-3GOB2=/E*Rk'2T:d?#AS.+6g1#08I((\e%T4gYPKQ(3_A&#*G"huf5j/X%9r5I.$%g+,Y'CH]j%rb&cP'LRj,5[J%Wcpj)55F-mnWfdhV`mQud:U`PA(m`D))T(lP,'f%mC'YO!NBd]#L2p2=.o204a/,6l]?%eaLOA7</)\8]fr_pY(DimCtY;A1>l)R%,q0B@b+tjqFpuo!g`t*llip?l*4sZQUh<2,8s2#k4GHVZ30MN:Q/T%m'/2sW3]Xkror@EBEpS5s2Huc89U?5i5B\9!$np@m-Gf).%8+UfrH\'d;&1Kl2lA_0H9VOSbn/4Z=eV]j@'6KFVf)5I.a>LC;!U:ZS)"TfD>[tRsW;.7!fA/J_6QbpYH.o_)VrG3'nmFZ1nB[)s%-]B4rDQJItRDlXa(;Gq7K_+V>Ws7+p.pWp;EFbr,-5gm8_).-.'-e/t4@JI:#-\O7!90piP@oBKo#WeZkY?ok%&oBt":U#E-k76/%?A$[BP!fJo0<T:JY:T4W;fmW[\#O"I">XY*C7>aKnALi*/tsgE`^J%O;B>O5r^-fAV?JVh7sL+2bQ]/h]<Nr:f*d4FV_'H+&DJb0%:N%-V_fO`_([F1)][nT9a=lJ;.8LNuWWR>@d_/Mf[9tYuoO=hmThhR=Z92>FmpCY(EB7d/INV@NI2tLZUa[[BK(L0]$"^!V4SYQU%&7!n>VL99Qe_fa?<,'WuY2hmt7VciZ.V4TS]'="9A]20%KO#81V)-%NY@D=Q1!N__OTc8JHrSg"pSHh>HbNTO3gT!t^]4+@6p>XE%?c2'm_[#:ZgD_$H/drY*;n$<U1r'"N9DR62IC<8#JaE21L)C(,:T%c>GJs4K$qT$?E7@n@lh$ItgZ^4KOHOcJd#U5<i.r<H)PMJ)%A18Vl:.\SYe.Leu[jqJm([bJTh@7%A+#\DYm4^fpI=kM]DCIZPFAg[F"(I3%6?sJ>PIK'[@l,K=;]6n9Clb.1i+$3XLB:UiKiC:d%]CPm>"Ti`[+$%.['D?&]76ILj0*q8hcn/BQ'@GesO8)/8G%Qp(9L$:mlE2Me,oRLRS[9Nn.&Ne0g975BjTqqneM=jU_%3+o(I4%L%k5mD6YEs;[&>#c$9OT8dgFbeC*JUtT>95g#E0Xk9?<JceF?u!Rgpo6JD"1,dUj>Q@UPCKQ!"dp7V(uiN]a$XR,R6QPEL<Z_I2JC0%(Q2#JY;X7*34*n-Q/sKI60/@G?]\4I_7\MXNb<BLIpcW4#U8Ree+'5@0PennNlY5,E7'>$W]XtH%0Qt!p68P);na*eQ2Oi/02)Ec%!!k1t>fnX5XiX)OZ&0a.Jj5@aKSeJ$NS7s/`EUe5?UXEG'4bETI):MYV2-M#\stK3'&P]EVOZ+QOZ9)4S9%Loc0K=I%ZuW)R<"YV%(I;?-n0tXZ;\$m20%-!-1ebHj,dD!LEg)?+Z7._P(3%_3'VFn@]"XPPLf3=,NLFmHY7+?I18f%";f:l5II-DnOdf$)VmG:a;,_@I%U*VVF]EU=V(t,s@r^C29Pae,i-qq1^jNA0NbGbp"Q?*qS/I+<((L)o_::?Zc?>V\E/%=UoRSDTQYiR":<Pk,Mf=CAp,+1>13/SOP%P;GH40D'S_ObP1hbd:o+El9l\$p74k:$]mOC="R$R1moN?ga//["Nt4eNJq\'W!P"pWSS(cZG2Ur)oT)A6Q<e`Un=(in[LuR23+U%abJKn4u0E_GEcW2Dg[`HOrRf/b"%9J:1mRU4l)#qq0]c[%%<HEKci"-N3MQsmXMW[<P58%)O`N8M;od-h)-B/o\#Y/OX^bC>UtD\%;A_>k$EML\_V=-TiN8+qdOStp,degf7T5:XKZ`YUXUJ)ba]H-gJ"7Cj'6Uq+6P8`Y+LS-(DSN5ab7c<V2aACZ+"mn)W0as)C:[O!%QHq1:>BXEuQ.okmb6$o7!F83#87d+g7ih^d9hG\H4a;ib7'3I\qpDSN]-co8'#b^iHLs0MA6O((+aTQBOWs&$N@4UhC,L:(.jsBY%GCC1FOWDJ2S7i<4=U="JSUa4&N-$HK?!],hhGrSphIu@-4'GnhDEE=D;?:;mYuVtUma3"TrOe5Q7^*b<;,dk<rGU\?d8V>DJ5_q^%!UTHL9"5*t8.ec$[$^MV#k^_jCnTiK,0e-_$+TBS?1!tOiG>'!NQ);n`[:j!F*\ci8jCk(j0RVERFhOhOMK&hQcla0Ep>^D;^N_g%DrYNrDfs'aZ$+*NZ'JU^m^AYT9XIQ_5]"RgKMs4Bb*7`dFisLSplr&BZQ_<=3b:&u(H_(h)a;N[,VO3U_$FKj!UQclp=':ig.aRt%e-7f8C>aCID?=a(MDG-<b>"U3^mEnsTnET.Ld1%R:^]83Y^gr-2Uhfb>E(qXJ:Wq&m`USH]QLs8>fth+7]9dYUFDNG1jb%"*9JOC%eVfp059\2CL`OdUj!i>;D?Dtk"Xf,[^`+'W3,[]$%;l9C#us<0j;3WLe>Wg#$(\jjXhk8HE[2MA)eDoD/(itE<\S)6gUgY*PkNaI%"hXEW$MO"1.i9LgVgr@_F21^B_n4?nUs2Hnr#E1t6+8n?#$$E4%>bc<fDo-#')aMjGWY.f#W*$ZZ0iT)[H6`"H/q*TAMaY&YtQEc%`W9Fj1;Ym*`_k>!YLD)DDjRXhhJt-ArA'[)b,Q,,;$/cX)QQH0>RlqHec%`.-mCQ,+J\9O@h)Ar)71<t-X<MqMhGcdF+3i%qpiUr%$rJkWr)"(qe,/&O1)\.S/=fgM(ue_]!/t?5]j^Uq6S5ZJTbZ/H-mJV1N_YI4KP]-@c3RE1Ug#.%^.P"UnE[03`VXI+S_UPf5Y+!;%8n[GnMFhaP1OtQHnflR7n?&*rUW@7t's9*Y<e24L!`&g7@iS3h>%Pe0=r@D!^;!kaM/HCu1?b_o?+e<m8t:0OPo]C,,ll2YZJBaG%;`!T)]APj<0?XIQD$^7!j5)PTU'LtA!%!<X1l`o#X#!4Yb0,Ps7(4E.#t"m'mS%^QK-!%anP*pgTo_UQSfTDiUu(7S&e%+`o=;m7%8?`(VQms5<-R0E:kiS`a27Zk?m,RZp^jgD7?&&28(B[Q0#'k!CMmrG_:DT@aS"QHhBVoK*+TN.`W*s*8Ua?qS_.CGOUX*ro1dFe+%Wiu&Y-D/cn-3h-T<?Q4=1@`r0p#tT-B0_g=+F8)'9TU;9#W24u.67(iP5QA9MO4W=13me\5&5_OGm]EG?5_C?7A2he^&`OGi#kcg%`DN&'[GZ/f:G4<W:*Ifl,V&=n_hLJ0"tANq#5Ekr#cEB_eCbYgqNM0Uil%!Rmc&jk`C/(u3!$=jIMnd8q0GAYQHgJ\J6^]R.MYkc%h`P+g1)Z1<clegB76fJee(/;lWK#L=j]Uh,<KkHa(B^BYLTEAY`S14G-_K+l#r]37,G.p*a\qX,L'[Qr3]0/7S!)(6->fd?ju(\8%kMOp^F=md1oMcrOMfJ:,^3']EIG!"a5An"td^pVgU026C+tMsm[m:.Sgb\5<&0Q6=mIrmJ%DNFr5:Iq`4a2l)+gc:UrQVXlm>utU%qX@BR\lP_9$PD<1qRmI$+\k;;)(IbRaKO*.Y8U?=G=*pWYm5S8oL1`RV^kD7L*e!=JD?*I66?8C/2A@Kno]V_SurLCkpJh<i/^rq%aZ^AJ$(6a`LSg!]6kP<(&<TXF<^nl4"OdL@Af4PnT>8Jt`7M$M/'G_=Xu69kE6djQiV+fo0d#]1_=tK"25.D'`PV4kbJ3;)O0hm2%1$F-0M??b#6?)J&_eMg0b=#g(]EYKWk=>gTV84bO<?T6T(3M.?!0u^.P,H(R=9)k9JU/(;p$aMo/nYJU=86V@o/O="!=_6T"W$"W%PY\$RpOJf>ioDOL.5^\8IppUik1ha8$.C#>0p%4r)_oGKWaWJ2Tqu<];>h:hctCc9?o*Q[(N5gVDj)Wp1F.pr-Ossbq\6!*k;WUa%%+k(YTNe$UDA$K5Y9/b+mHn5&QimS"]mL,V-1n;2C(_'$;F'LTXb17W=9TQTCY@?D-b\e!$f5Id452dP4`._YZZRA:&9bAKo50`)%WKDlV5`tAG>PR`[9&lsgi?qTNXSh<AZL[Ta<hF*fY>(X'`QF6CYYPT2+M^)l[ds%CY_4"Kb)`I.8H,,[rn;JG\!<T#3O/(+SpfdU%s'7[E#/rAOIE:HK-tsMb'<?"GY)*H=9f+7T0d5%7jm%_:'o*u64aSJDoJWUVD6B>\3\?6Q817r%X9U'Zn"WjQ'_+mQs8RsI/c:'r%LY"T`j'V`/hu<#Xs,TDDQiH+'rC^ULpKt]*RjD/%`fV'(I-A09*DAgmfC5^0IJ#IgSr\9FOtUl>E2UnR6HF^D."_m:lS+dRP09/U%B(Cj(hrSnh7RnJVGUo#2\+6XC5JI(jo^,h6NHnX=Di/esMMA,J>pYFcqM#PJhFe^kg]rfVodUu1o3YVCS)8#g*H`3.XY:79b-uhm%DcOJE0lBgY-V8iVoC!T+&i2RZlA/'g37t03*AMHUWEse-)aX`SG"fp#kSQ6I]G8T*>PZj2QbN:*H/B>+^8]&@G*tCc;KiU3.UImk%S%$V]c!##FAos!$+k@"\@'+hB#Q&\IrnPpVDXFtbmP>hsE<"5B&i2RZlA/'g3;C!t*GO<um&JV2KdM-8OZ,=C6P1D!jl#1merMrN%(lpM"RW!rU8o`2WX!AUm^3k$e&D7ha"!S+0ZAs&E*V7O*@;EpRgAn"N%R[<4[Mi:!htiIX1A^.>71l.db11402^*"*ENka5*RQgp%..<YM0C)ihei,st'fKR(Q#HWB3Z3?eNDd\P::WFQod5>D1Ci8#XX!L529LDW3bZqJg>ln&p!'ktqY&L$QhfcZM9e+LI(nhrG1u,i%,J"LI#?sj&N`\qj[b*6L2VDhUFKAPufNM`(Cb9qu#Ps1!LX2oE/NMG*Y-E0q-T[ijpfaD6>"]:/[7!%-8muk\>12J9Y5X&h+0M1P%(`cU)if+KRhT!$2]_!aEc$EusAj*It1HJ"M&0!LeTOZu(po%?5lj)*Z@pjCX@>Hd-)-@j8HBEQ?k*elsk*h9cbr)9"I-NNYQsll!%(c0C3+V0!(LXFs7s+-/l0aQL50Z4m'K5PORlNMTho-9gU*jWt2NE[$k2fs0d6YnoGJ7d):V"`OedsSn.j-q8dhJW86a=2hd"3q]*%)7+TFi*Y^jh\M_)CHM(paF%Ta!K@>$T[,d535+F;T&a>$]#T-YTa2;J3`"P7,Ggs]Wq6fih'.rtJ6rG@YL\e.1Pjjh-CU3_Kct9b%Y<]JZcI9_*Q+Ag7VO',m_0iD47Yr]%24&7.*!&X6fk"DK9#!,*j1+n?g4u(L)+,!bISgOo@IO\UR#9o;8B'Tj(Js(WE*YY&RWoO&%Fu^\i14IfWo%FEW:e*9Y6[f&M4nkdF1/$dJ[&L,MXt'g@L)WqSQdr,.cS)SSI)\ELjdG1N&S@V9i0&Jk@au`-"ltJ4-m@r;Z..WV%SM$V00>Bh?5iBKP1<?c5@o=[X-00kT-m@#\j(Vf*>$XJ`dX[!35$j^XoeRglB$`\_*NqtqaZHB?J5:QhkqV[]`t:PPo2!J]cM;(J%Y7q">f,TmD)*dGT<p7^p?]oUped3HF9`r+]NG/s"Nj8[La8p6FS=^:YfB@k20/U=8"+H@U.=qrYGQt:&lpumRM/T]h%UZrY5_R">%f<1o8XW`27Y*<V>bAq\-6.Z&nP_1.p[Y8aT#Is8J-oEKF>,B<D01lmr!?'\J\8--<prj$"d\-Ko&tU`qa-gR#rBhdicZ%s3jB+Sl%auo7Wc?TW=>02C&ZDo-"_68ge/Md'?H(["aP%Z$Gh[5fTW1R?cquRC3n1;@7"O/uVHo&^pnLGi#.<8^d?G.^[NBKo!4l20g<Dr;U%j9E^c]aQ)7:?!.up>-AAN*gu0mtb<0bULX7q/0r,ke5D/Z!$[f229aC)@*1JNh9[uSdR6dU<ot%h-YQMHR+6J+dY@u6KA6V3\nqo%Ud)RRZGjr_.jIR/ic@%WdWfU`oS[KSF.;3J=@9U74NL$##\[a7UHKtX"-)Ff0Q'cVdc^lZ,G@5JUpS\ih8,/=f/1&@ffVbI@n>@6%B;0Nj%C)5tap?a>4C'"3CWHU90>9jfnc5t.O"spW3aBZjEtl\_&07`W)3M2Zncn!lH:rLMd6GD0#Ibu6/oBkto:@^%`S%0bYHS8^%UqP!f+SD],NZt1!L>X4<O1e7C=ZFZ:XS,\eaH/OcRh"aP:8,d0R[HD0D@:JoQA7B[kWBV9Mr:'C68M?2dp$/J8R;Zkeg'Q'cY>1P%GDobl:>:Ph9)PF).sHpZmd2XOGZ\o)P&gWtTWNM\fIWMN)h.m7MTr^OO,fu-E_icm9?%R1BiQ3>NQrb-l%O)6`Z:TD*2)KC>+&.2%[CG#c:2sQ%RlN9"S]tjq\>\ctJl2!2_kY?a/+gip/5$h3-YA"G@$7h;n8-[lMp"26;^)LMoGVW@/lM0AEU_/8*-I].M=+XjlPkEl%#`GHaE']FG!"$2``0=ju6l55,RNH]fR&IL"MaSi:afMc]Bj)0>0\\6GcR7F3l_Fr/:9Mjt$jcKkhcUh]T)F7J,'feJ4Da#kj6/qP%a8c)):]L90a++#rs6uXErqufojfe^L?[_h#TDl;as8?=(rEoU&?[ht8YM]?YTDnb<rT0))s2.)!j$3S>TE"K>mU,tgqnN-lTDnX.%s8&'HrosI\a8[+"/RgsEe"?X,s8"\3ra3u(W1a~>%AI9_PrivateDataEnd