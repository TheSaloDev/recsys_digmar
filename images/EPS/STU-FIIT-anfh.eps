%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: STU-FIIT-anfh.eps
%%Creator: Adobe Illustrator(R) 14.0
%%For: Juraj Blako
%%CreationDate: 9.10.2012
%%BoundingBox: 0 0 233 51
%%HiResBoundingBox: 0 0 232.1114 50.6919
%%CropBox: 0 0 232.1114 50.6919
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 14.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 14.0.0 x367 R agm 4.4890 ct 5.1541%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 28 8%%BeginData: 3838 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FDFCFFFDFCFFFDFCFFFD12FFAF5AFFFFFF5AA9FFFFA961AFFFFFA9%60FD04FFA8277DFFFF527D52FFFF7DA8FF52FD0FFF7D7DA8A8FF7D52FF7D%A8FF7DA8AF52A8FFFF7D7EA87D7DFF7DA87DA87D7DFF527DFF7DFF7DFF52%A87D7DA8FFFF7D53FF52A8FD1DFF5A14FFFFFF1436FFFFA90DAFFFFF3614%FD04FFF8527DFFA87DF87DA8FF277D7D27A8FD0EFF7D27A852FF5252A852%27FFF87D7D27A8FFA85227A82728A852A827A87D27FFF852A827A852A87D%7DA827FFFFAF27527D287DFD31FF5227A8FFFFFF27A8FFFF527DAF27FD0F%FF7EA8A87DA8A852FF7DA8A87D7DFF7DA8FFFF7D7DFFA87DFF7DFF7DFF7E%7DFF7D7DFF7DFF7DFFA8FFFFA8FFFFFF7D7DFF7DFD32FFA852F8FFFFFFF8%A8FFFF277D7D27FD72FF522752FFFFFF27A8FFFF7EF8277DFD0FFFA8A8FF%A8A8FF7DFFFD05A8FF7DA8FFA8FFA87DFFA8A8FFA8A8FFFFA8A8FFA8FFFF%FF7DFD04A8FF7DFF7DA8A8FFFFA8A8A8FFFFA8FFA8A8FFA8FD13FF5A14FF%FFFF145AFFFFAF0DA9FFFF5A14FD0AFFA8FD16FF7D52FF00A8527DA85227%A82752A85252A852FF52527D5252FF277DFFFF52A82827A8FFA8277DA8F8%A8A8F8A87D7DA87DA827A852FF7D27A85252FFF8A8FD12FFAF5AFFFFFF60%A9FFFFAF60A9FFFFA95AFD04FFA97DA8FFFFA8FFA8FFFFFF7DA8A8FD0FFF%A87DFF52A8A852FF5252A87D52FF527DA852A87D52A85352FF7DA8FFFF7D%A87D27FFFFFF277DA852A8A827FD06A853A852A87D27FF7D7DA8527DFD26%FF277D84FF7D7DFF7D52FFA85227A8FD12FFA8FFFFFFA8FD07FFA8FFA8FD%05FFA8FD1BFFA8FFFFFFA8FD2BFF527DFFFF7D7DFF7D7DFFFF7D7DFD1CFF%A8FD13FFA8FD2EFFA8A9FFFFFFA9A8FFFFFF84FFFFFFA8AFFD04FF277DA8%FF7D7DFF7D52FFFF7D7DFD10FF7D7DA852FF52FFA87D7DA8FF7D7DA852A8%FFA852A87D7DFFFF7DA8287D7D7DA8527DA827FF7D7D7DA852FF52A87DA8%52FF53A8FD1CFF850DFFFFFF0E61FFFF8414A9FFFF6114FD04FF52FFFFFF%7D7DFF7D7DFFFF7D7DFD10FF52FF7D52A87DFFA852A87DFFA8A8FF7DFFFF%A87D7DA8A8FFFF7DA85252A87DFF7DA88452A87D27A87D52A8A8FFA87D7D%FFA87DFD1CFFAFAFFFFFFFAFA8FFFFFF84FFFFFFA8AFFD04FFA8FFFFFFA8%A8FFFFA8FFFFA8A8FD10FFA8FFFFA8FF84A8A87DA8A8A8FFA8FFA8FFFFFF%7DFFA8FFFFFFA8FFA8A8A8FFFFA8A8FFA8FFA8A8A8FFA8FFA8FFA8FF7DFF%A8FDCEFFA87DFF52A8A852A8FFA8A87D7DA87D7DA852A87D7DA8A87DFF7D%A87D7DA8A87E7DA87D7DFFFFA852FF52A87D84A8A87DA87DFF7D7DA8A8FF%A853FF7DA8A8A853A8A87DFD3DFF7D52A82752A8527DFFFF7D7D27A87DFF%FD047D52FF2752FF5252FF7DFF7DA87DA85227AFFFA87DFF52FF7DA8FF52%A8A8527DA87DA87DFFFD047DA8A8A87DA8A852FD3DFFA87DA87DA8A87DA8%FFFD06A8FFA852FF7DA8FF7D7DFF7DA8A8A8FFA8A87DA8A87DFFFFFF7DFF%7DFF7DFD04A8FF7DA87D7DA87DA8A87DFF7DA8A8A87DA8A87DFDFCFFFDFC%FFFDFCFFFD11FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                                             
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.2-c063 53.352624, 2008/07/30-18:05:41        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:ModifyDate>2012-10-09T17:22:05+02:00</xmp:ModifyDate>
         <xmp:CreateDate>2012-10-09T17:22:05+02:00</xmp:CreateDate>
         <xmp:MetadataDate>2012-10-09T17:22:05+02:00</xmp:MetadataDate>
         <xmp:CreatorTool>Adobe Illustrator CS4</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>56</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAOAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqk/mfzPZ+XrOC&#xA;6uoLi4S4uI7ZVtozKwaU0BIHb8Sdhl2DAchIBAoXu42p1McMQSCbNbIjzBrUGiaJd6tPFJNDZxmR&#xA;4oVLOR02H07k7AbnI4cRyTER1Z6jMMUDM8gusNXgvNGh1aOKZIJoBcLC8besFK8uPpipLew69sZ4&#xA;zGXD50nHmEoCdGiL80L5T8zWnmXRYtWtIZoIZWdBHOvFqoxUkUqCPcH265PUYDinwlr0mqjnxicQ&#xA;QPNZ5c812evXOqQW9vcQNpVybWVriMxh2A6pX5dDuBQkbjHNpzjESSPULRp9VHKZAAjgNbpP+Y35&#xA;n6d5JfSbWTT7rVdW12Z7fS9Os1UvI0fHlVmIAAMij6fnlDlJg/m7UP8ACEXmBPLmpPdyUroJSJb5&#xA;aycPiUycBt8f2vs++2KpX+Wn5oQefrR7+x0W/sNNCkwX12IhFMyuUZE9N3NVI3qMVS+T88PL6eT7&#xA;rzSbC7NnaaqdGeD936pmDhOY+Pjwq3jXFXo+KuxV2KoXVL8afpl3ftDLci0hknNvbrzmkEaluEab&#xA;cmalAMVY/wCW/P8AZa7PosMNs0ba1pc+rRN6iSKkcE0EJjLITVibkH2pQ74qktr+c2n3Gm6tqJ0m&#xA;6ittMtodRQu0R9bT5rmW2NwODNw4fVpHZG34jFVeT84dBhfyqs0Ekf8Ai26mt9PLOg4xxy+jFM1T&#xA;usxePiB/N7YqmPlX8wrPzH5l13Q7SzkQ+XpTb31y7Jx9X1HRUVftHksZevQCnfFW5PzBsk85J5XN&#xA;rIbl7tbMT8l48m0+TUOfHrTjCU+eKpNov51aLq2j3mpW9jOn1CfTra5t3Kh1k1O8+qR/QAVl90YY&#xA;qibn82NOgvPMtmbCZrjytaX17qSck2S0SOWED3uo5CyV/lNcVQV/+dFpYReUWudGuTN5tllit7eK&#xA;SJ3i9OeKAE7qH5fWFai9BXwxVNNW/M+w02bzXFJYT8vKlmt7cB2jRrhHQuDApJYptx50pyBGKoif&#xA;zrqaeZ9X0GLQZppdM09dShmWeKlykhkSKNEryVpJIJFHLpTfYjFUf5K82Q+a9Bj1u2tJrWyuHcWf&#xA;1igeSNDx9TiPsguGAr4V6HFWI23536ZceXtV1kaTdRpp9tZ39tC7xcrm01CZoIJFKM4jPKNuSNuM&#xA;VegaRey3+l2l7LAbaS5iSVrdmDlOahuJZdjSvbFUXirsVdirsVdirsVS/W/MGi6JbxXGrXcdpDNK&#xA;sMbyHYu52H8SegG5yzFhnkNRFtObUQxC5mgq6rqum6Xps+o6jMsFjAnOaZtwFOw2FSSxNAB1ODHj&#xA;lOQjEbssuWOOJlI1EL4dRsJrBdRiuI3sXj9ZbkMPT9OnLny6UpgMCDw1ukZImPED6edofQde0fXN&#xA;OXUNJuFubNmZA6grRlNCCrAMp+YyeXFLHLhkKLDBqIZY8UDYW6P5j0PV5r2HTLuO5lsJfRvFTqr0&#xA;9+o2IDDbY+GOTDOABkKvkjDqMeQkRN8J3YF+fHlXVPMmh2djp3lMeZbgGZorlb+LT5rCXiojljaS&#xA;gkDH7S17fSKm9kv5WaP5n0b8v9G0zzRcG61y2idbuUyesaGV2iQyftFIiqE+3U4qk/5C+Vdf8q/l&#xA;np2i69a/U9TgluWlt/UjloJJ2dfjiZ0NVPY4q8suPyu/N5rK88iJo9ofLl35hOrnzJ9ajHGBpA9P&#xA;q/P1eXwj9n2/ysKvpXArsVdiqA182g0W9N5ZtqFp6LevZIqs0qU+JQrsinbxOKsFj8zflu7+RJTo&#xA;foTa1GzeVVkitomt4VeE1FZVChxLHIEj5MR+zUUxVu11n8sdM0rzTqNtoItNEWdrLW79beGO2u2M&#xA;7WsyAlxzjSSR+dQF3YitcVQuoec/ydXSNE1K502GfT7hLq00SUW8MiLHo01OELBiqr6kIMPE0Pw+&#xA;2FU70/X/ACHa/mBcaVY6aYNduJZLO41WO3VYpLkw/pGS3aYHkz+m3q7inXetRgVLtS82/lraJovn&#xA;99Ge51XWbSSewuYLZHvxaw2zTTO3xCgjgqG+InegrXFUXZ6p+XD+Yf8AC9hpcUlxdw2l1KY4oUhb&#xA;6vGbmzVubIzyRpEHQKp4ilaYqi/KWqeSfOcWt3+n6WSt8EsNcmurdY2uGWGjWstSS5hSTg4OwJoK&#xA;4qx/XvNn5Q6JotnLqWlJHp1jdanYWC/V0Iin06ZprhY6t8PqT2imOn2n49MKsh81yeRPL3lnWPMu&#xA;p6XE9jqawJq5SKMyXKXEiwRrL6jIpXlNvyagFTgVCSfmZ5Jt9f8ALrNaXC6r5vtbcWFx9XAkMDOz&#xA;QxzVb1AFaVm2UhaknbfFUTbefPKGmDzDpGmWstPJ0Mct7Z20SKvpSBnY2/JkVxHxbn0oQRiqB0yf&#xA;8trOzuYovL406HUtPOv31sbVCXt7WUFWdITJycM3NEWvXxxVP9F896Pq50QW8c6HzBaXN9YCRU/u&#xA;LVolZnKO4HL6whWlajwxVBP+aXlVf8QUaZ/8MzwW+qcUG3ryekJE+L4o0cMHbtxbwxVcn5oeV2k8&#xA;vRkzo3meWeLS+UY3Fu/D1Hox4xyMV4HvyXFWW4q7FXYq7FUHqtnpF3bpFqsUE1uJY2jW4ClfVDD0&#xA;6ctuXLYePTJ45SB9N35NeWEJCpgVfXvVNRhsJrC4i1FY3sXjYXKzU9P06fFz5bUpggSCOHmnIImJ&#xA;Evp62qQQW0VtHBBGiWyIEiiQAIEAoFUDalMBJJs80xiAKHJD6RaaTa2EUOkxwxWAqYVtgoi+Ikkr&#xA;x23OSySkZXK782OKEIxqFCPk7T7PSLeW8OnxQRSyzF770QoJnKgkycf2iCDv88Zyka4r8vcjHCES&#xA;eEDnvXf5sB/NfV9RtPMXlKwgu9Vt7K/a/wDrkWirzupPRhR46LxkqFY1O3TINqO81ahqWkaR5Mjs&#xA;r27H1vWtOtrqW7p9ZlgnDs8c/wAK7nYMKDFUbPq2or+btlpAuGGmyeX7q7e1/YM8d7bxrJ8wjsPp&#xA;xVI20zVm/OA6X/iLVRph006z9TE0YjExveHogenX0eHw8a198Vel4q7FXYqgta1DTtO0i8vtTcx6&#xA;fbxO904V3IjA+L4Ywznb+UVxVi8elfl3LqnlXTEWe21PR7J5PLdr6l/aSx2cJhjdZFLRF1/cxgpc&#xA;V5BTsRyxVDwWX5YT6Zf3SRz/AKK1+5aa4VzqKW1xNCHv2mgifjGFYQtKZIVCyU6tXFW7/wAu/lbc&#xA;+X5IbmxM+kadFJfNCi3khjj1KcXryKkdZDzlj9T4RVKfsjFVSCL8tG83afryI6eYtXUXGnGQXsfr&#xA;epCYTKls/GISehFxd/T5qlORCkVVQWreUfyo02y07ynqMV0LVXH1C3+s6pMIVuuNiIzcJI5ggl5i&#xA;L03kWNqnbriqcaZ5f8ial5l/T1hZSDVtHY2i3IW8t4OcCzWdFVvTtp2iVpYuYDFQaVG2Kus/M/5f&#xA;6DFDBb3a2qazd31xAhWdjNdfXVivCOSsa/WrkfD0oaqOAJCqU67ov5TX+mXtpq1hLPYWl9ceuhi1&#xA;Aq19qc5WZYSgrNI80nSLlwPTjTFUx1XVfy78x6dp/lq/nM1nrccM1hAPrVuXEEgki/fp6bRSLJBs&#xA;rOr1WlOuKoCx038otQu9KSzCPdeXLV/0YVku0a1ttMuPq7/EWX7E0ZQ893FftKTirtM078ppJotQ&#xA;02zeSXznBcxG8hhvm+uRXjmacXEirRGrX+9KtGvwrxXbFU0I8jTXtnDEJ2vLuwm0u1NsL3mtlHKs&#xA;cgZ4d4Qsqgeq5U+DYqp6F5a8gahFpc2iwzRw+V5bi006W3lvrVFb1lNyhYPELpHmgHqF+aswNa74&#xA;qioPyy8i26aosOkxxjW4JrbV2V5Q1zHcO8knrNz5O5aVqSE81GwIFMVdc/ll5Fuf0Z6+kxu2iw29&#xA;vpL85Q9rHaSLLD6LB+SMHjWrA8mHwsSNsVZPirsVdirsVSnzL5V0XzJZRWerQmaCGZJ4wrMhDp7q&#xA;RsQSD/XfLsGoniNxcbU6THnjwzFi7RGt6Lp+taTcaVfoZLO5ThIoJU7EMpBHdWAIyOLLKEhKPMNm&#xA;bDHLAwl9JXWmkWFrpMekwxUsIoRbLCSW/dBePEkmp2wSySMuI87tMMUYw4B9IFKPl3y7pfl7S49M&#xA;0yNo7SNmdVdi5q5qSSclmzSyS4pc2Gn08MMOGPJT0PyrouiXOo3OnQmObVJvrF2zMzVfc0FTsKsx&#xA;+nDl1E8gAl/DyRg0sMRkYjeRsrtQ8u6ff65pOszmQXmjfWPqgVgEP1qMRycxQ1+Ebb5S5Deu+XdP&#xA;1v8AR/1wuP0Zew6jbemwX99b14cqg1X4jUYq0/lzT38zxeZCZP0jDZSacg5D0/Rmljmaq0ry5RLv&#xA;XFXf4d0//E/+JKyfpD6l+jqch6fo+r632aV5cu9cVTTFXYq7FUu8xaZp2q6Ff6dqTFNPuoHju2BC&#xA;0iK/GakEdPbFWLS2n5axavovmUXsVtO9qkuhmKQRwNZwRtHxhiUBTHTUKnavxDpiqy38u+TdSsJP&#xA;JdnrdyX0Z/3NvDMi3FpEsJtvRjYx7xLFMY/i5EV61piqMuofKFhPdpLrLWdvKiaFdWLPEIvVSzM8&#xA;acnjMolFrJzFHoR2OKomK68mRX+mp9dT61o2nNNbM52SyljUGV5CoUApCDWoxVL9am/L/WLnTdZu&#xA;tZEMU08dkipMI4bmW2mF1FBOrrUFJY+QFVJrQ1VqFVOdIk8paTfXOnWU0KajeahMt0nwieS8njbU&#xA;WRyACxWB+S16JQYqxbWtH/Kx9MsZ9Qvy9ro+pXMVrcI5cxag98lzNGSiNRxNF6dP5SV74qmut2Xk&#xA;KwsNR+uXqaa82pRz3N8hRbhb+PjfRfEUbmY0o9GVgErX4a4qh7fy55Aj8w6J6Wos2uaOqW+nn1le&#xA;VvrEU9yefwnn9YiSZm7EA0oQKKoVPI/5c2HmS/0kXU8eteZbS7Sa1MjVe1uCrT+nROKKGjJ2P2nJ&#xA;6sMVRuiXP5eWGk6XeWGpcdLjvbj9Fl2cq094rySRpzXm60kZx4DetBiqJ+peUtP1OG5j1SS0u9Lg&#xA;vXuFV1pJaxyx3FysysjVSJ7hDVaMOVK7nFV9hqHknyza3t++rosOp3rTXN1cSgq1w0KseIUKgVYU&#xA;ViVX7I5MepxVPZ9e0aCG+mmvIo4dMAN/IzUWLlGJRyPujgj54qh183+WWgsZ11GFo9SkaGyINTJI&#xA;jcHQKByBRhxeo+E7GhxVu481+Xrd4UlvUDXFxJZwqoZi08TcJI/hB3VtjiqLs9W029nuoLS4SeWy&#xA;k9K6VDX05KV4k9Kjv4HbriqLxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KoHXdJi1jRr3SpZZIYb&#xA;+F7eaSE8ZBHIOL8W7EqSK9sVYhqP5N+Xb+00q1murvhov1sac4decYvLuG5YcipqFWD0R/xWxB33&#xA;xVO9J8lWmn+ZLnXRdzTSzfWvQt3EYjh+vSQyXHHioZuTWkdOR2p74ql/mT8rtC8wJepfTzhL3UTq&#xA;zemVBS4GljS0MZ4mnpoBKp6iQDttiqMl/L7Q5rLUbWYyONT0pdFnmBAkFqImiPE02Zg9enXFUt1D&#xA;8q7HU7KGPUtRuLi8j1A6rJdhIkElz6SwpyiC+nwVI1qlKNTetcVRI/LLRR5/Pnb6xP8ApEyer9Xq&#xA;vocvqf1LlxpXl6f7Va9umKrtD/LjTNH06ewgvLmWK6vLPUZ3mZXdrq0eFzJWm3rG2TmPupiqrrnk&#xA;SDU5JriG/nsruW8a8E8axvxMliunyJxkVhQwrUdw2/TbFUNH+V2gxebdN8zxzTre6WFSGPkvpsiW&#xA;b2arJtVuKSlgexr2JxVkM+jQTa/Za0zsLiytLqyjjFOBS8kt5XY7Vqps1pv3OKpBp35eR6bpei2V&#xA;lqc0UuhOxsrn0oSTE8XpSRyJx4nku/LY8vaoKq+7/LbRLnVNT1MySx3Wq2d9Y3TLx3j1BbdWIqOs&#xA;f1QcP9Y1riqDl/KnTF0z6hY6hc2UYnu5I2URSFIL6P0ZbZBIrAIkVFj7rQdRsVUwuPIkEp1hU1Ce&#xA;K31dYecKrEfSmto4o4pUZlJJAgWqtUHFUI35aQEadKNVukv7Oe6nubyMIhuPr13FeXEZVRRFaW3j&#xA;A4/sihrU1VRbeQ7MXVpcxXcqS2l/dailVjcF7yX1ZE+JdgDspG+Kpjovl6PS7/VbxLmSX9K3AuHt&#xA;yESGJgOPwIgHxMPtsd2oK74qm+KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kv/9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Untitled-6</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:DocumentID>xmp.did:24D2CAE20D206811945780C5360C7B74</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:24D2CAE20D206811945780C5360C7B74</xmpMM:InstanceID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:OriginalDocumentID>uuid:aac51be0-9842-fc4a-a5ef-0cc679e476af</xmpMM:OriginalDocumentID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:23D2CAE20D206811945780C5360C7B74</stRef:instanceID>
            <stRef:documentID>xmp.did:23D2CAE20D206811945780C5360C7B74</stRef:documentID>
            <stRef:originalDocumentID>uuid:aac51be0-9842-fc4a-a5ef-0cc679e476af</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:23D2CAE20D206811945780C5360C7B74</stEvt:instanceID>
                  <stEvt:when>2012-10-09T17:21:43+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:24D2CAE20D206811945780C5360C7B74</stEvt:instanceID>
                  <stEvt:when>2012-10-09T17:22:05+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Adobe PDF library 9.90</pdf:Producer>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>81.883719</stDim:w>
            <stDim:h>17.882629</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>FIIT_CMYK</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>90.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>20.000000</xmpG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -50.6919 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 50.6919 li
232.111 50.6919 li
232.111 0 li
cp
clp
[1 0 0 1 0 0 ]ct
0 50.6919 mo
232.111 50.6919 li
232.111 0 li
0 0 li
0 50.6919 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
gsave
0 .000976563 mo
232.111 .000976563 li
232.111 50.6919 li
0 50.6919 li
0 .000976563 li
cp
clp
100.425 15.3423 mo
100.68 14.7593 li
100.697 14.7192 100.731 14.7021 100.776 14.7192 cv
101.014 14.8271 101.212 14.9063 101.604 14.9063 cv
101.942 14.9063 102.146 14.7593 102.146 14.5103 cv
102.146 14.2783 102.033 14.1592 101.484 13.9155 cv
100.776 13.6152 100.47 13.2422 100.47 12.6362 cv
100.47 11.9741 100.968 11.4814 101.813 11.4814 cv
102.361 11.4814 102.599 11.5215 103.012 11.7021 cv
103.063 11.7192 103.063 11.7593 103.046 11.7983 cv
102.78 12.3193 li
102.763 12.3594 102.729 12.3823 102.678 12.3594 cv
102.458 12.2681 102.231 12.2231 101.965 12.2231 cv
101.604 12.2231 101.444 12.3823 101.444 12.6133 cv
101.444 12.8403 101.529 12.9473 102.135 13.1914 cv
102.842 13.4912 103.114 13.8423 103.114 14.4194 cv
103.114 15.2124 102.554 15.6484 101.682 15.6484 cv
101.212 15.6484 100.844 15.6084 100.459 15.4102 cv
100.425 15.3872 100.414 15.3643 100.425 15.3423 cv
0 0 0 1 cmyk
f
106.051 14.8384 mo
106.051 14.8662 106.063 14.8833 106.091 14.8833 cv
107.58 14.8833 li
107.625 14.8833 107.648 14.9063 107.648 14.9575 cv
107.648 15.5342 li
107.648 15.5864 107.625 15.6084 107.58 15.6084 cv
105.23 15.6084 li
105.179 15.6084 105.157 15.5864 105.157 15.5342 cv
105.157 11.5942 li
105.157 11.5444 105.179 11.5215 105.23 11.5215 cv
105.989 11.5215 li
106.029 11.5215 106.051 11.5444 106.051 11.5942 cv
106.051 14.8384 li
cp
f
110.896 12.2061 mo
110.353 12.2061 110.058 12.647 110.058 13.5591 cv
110.058 14.4873 110.347 14.9233 110.89 14.9233 cv
111.428 14.9233 111.722 14.4873 111.722 13.5649 cv
111.722 12.6421 111.422 12.2061 110.896 12.2061 cv
110.89 15.6479 mo
109.531 15.6479 109.124 14.9063 109.124 13.5649 cv
109.124 12.2119 109.531 11.481 110.89 11.481 cv
112.249 11.481 112.656 12.2173 112.656 13.5591 cv
112.656 14.9121 112.249 15.6479 110.89 15.6479 cv
f
115.606 15.6084 mo
115.578 15.6084 115.561 15.5913 115.549 15.5576 cv
114.395 11.6113 li
114.377 11.5605 114.406 11.5215 114.451 11.5215 cv
115.277 11.5215 li
115.323 11.5215 115.328 11.5386 115.345 11.5776 cv
116.144 14.7134 li
116.942 11.5776 li
116.953 11.5386 116.976 11.5215 117.015 11.5215 cv
117.752 11.5215 li
117.802 11.5215 117.825 11.5493 117.814 11.6006 cv
116.653 15.5576 li
116.642 15.5913 116.619 15.6084 116.585 15.6084 cv
115.606 15.6084 li
cp
f
121.373 14.0288 mo
120.92 12.4609 li
120.467 14.0288 li
121.373 14.0288 li
cp
120.264 14.7476 mo
120.037 15.5576 li
120.02 15.5918 119.998 15.6089 119.963 15.6089 cv
119.227 15.6089 li
119.188 15.6089 119.16 15.5737 119.177 15.5347 cv
120.422 11.5498 li
120.422 11.5327 120.439 11.521 120.467 11.521 cv
121.469 11.521 li
121.486 11.521 121.503 11.5327 121.515 11.561 cv
122.749 15.5347 li
122.766 15.5737 122.737 15.6089 122.698 15.6089 cv
121.877 15.6089 li
121.843 15.6089 121.82 15.5918 121.803 15.5576 cv
121.577 14.7476 li
120.264 14.7476 li
cp
f
126.292 13.5874 mo
127.696 15.5063 li
127.725 15.5513 127.696 15.6084 127.651 15.6084 cv
126.683 15.6084 li
126.66 15.6084 126.643 15.5972 126.632 15.5806 cv
125.539 13.8765 li
125.539 15.5342 li
125.539 15.5864 125.517 15.6084 125.477 15.6084 cv
124.718 15.6084 li
124.667 15.6084 124.645 15.5864 124.645 15.5342 cv
124.645 11.5942 li
124.645 11.5444 124.667 11.5215 124.718 11.5215 cv
125.477 11.5215 li
125.517 11.5215 125.539 11.5444 125.539 11.5942 cv
125.539 13.3892 li
126.621 11.5493 li
126.632 11.5322 126.649 11.5215 126.671 11.5215 cv
127.543 11.5215 li
127.605 11.5215 127.623 11.5776 127.594 11.6235 cv
126.292 13.5874 li
cp
f
135.878 14.3462 mo
135.878 15.144 135.432 15.6484 134.315 15.6484 cv
133.206 15.6484 132.76 15.144 132.76 14.3462 cv
132.76 11.5952 li
132.76 11.5444 132.781 11.521 132.832 11.521 cv
133.592 11.521 li
133.631 11.521 133.653 11.5444 133.653 11.5952 cv
133.653 14.3232 li
133.653 14.7251 133.874 14.9233 134.315 14.9233 cv
134.764 14.9233 134.983 14.7251 134.983 14.3232 cv
134.983 11.5952 li
134.983 11.5444 135.007 11.521 135.052 11.521 cv
135.815 11.521 li
135.855 11.521 135.878 11.5444 135.878 11.5952 cv
135.878 14.3462 li
cp
f
140.345 14.2725 mo
140.345 11.5947 li
140.345 11.5435 140.361 11.5215 140.401 11.5215 cv
141.132 11.5215 li
141.177 11.5215 141.199 11.5435 141.199 11.5947 cv
141.199 15.5347 li
141.199 15.5854 141.177 15.6084 141.132 15.6084 cv
140.339 15.6084 li
140.288 15.6084 140.276 15.6025 140.26 15.5635 cv
138.946 12.8564 li
138.946 15.5347 li
138.946 15.5854 138.924 15.6084 138.879 15.6084 cv
138.165 15.6084 li
138.114 15.6084 138.092 15.5854 138.092 15.5347 cv
138.092 11.5947 li
138.092 11.5435 138.114 11.5215 138.165 11.5215 cv
138.946 11.5215 li
138.998 11.5215 139.009 11.5264 139.025 11.5664 cv
140.345 14.2725 li
cp
f
144.244 11.521 mo
144.284 11.521 144.307 11.5439 144.307 11.5952 cv
144.307 15.5352 li
144.307 15.5859 144.284 15.6079 144.244 15.6079 cv
143.485 15.6079 li
143.435 15.6079 143.413 15.5859 143.413 15.5352 cv
143.413 11.5952 li
143.413 11.5439 143.435 11.521 143.485 11.521 cv
144.244 11.521 li
cp
f
147.423 15.6084 mo
147.396 15.6084 147.378 15.5913 147.366 15.5576 cv
146.212 11.6113 li
146.194 11.5605 146.224 11.5215 146.269 11.5215 cv
147.095 11.5215 li
147.141 11.5215 147.146 11.5386 147.162 11.5776 cv
147.961 14.7134 li
148.76 11.5776 li
148.771 11.5386 148.793 11.5215 148.832 11.5215 cv
149.569 11.5215 li
149.619 11.5215 149.643 11.5493 149.631 11.6006 cv
148.471 15.5576 li
148.459 15.5913 148.437 15.6084 148.402 15.6084 cv
147.423 15.6084 li
cp
f
152.421 13.2026 mo
153.684 13.2026 li
153.733 13.2026 153.763 13.2246 153.763 13.2705 cv
153.763 13.8594 li
153.763 13.8984 153.733 13.9214 153.684 13.9214 cv
152.421 13.9214 li
152.421 14.8384 li
152.421 14.8667 152.433 14.8838 152.461 14.8838 cv
154.051 14.8838 li
154.103 14.8838 154.125 14.9067 154.125 14.9517 cv
154.125 15.5347 li
154.125 15.5854 154.103 15.6084 154.051 15.6084 cv
151.6 15.6084 li
151.549 15.6084 151.527 15.5854 151.527 15.5347 cv
151.527 11.5947 li
151.527 11.5435 151.549 11.5205 151.6 11.5205 cv
154.051 11.5205 li
154.103 11.5205 154.125 11.5435 154.125 11.5947 cv
154.125 12.1724 li
154.125 12.2236 154.103 12.2456 154.051 12.2456 cv
152.461 12.2456 li
152.433 12.2456 152.421 12.2627 152.421 12.2905 cv
152.421 13.2026 li
cp
f
157.005 13.3496 mo
157.351 13.3496 li
157.764 13.3496 158.019 13.1685 158.019 12.7778 cv
158.019 12.4106 157.803 12.2456 157.373 12.2456 cv
157.05 12.2456 li
157.021 12.2456 157.005 12.2627 157.005 12.2905 cv
157.005 13.3496 li
cp
157.005 13.9897 mo
157.005 15.5347 li
157.005 15.5854 156.982 15.6084 156.943 15.6084 cv
156.184 15.6084 li
156.133 15.6084 156.111 15.5854 156.111 15.5347 cv
156.111 11.5947 li
156.111 11.5435 156.133 11.5205 156.184 11.5205 cv
157.492 11.5205 li
158.517 11.5205 158.953 11.9746 158.953 12.7607 cv
158.953 13.3496 158.675 13.7578 158.132 13.9106 cv
159.162 15.5005 li
159.202 15.5625 159.168 15.6084 159.117 15.6084 cv
158.216 15.6084 li
158.188 15.6084 158.172 15.5977 158.166 15.5796 cv
157.243 13.9897 li
157.005 13.9897 li
cp
f
161.03 15.3423 mo
161.285 14.7593 li
161.302 14.7192 161.336 14.7021 161.381 14.7192 cv
161.619 14.8271 161.816 14.9063 162.208 14.9063 cv
162.547 14.9063 162.751 14.7593 162.751 14.5103 cv
162.751 14.2783 162.638 14.1592 162.089 13.9155 cv
161.381 13.6152 161.075 13.2422 161.075 12.6362 cv
161.075 11.9741 161.573 11.4814 162.417 11.4814 cv
162.966 11.4814 163.204 11.5215 163.617 11.7021 cv
163.668 11.7192 163.668 11.7593 163.65 11.7983 cv
163.385 12.3193 li
163.368 12.3594 163.334 12.3823 163.283 12.3594 cv
163.063 12.2681 162.836 12.2231 162.569 12.2231 cv
162.208 12.2231 162.049 12.3823 162.049 12.6133 cv
162.049 12.8403 162.134 12.9473 162.74 13.1914 cv
163.447 13.4912 163.719 13.8423 163.719 14.4194 cv
163.719 15.2124 163.159 15.6484 162.287 15.6484 cv
161.816 15.6484 161.449 15.6084 161.063 15.4102 cv
161.03 15.3872 161.019 15.3643 161.03 15.3423 cv
f
166.594 11.521 mo
166.634 11.521 166.656 11.5439 166.656 11.5952 cv
166.656 15.5352 li
166.656 15.5859 166.634 15.6079 166.594 15.6079 cv
165.835 15.6079 li
165.784 15.6079 165.762 15.5859 165.762 15.5352 cv
165.762 11.5952 li
165.762 11.5439 165.784 11.521 165.835 11.521 cv
166.594 11.521 li
cp
f
169.682 15.6084 mo
169.642 15.6084 169.619 15.5864 169.619 15.5342 cv
169.619 12.2915 li
169.619 12.2622 169.603 12.2456 169.574 12.2456 cv
168.629 12.2456 li
168.577 12.2456 168.556 12.2236 168.556 12.1724 cv
168.556 11.5942 li
168.556 11.5444 168.577 11.5215 168.629 11.5215 cv
171.516 11.5215 li
171.561 11.5215 171.584 11.5444 171.584 11.5942 cv
171.584 12.1724 li
171.584 12.2236 171.561 12.2456 171.516 12.2456 cv
170.554 12.2456 li
170.525 12.2456 170.514 12.2622 170.514 12.2915 cv
170.514 15.5342 li
170.514 15.5864 170.491 15.6084 170.44 15.6084 cv
169.682 15.6084 li
cp
f
175.28 14.0176 mo
175.28 15.5298 li
175.28 15.5806 175.257 15.6084 175.212 15.6084 cv
174.453 15.6084 li
174.408 15.6084 174.385 15.5806 174.385 15.5298 cv
174.385 14.0176 li
173.129 11.6226 li
173.1 11.5728 173.117 11.5205 173.185 11.5205 cv
174.068 11.5205 li
174.097 11.5205 174.112 11.5327 174.125 11.5605 cv
174.906 13.2256 li
175.688 11.5605 li
175.692 11.5327 175.71 11.5205 175.737 11.5205 cv
176.548 11.5205 li
176.609 11.5205 176.627 11.5728 176.604 11.6177 cv
175.28 14.0176 li
cp
f
183.241 12.2061 mo
182.698 12.2061 182.403 12.647 182.403 13.5591 cv
182.403 14.4873 182.692 14.9233 183.235 14.9233 cv
183.773 14.9233 184.067 14.4873 184.067 13.5649 cv
184.067 12.6421 183.768 12.2061 183.241 12.2061 cv
183.235 15.6479 mo
181.877 15.6479 181.469 14.9063 181.469 13.5649 cv
181.469 12.2119 181.877 11.481 183.235 11.481 cv
184.594 11.481 185.001 12.2173 185.001 13.5591 cv
185.001 14.9121 184.594 15.6479 183.235 15.6479 cv
f
187.939 13.2026 mo
189.146 13.2026 li
189.196 13.2026 189.225 13.2246 189.225 13.2705 cv
189.225 13.8594 li
189.225 13.8984 189.196 13.9214 189.146 13.9214 cv
187.939 13.9214 li
187.939 15.5347 li
187.939 15.5854 187.918 15.6084 187.878 15.6084 cv
187.118 15.6084 li
187.067 15.6084 187.046 15.5854 187.046 15.5347 cv
187.046 11.5947 li
187.046 11.5435 187.067 11.5205 187.118 11.5205 cv
189.514 11.5205 li
189.564 11.5205 189.587 11.5435 189.587 11.5947 cv
189.587 12.1724 li
189.587 12.2236 189.564 12.2456 189.514 12.2456 cv
187.984 12.2456 li
187.956 12.2456 187.939 12.2627 187.939 12.2905 cv
187.939 13.2026 li
cp
f
101.405 23.4736 mo
101.365 23.4736 101.343 23.4517 101.343 23.3994 cv
101.343 20.1567 li
101.343 20.1274 101.326 20.1108 101.298 20.1108 cv
100.352 20.1108 li
100.301 20.1108 100.279 20.0884 100.279 20.0376 cv
100.279 19.4595 li
100.279 19.4097 100.301 19.3867 100.352 19.3867 cv
103.239 19.3867 li
103.284 19.3867 103.307 19.4097 103.307 19.4595 cv
103.307 20.0376 li
103.307 20.0884 103.284 20.1108 103.239 20.1108 cv
102.277 20.1108 li
102.249 20.1108 102.237 20.1274 102.237 20.1567 cv
102.237 23.3994 li
102.237 23.4517 102.215 23.4736 102.164 23.4736 cv
101.405 23.4736 li
cp
f
106.102 21.0679 mo
107.365 21.0679 li
107.415 21.0679 107.444 21.0898 107.444 21.1357 cv
107.444 21.7251 li
107.444 21.7637 107.415 21.7871 107.365 21.7871 cv
106.102 21.7871 li
106.102 22.7041 li
106.102 22.7319 106.114 22.749 106.142 22.749 cv
107.732 22.749 li
107.784 22.749 107.806 22.772 107.806 22.8169 cv
107.806 23.3999 li
107.806 23.4507 107.784 23.4741 107.732 23.4741 cv
105.281 23.4741 li
105.23 23.4741 105.208 23.4507 105.208 23.3999 cv
105.208 19.46 li
105.208 19.4087 105.23 19.3857 105.281 19.3857 cv
107.732 19.3857 li
107.784 19.3857 107.806 19.4087 107.806 19.46 cv
107.806 20.0381 li
107.806 20.0889 107.784 20.1108 107.732 20.1108 cv
106.142 20.1108 li
106.114 20.1108 106.102 20.1279 106.102 20.1558 cv
106.102 21.0679 li
cp
f
111.553 23.5132 mo
110.381 23.5132 109.679 22.7153 109.679 21.4302 cv
109.679 20.145 110.381 19.3462 111.553 19.3462 cv
112.029 19.3462 112.333 19.4033 112.646 19.5781 cv
112.674 19.5962 112.685 19.6182 112.685 19.6353 cv
112.685 19.6523 112.679 19.6753 112.667 19.6982 cv
112.402 20.207 li
112.385 20.2354 112.368 20.252 112.351 20.252 cv
112.333 20.252 112.317 20.2471 112.301 20.2412 cv
112.074 20.1343 111.875 20.0942 111.626 20.0942 cv
111.157 20.0942 110.614 20.4854 110.614 21.4302 cv
110.614 22.3813 111.129 22.7603 111.633 22.7603 cv
111.819 22.7603 112.04 22.7383 112.306 22.6074 cv
112.345 22.5903 112.38 22.5962 112.396 22.6304 cv
112.674 23.1572 li
112.702 23.2012 112.691 23.2422 112.646 23.27 cv
112.306 23.4624 112.006 23.5132 111.553 23.5132 cv
f
115.56 21.7866 mo
115.532 21.7866 115.515 21.8037 115.515 21.8315 cv
115.515 23.3994 li
115.515 23.4517 115.492 23.4736 115.453 23.4736 cv
114.693 23.4736 li
114.643 23.4736 114.621 23.4517 114.621 23.3994 cv
114.621 19.4595 li
114.621 19.4097 114.643 19.3867 114.693 19.3867 cv
115.453 19.3867 li
115.492 19.3867 115.515 19.4097 115.515 19.4595 cv
115.515 21.0225 li
115.515 21.0508 115.532 21.0674 115.56 21.0674 cv
116.789 21.0674 li
116.816 21.0674 116.834 21.0508 116.834 21.0225 cv
116.834 19.4595 li
116.834 19.4097 116.855 19.3867 116.901 19.3867 cv
117.659 19.3867 li
117.706 19.3867 117.728 19.4097 117.728 19.4595 cv
117.728 23.3994 li
117.728 23.4517 117.706 23.4736 117.659 23.4736 cv
116.901 23.4736 li
116.855 23.4736 116.834 23.4517 116.834 23.3994 cv
116.834 21.8315 li
116.834 21.8037 116.816 21.7866 116.789 21.7866 cv
115.56 21.7866 li
cp
f
122.193 22.1377 mo
122.193 19.4595 li
122.193 19.4087 122.211 19.3867 122.251 19.3867 cv
122.98 19.3867 li
123.025 19.3867 123.049 19.4087 123.049 19.4595 cv
123.049 23.3999 li
123.049 23.4507 123.025 23.4736 122.98 23.4736 cv
122.188 23.4736 li
122.137 23.4736 122.126 23.4678 122.108 23.4287 cv
120.796 20.7217 li
120.796 23.3999 li
120.796 23.4507 120.772 23.4736 120.728 23.4736 cv
120.014 23.4736 li
119.964 23.4736 119.94 23.4507 119.94 23.3999 cv
119.94 19.4595 li
119.94 19.4087 119.964 19.3867 120.014 19.3867 cv
120.796 19.3867 li
120.847 19.3867 120.857 19.3916 120.875 19.4316 cv
122.193 22.1377 li
cp
f
126.858 20.0713 mo
126.315 20.0713 126.021 20.5122 126.021 21.4243 cv
126.021 22.3521 126.31 22.7881 126.853 22.7881 cv
127.391 22.7881 127.685 22.3521 127.685 21.4302 cv
127.685 20.5073 127.385 20.0713 126.858 20.0713 cv
126.853 23.5132 mo
125.494 23.5132 125.086 22.7715 125.086 21.4302 cv
125.086 20.0771 125.494 19.3462 126.853 19.3462 cv
128.211 19.3462 128.618 20.0825 128.618 21.4243 cv
128.618 22.7773 128.211 23.5132 126.853 23.5132 cv
f
131.557 22.7036 mo
131.557 22.7314 131.568 22.7485 131.597 22.7485 cv
133.085 22.7485 li
133.13 22.7485 133.153 22.7715 133.153 22.8228 cv
133.153 23.3994 li
133.153 23.4517 133.13 23.4736 133.085 23.4736 cv
130.735 23.4736 li
130.685 23.4736 130.662 23.4517 130.662 23.3994 cv
130.662 19.4595 li
130.662 19.4097 130.685 19.3867 130.735 19.3867 cv
131.494 19.3867 li
131.534 19.3867 131.557 19.4097 131.557 19.4595 cv
131.557 22.7036 li
cp
f
136.401 20.0713 mo
135.858 20.0713 135.563 20.5122 135.563 21.4243 cv
135.563 22.3521 135.853 22.7881 136.396 22.7881 cv
136.934 22.7881 137.228 22.3521 137.228 21.4302 cv
137.228 20.5073 136.928 20.0713 136.401 20.0713 cv
136.396 23.5132 mo
135.037 23.5132 134.63 22.7715 134.63 21.4302 cv
134.63 20.0771 135.037 19.3462 136.396 19.3462 cv
137.755 19.3462 138.161 20.0825 138.161 21.4243 cv
138.161 22.7773 137.755 23.5132 136.396 23.5132 cv
f
142.401 21.9678 mo
141.875 21.9678 li
141.829 21.9678 141.808 21.9458 141.808 21.8999 cv
141.808 21.311 li
141.808 21.2656 141.829 21.2427 141.875 21.2427 cv
143.148 21.2427 li
143.193 21.2427 143.217 21.2656 143.217 21.311 cv
143.217 23.2017 li
143.217 23.2466 143.199 23.2759 143.171 23.2808 cv
142.814 23.4229 142.407 23.5127 141.908 23.5127 cv
140.736 23.5127 140.035 22.7148 140.035 21.4297 cv
140.035 20.145 140.736 19.3467 141.908 19.3467 cv
142.361 19.3467 142.685 19.4038 143.001 19.5786 cv
143.029 19.5957 143.041 19.6187 143.041 19.6348 cv
143.041 19.6528 143.035 19.6758 143.024 19.6978 cv
142.758 20.207 li
142.741 20.2358 142.725 20.2529 142.707 20.2529 cv
142.69 20.2529 142.673 20.2466 142.656 20.2407 cv
142.43 20.1338 142.231 20.0938 141.982 20.0938 cv
141.513 20.0938 140.97 20.4849 140.97 21.4297 cv
140.97 22.3809 141.495 22.7998 141.943 22.7998 cv
142.142 22.7998 142.248 22.7886 142.401 22.7427 cv
142.401 21.9678 li
cp
f
147.054 21.8828 mo
147.054 23.395 li
147.054 23.4458 147.031 23.4736 146.986 23.4736 cv
146.228 23.4736 li
146.183 23.4736 146.159 23.4458 146.159 23.395 cv
146.159 21.8828 li
144.903 19.4878 li
144.874 19.438 144.892 19.3857 144.959 19.3857 cv
145.843 19.3857 li
145.871 19.3857 145.887 19.3979 145.899 19.4258 cv
146.681 21.0908 li
147.462 19.4258 li
147.467 19.3979 147.484 19.3857 147.512 19.3857 cv
148.322 19.3857 li
148.384 19.3857 148.401 19.438 148.379 19.4829 cv
147.054 21.8828 li
cp
f
154.246 19.3862 mo
154.286 19.3862 154.308 19.4092 154.308 19.46 cv
154.308 23.4004 li
154.308 23.4512 154.286 23.4731 154.246 23.4731 cv
153.487 23.4731 li
153.437 23.4731 153.414 23.4512 153.414 23.4004 cv
153.414 19.46 li
153.414 19.4092 153.437 19.3862 153.487 19.3862 cv
154.246 19.3862 li
cp
f
158.772 22.1377 mo
158.772 19.4595 li
158.772 19.4087 158.789 19.3867 158.829 19.3867 cv
159.559 19.3867 li
159.604 19.3867 159.627 19.4087 159.627 19.4595 cv
159.627 23.3999 li
159.627 23.4507 159.604 23.4736 159.559 23.4736 cv
158.766 23.4736 li
158.715 23.4736 158.704 23.4678 158.687 23.4287 cv
157.374 20.7217 li
157.374 23.3999 li
157.374 23.4507 157.351 23.4736 157.306 23.4736 cv
156.592 23.4736 li
156.542 23.4736 156.519 23.4507 156.519 23.3999 cv
156.519 19.4595 li
156.519 19.4087 156.542 19.3867 156.592 19.3867 cv
157.374 19.3867 li
157.425 19.3867 157.436 19.3916 157.453 19.4316 cv
158.772 22.1377 li
cp
f
165.913 21.7471 mo
165.913 22.7041 li
165.913 22.7319 165.925 22.749 165.953 22.749 cv
166.435 22.749 li
166.746 22.749 167.023 22.6299 167.023 22.2793 cv
167.023 21.8999 166.774 21.7471 166.226 21.7471 cv
165.913 21.7471 li
cp
165.958 20.1113 mo
165.93 20.1113 165.913 20.1279 165.913 20.1563 cv
165.913 21.1069 li
166.247 21.1069 li
166.717 21.1069 166.955 20.9663 166.955 20.5811 cv
166.955 20.2192 166.734 20.1113 166.349 20.1113 cv
165.958 20.1113 li
cp
166.253 19.3862 mo
167.379 19.3862 167.889 19.7153 167.889 20.4902 cv
167.889 20.8521 167.651 21.2261 167.057 21.4072 cv
167.696 21.583 167.957 21.9561 167.957 22.4771 cv
167.957 23.2021 167.477 23.4741 166.292 23.4741 cv
165.092 23.4741 li
165.041 23.4741 165.02 23.4512 165.02 23.3999 cv
165.02 19.46 li
165.02 19.4092 165.041 19.3862 165.092 19.3862 cv
166.253 19.3862 li
cp
f
171.059 21.2148 mo
171.404 21.2148 li
171.817 21.2148 172.072 21.0337 172.072 20.6426 cv
172.072 20.2759 171.856 20.1108 171.427 20.1108 cv
171.104 20.1108 li
171.075 20.1108 171.059 20.1279 171.059 20.1558 cv
171.059 21.2148 li
cp
171.059 21.855 mo
171.059 23.3999 li
171.059 23.4507 171.036 23.4736 170.997 23.4736 cv
170.237 23.4736 li
170.187 23.4736 170.165 23.4507 170.165 23.3999 cv
170.165 19.46 li
170.165 19.4087 170.187 19.3857 170.237 19.3857 cv
171.546 19.3857 li
172.57 19.3857 173.007 19.8398 173.007 20.626 cv
173.007 21.2148 172.729 21.6226 172.186 21.7759 cv
173.216 23.3657 li
173.256 23.4277 173.222 23.4736 173.171 23.4736 cv
172.27 23.4736 li
172.241 23.4736 172.226 23.4629 172.22 23.4448 cv
171.297 21.855 li
171.059 21.855 li
cp
f
177.132 21.894 mo
176.68 20.3262 li
176.227 21.894 li
177.132 21.894 li
cp
176.023 22.6128 mo
175.796 23.4229 li
175.779 23.457 175.757 23.4741 175.723 23.4741 cv
174.986 23.4741 li
174.947 23.4741 174.919 23.439 174.937 23.3999 cv
176.182 19.415 li
176.182 19.3979 176.198 19.3862 176.227 19.3862 cv
177.229 19.3862 li
177.245 19.3862 177.263 19.3979 177.274 19.4258 cv
178.508 23.3999 li
178.525 23.439 178.496 23.4741 178.457 23.4741 cv
177.637 23.4741 li
177.603 23.4741 177.579 23.457 177.563 23.4229 cv
177.336 22.6128 li
176.023 22.6128 li
cp
f
180.885 23.4736 mo
180.845 23.4736 180.823 23.4517 180.823 23.3994 cv
180.823 20.1567 li
180.823 20.1274 180.806 20.1108 180.777 20.1108 cv
179.832 20.1108 li
179.781 20.1108 179.759 20.0884 179.759 20.0376 cv
179.759 19.4595 li
179.759 19.4097 179.781 19.3867 179.832 19.3867 cv
182.719 19.3867 li
182.764 19.3867 182.787 19.4097 182.787 19.4595 cv
182.787 20.0376 li
182.787 20.0884 182.764 20.1108 182.719 20.1108 cv
181.757 20.1108 li
181.729 20.1108 181.717 20.1274 181.717 20.1567 cv
181.717 23.3994 li
181.717 23.4517 181.694 23.4736 181.644 23.4736 cv
180.885 23.4736 li
cp
f
185.52 19.3862 mo
185.56 19.3862 185.582 19.4092 185.582 19.46 cv
185.582 23.4004 li
185.582 23.4512 185.56 23.4731 185.52 23.4731 cv
184.761 23.4731 li
184.71 23.4731 184.688 23.4512 184.688 23.4004 cv
184.688 19.46 li
184.688 19.4092 184.71 19.3862 184.761 19.3862 cv
185.52 19.3862 li
cp
f
187.629 23.2075 mo
187.884 22.6245 li
187.901 22.5845 187.935 22.5674 187.979 22.5845 cv
188.218 22.6924 188.416 22.7715 188.807 22.7715 cv
189.146 22.7715 189.35 22.6245 189.35 22.3755 cv
189.35 22.1436 189.237 22.0244 188.688 21.7803 cv
187.979 21.4805 187.674 21.1074 187.674 20.5015 cv
187.674 19.8394 188.172 19.3467 189.016 19.3467 cv
189.564 19.3467 189.803 19.3867 190.216 19.5674 cv
190.267 19.5845 190.267 19.6245 190.25 19.6636 cv
189.984 20.1846 li
189.967 20.2246 189.933 20.2476 189.882 20.2246 cv
189.661 20.1333 189.435 20.0884 189.169 20.0884 cv
188.807 20.0884 188.647 20.2476 188.647 20.4785 cv
188.647 20.7056 188.732 20.8125 189.339 21.0566 cv
190.046 21.3564 190.318 21.7075 190.318 22.2847 cv
190.318 23.0776 189.758 23.5137 188.886 23.5137 cv
188.416 23.5137 188.048 23.4736 187.663 23.2754 cv
187.629 23.2524 187.618 23.2295 187.629 23.2075 cv
f
193.255 22.7036 mo
193.255 22.7314 193.267 22.7485 193.295 22.7485 cv
194.784 22.7485 li
194.829 22.7485 194.852 22.7715 194.852 22.8228 cv
194.852 23.3994 li
194.852 23.4517 194.829 23.4736 194.784 23.4736 cv
192.434 23.4736 li
192.383 23.4736 192.361 23.4517 192.361 23.3994 cv
192.361 19.4595 li
192.361 19.4097 192.383 19.3867 192.434 19.3867 cv
193.193 19.3867 li
193.232 19.3867 193.255 19.4097 193.255 19.4595 cv
193.255 22.7036 li
cp
f
198.609 21.894 mo
198.156 20.3262 li
197.703 21.894 li
198.609 21.894 li
cp
197.5 22.6128 mo
197.272 23.4229 li
197.256 23.457 197.234 23.4741 197.199 23.4741 cv
196.463 23.4741 li
196.424 23.4741 196.396 23.439 196.413 23.3999 cv
197.658 19.415 li
197.658 19.3979 197.675 19.3862 197.703 19.3862 cv
198.705 19.3862 li
198.722 19.3862 198.739 19.3979 198.751 19.4258 cv
199.985 23.3999 li
200.002 23.439 199.973 23.4741 199.934 23.4741 cv
199.113 23.4741 li
199.079 23.4741 199.056 23.457 199.039 23.4229 cv
198.813 22.6128 li
197.5 22.6128 li
cp
f
202.561 23.4736 mo
202.532 23.4736 202.515 23.4565 202.503 23.4224 cv
201.349 19.4766 li
201.331 19.4258 201.36 19.3867 201.405 19.3867 cv
202.231 19.3867 li
202.277 19.3867 202.282 19.4038 202.299 19.4424 cv
203.098 22.5786 li
203.896 19.4424 li
203.907 19.4038 203.93 19.3867 203.969 19.3867 cv
204.706 19.3867 li
204.756 19.3867 204.779 19.4146 204.769 19.4658 cv
203.607 23.4224 li
203.596 23.4565 203.573 23.4736 203.539 23.4736 cv
202.561 23.4736 li
cp
f
208.321 21.894 mo
207.868 20.3262 li
207.415 21.894 li
208.321 21.894 li
cp
207.212 22.6128 mo
206.985 23.4229 li
206.969 23.457 206.946 23.4741 206.911 23.4741 cv
206.175 23.4741 li
206.137 23.4741 206.108 23.439 206.125 23.3999 cv
207.37 19.415 li
207.37 19.3979 207.388 19.3862 207.415 19.3862 cv
208.417 19.3862 li
208.435 19.3862 208.451 19.3979 208.463 19.4258 cv
209.697 23.3999 li
209.714 23.439 209.686 23.4741 209.646 23.4741 cv
208.825 23.4741 li
208.791 23.4741 208.769 23.457 208.751 23.4229 cv
208.525 22.6128 li
207.212 22.6128 li
cp
f
101.156 29.0571 mo
102.424 29.0571 li
102.464 29.0571 102.486 29.0747 102.486 29.1147 cv
102.486 29.4771 li
102.486 29.5151 102.464 29.5337 102.424 29.5337 cv
101.156 29.5337 li
101.156 31.2827 li
101.156 31.3218 101.139 31.3384 101.105 31.3384 cv
100.647 31.3384 li
100.607 31.3384 100.59 31.3218 100.59 31.2827 cv
100.59 27.3071 li
100.59 27.269 100.607 27.2515 100.647 27.2515 cv
102.786 27.2515 li
102.826 27.2515 102.848 27.269 102.848 27.3071 cv
102.848 27.6646 li
102.848 27.7046 102.826 27.7271 102.786 27.7271 cv
101.201 27.7271 li
101.173 27.7271 101.156 27.7446 101.156 27.7729 cv
101.156 29.0571 li
cp
f
106.181 29.895 mo
105.563 27.8237 li
104.947 29.895 li
106.181 29.895 li
cp
104.811 30.3706 mo
104.545 31.2935 li
104.534 31.3218 104.511 31.3384 104.483 31.3384 cv
104.035 31.3384 li
103.995 31.3384 103.979 31.3101 103.995 31.27 cv
105.229 27.2798 li
105.229 27.2632 105.241 27.2515 105.269 27.2515 cv
105.915 27.2515 li
105.932 27.2515 105.949 27.2632 105.954 27.2856 cv
107.177 31.2651 li
107.194 31.3169 107.177 31.3384 107.132 31.3384 cv
106.639 31.3384 li
106.611 31.3384 106.588 31.3218 106.583 31.2935 cv
106.317 30.3706 li
104.811 30.3706 li
cp
f
110.641 31.3784 mo
109.485 31.3784 108.971 30.5298 108.971 29.2896 cv
108.971 28.0659 109.485 27.2114 110.641 27.2114 cv
111.025 27.2114 111.309 27.2632 111.625 27.438 cv
111.654 27.4614 111.654 27.4956 111.637 27.5347 cv
111.468 27.8462 li
111.451 27.8853 111.416 27.8853 111.388 27.8687 cv
111.145 27.7505 110.992 27.6987 110.675 27.6987 cv
110.041 27.6987 109.571 28.2085 109.571 29.2896 cv
109.571 30.3872 110.03 30.8911 110.675 30.8911 cv
110.958 30.8911 111.139 30.8521 111.394 30.7163 cv
111.428 30.6997 111.451 30.7046 111.468 30.7319 cv
111.643 31.0552 li
111.66 31.0894 111.654 31.1187 111.625 31.146 cv
111.297 31.3276 111.032 31.3784 110.641 31.3784 cv
f
116.38 30.0708 mo
116.38 30.8628 116.097 31.3784 114.982 31.3784 cv
113.866 31.3784 113.584 30.8628 113.584 30.0708 cv
113.584 27.3081 li
113.584 27.269 113.6 27.2515 113.64 27.2515 cv
114.099 27.2515 li
114.132 27.2515 114.15 27.269 114.15 27.3081 cv
114.15 30.1958 li
114.15 30.7173 114.433 30.9028 114.982 30.9028 cv
115.525 30.9028 115.814 30.7104 115.814 30.1958 cv
115.814 27.3081 li
115.814 27.269 115.831 27.2515 115.87 27.2515 cv
116.323 27.2515 li
116.363 27.2515 116.38 27.269 116.38 27.3081 cv
116.38 30.0708 li
cp
f
119.159 30.8179 mo
119.159 30.8462 119.17 30.8628 119.198 30.8628 cv
120.767 30.8628 li
120.806 30.8628 120.823 30.8862 120.823 30.9263 cv
120.823 31.2817 li
120.823 31.3218 120.806 31.3394 120.767 31.3394 cv
118.649 31.3394 li
118.609 31.3394 118.593 31.3218 118.593 31.2817 cv
118.593 27.3081 li
118.593 27.269 118.609 27.2515 118.649 27.2515 cv
119.107 27.2515 li
119.142 27.2515 119.159 27.269 119.159 27.3081 cv
119.159 30.8179 li
cp
f
123.063 31.3394 mo
123.029 31.3394 123.012 31.3218 123.012 31.2817 cv
123.012 27.7729 li
123.012 27.7437 122.995 27.7271 122.967 27.7271 cv
121.987 27.7271 li
121.948 27.7271 121.931 27.7046 121.931 27.6646 cv
121.931 27.3081 li
121.931 27.269 121.948 27.2515 121.987 27.2515 cv
124.603 27.2515 li
124.642 27.2515 124.659 27.269 124.659 27.3081 cv
124.659 27.6646 li
124.659 27.7046 124.642 27.7271 124.603 27.7271 cv
123.618 27.7271 li
123.589 27.7271 123.578 27.7437 123.578 27.7729 cv
123.578 31.2817 li
123.578 31.3218 123.561 31.3394 123.521 31.3394 cv
123.063 31.3394 li
cp
f
127.981 29.6069 mo
127.981 31.2769 li
127.981 31.3169 127.964 31.3384 127.924 31.3384 cv
127.471 31.3384 li
127.432 31.3384 127.415 31.3169 127.415 31.2769 cv
127.415 29.6069 li
126.243 27.3423 li
126.214 27.2915 126.237 27.2515 126.288 27.2515 cv
126.803 27.2515 li
126.832 27.2515 126.849 27.2632 126.86 27.2856 cv
127.731 29.0806 li
128.609 27.2856 li
128.615 27.2632 128.632 27.2515 128.66 27.2515 cv
129.141 27.2515 li
129.187 27.2515 129.209 27.2915 129.192 27.3315 cv
127.981 29.6069 li
cp
f
135.348 27.687 mo
134.674 27.687 134.322 28.2134 134.322 29.2954 cv
134.322 30.3765 134.674 30.9028 135.348 30.9028 cv
136.01 30.9028 136.366 30.3765 136.366 29.2954 cv
136.366 28.2134 136.01 27.687 135.348 27.687 cv
135.348 31.3784 mo
134.107 31.3784 133.729 30.5464 133.729 29.2954 cv
133.729 28.0278 134.097 27.2114 135.348 27.2114 cv
136.582 27.2114 136.961 28.0278 136.961 29.2954 cv
136.961 30.5464 136.582 31.3784 135.348 31.3784 cv
f
139.569 29.0571 mo
140.838 29.0571 li
140.878 29.0571 140.899 29.0747 140.899 29.1147 cv
140.899 29.4771 li
140.899 29.5151 140.878 29.5337 140.838 29.5337 cv
139.569 29.5337 li
139.569 31.2827 li
139.569 31.3218 139.553 31.3384 139.519 31.3384 cv
139.061 31.3384 li
139.021 31.3384 139.004 31.3218 139.004 31.2827 cv
139.004 27.3071 li
139.004 27.269 139.021 27.2515 139.061 27.2515 cv
141.2 27.2515 li
141.24 27.2515 141.262 27.269 141.262 27.3071 cv
141.262 27.6646 li
141.262 27.7046 141.24 27.7271 141.2 27.7271 cv
139.615 27.7271 li
139.587 27.7271 139.569 27.7446 139.569 27.7729 cv
139.569 29.0571 li
cp
f
146.443 27.2515 mo
146.478 27.2515 146.494 27.2681 146.494 27.3081 cv
146.494 31.2827 li
146.494 31.3218 146.478 31.3384 146.443 31.3384 cv
145.984 31.3384 li
145.944 31.3384 145.929 31.3218 145.929 31.2827 cv
145.929 27.3081 li
145.929 27.2681 145.944 27.2515 145.984 27.2515 cv
146.443 27.2515 li
cp
f
150.94 30.3989 mo
150.94 27.3081 li
150.94 27.269 150.957 27.2515 150.991 27.2515 cv
151.438 27.2515 li
151.479 27.2515 151.495 27.269 151.495 27.3081 cv
151.495 31.2817 li
151.495 31.3218 151.479 31.3394 151.438 31.3394 cv
150.957 31.3394 li
150.906 31.3394 150.896 31.3325 150.878 31.2935 cv
149.26 28.1909 li
149.26 31.2817 li
149.26 31.3218 149.242 31.3394 149.202 31.3394 cv
148.761 31.3394 li
148.722 31.3394 148.704 31.3218 148.704 31.2817 cv
148.704 27.3081 li
148.704 27.269 148.722 27.2515 148.761 27.2515 cv
149.236 27.2515 li
149.287 27.2515 149.299 27.2573 149.315 27.2974 cv
150.94 30.3989 li
cp
f
154.269 29.0571 mo
155.536 29.0571 li
155.576 29.0571 155.599 29.0747 155.599 29.1147 cv
155.599 29.4771 li
155.599 29.5151 155.576 29.5337 155.536 29.5337 cv
154.269 29.5337 li
154.269 31.2827 li
154.269 31.3218 154.252 31.3384 154.218 31.3384 cv
153.759 31.3384 li
153.72 31.3384 153.702 31.3218 153.702 31.2827 cv
153.702 27.3071 li
153.702 27.269 153.72 27.2515 153.759 27.2515 cv
155.898 27.2515 li
155.938 27.2515 155.961 27.269 155.961 27.3071 cv
155.961 27.6646 li
155.961 27.7046 155.938 27.7271 155.898 27.7271 cv
154.313 27.7271 li
154.285 27.7271 154.269 27.7446 154.269 27.7729 cv
154.269 29.0571 li
cp
f
159.26 27.687 mo
158.586 27.687 158.234 28.2134 158.234 29.2954 cv
158.234 30.3765 158.586 30.9028 159.26 30.9028 cv
159.922 30.9028 160.278 30.3765 160.278 29.2954 cv
160.278 28.2134 159.922 27.687 159.26 27.687 cv
159.26 31.3784 mo
158.02 31.3784 157.641 30.5464 157.641 29.2954 cv
157.641 28.0278 158.009 27.2114 159.26 27.2114 cv
160.494 27.2114 160.873 28.0278 160.873 29.2954 cv
160.873 30.5464 160.494 31.3784 159.26 31.3784 cv
f
163.482 29.1763 mo
163.991 29.1763 li
164.535 29.1763 164.818 28.9722 164.818 28.4468 cv
164.818 27.9253 164.547 27.7271 164.003 27.7271 cv
163.527 27.7271 li
163.499 27.7271 163.482 27.7446 163.482 27.772 cv
163.482 29.1763 li
cp
163.482 29.6177 mo
163.482 31.2827 li
163.482 31.3228 163.466 31.3394 163.432 31.3394 cv
162.973 31.3394 li
162.934 31.3394 162.916 31.3228 162.916 31.2827 cv
162.916 27.3081 li
162.916 27.2681 162.934 27.2515 162.973 27.2515 cv
164.055 27.2515 li
164.942 27.2515 165.418 27.6255 165.418 28.4341 cv
165.418 29.0972 165.073 29.4487 164.524 29.5669 cv
165.509 31.2485 li
165.537 31.2993 165.515 31.3394 165.47 31.3394 cv
164.938 31.3394 li
164.909 31.3394 164.893 31.3276 164.887 31.3101 cv
163.94 29.6177 li
163.482 29.6177 li
cp
f
169.063 31.3394 mo
169.035 31.3394 169.018 31.3276 169.012 31.3052 cv
168.066 28.2085 li
168.066 31.2817 li
168.066 31.3218 168.05 31.3394 168.01 31.3394 cv
167.591 31.3394 li
167.551 31.3394 167.535 31.3218 167.535 31.2817 cv
167.535 27.3081 li
167.535 27.269 167.551 27.2515 167.591 27.2515 cv
168.203 27.2515 li
168.231 27.2515 168.253 27.2632 168.259 27.2856 cv
169.318 30.6597 li
170.382 27.2856 li
170.393 27.2632 170.416 27.2515 170.444 27.2515 cv
171.005 27.2515 li
171.039 27.2515 171.056 27.269 171.056 27.3081 cv
171.056 31.2817 li
171.056 31.3218 171.039 31.3394 171.005 31.3394 cv
170.58 31.3394 li
170.541 31.3394 170.523 31.3218 170.523 31.2817 cv
170.523 28.2085 li
169.584 31.3052 li
169.578 31.3276 169.561 31.3394 169.533 31.3394 cv
169.063 31.3394 li
cp
f
175.148 29.895 mo
174.531 27.8237 li
173.914 29.895 li
175.148 29.895 li
cp
173.778 30.3706 mo
173.513 31.2935 li
173.501 31.3218 173.479 31.3384 173.45 31.3384 cv
173.002 31.3384 li
172.962 31.3384 172.946 31.3101 172.962 31.27 cv
174.197 27.2798 li
174.197 27.2632 174.208 27.2515 174.236 27.2515 cv
174.883 27.2515 li
174.899 27.2515 174.916 27.2632 174.922 27.2856 cv
176.145 31.2651 li
176.161 31.3169 176.145 31.3384 176.1 31.3384 cv
175.606 31.3384 li
175.578 31.3384 175.556 31.3218 175.551 31.2935 cv
175.284 30.3706 li
173.778 30.3706 li
cp
f
178.527 31.3394 mo
178.493 31.3394 178.476 31.3218 178.476 31.2817 cv
178.476 27.7729 li
178.476 27.7437 178.459 27.7271 178.431 27.7271 cv
177.451 27.7271 li
177.412 27.7271 177.395 27.7046 177.395 27.6646 cv
177.395 27.3081 li
177.395 27.269 177.412 27.2515 177.451 27.2515 cv
180.067 27.2515 li
180.105 27.2515 180.123 27.269 180.123 27.3081 cv
180.123 27.6646 li
180.123 27.7046 180.105 27.7271 180.067 27.7271 cv
179.082 27.7271 li
179.053 27.7271 179.042 27.7437 179.042 27.7729 cv
179.042 31.2817 li
179.042 31.3218 179.024 31.3394 178.985 31.3394 cv
178.527 31.3394 li
cp
f
182.534 27.2515 mo
182.567 27.2515 182.585 27.2681 182.585 27.3081 cv
182.585 31.2827 li
182.585 31.3218 182.567 31.3384 182.534 31.3384 cv
182.076 31.3384 li
182.035 31.3384 182.019 31.3218 182.019 31.2827 cv
182.019 27.3081 li
182.019 27.2681 182.035 27.2515 182.076 27.2515 cv
182.534 27.2515 li
cp
f
186.352 31.3784 mo
185.196 31.3784 184.682 30.5298 184.682 29.2896 cv
184.682 28.0659 185.196 27.2114 186.352 27.2114 cv
186.736 27.2114 187.02 27.2632 187.337 27.438 cv
187.364 27.4614 187.364 27.4956 187.348 27.5347 cv
187.179 27.8462 li
187.161 27.8853 187.127 27.8853 187.099 27.8687 cv
186.855 27.7505 186.702 27.6987 186.386 27.6987 cv
185.752 27.6987 185.281 28.2085 185.281 29.2896 cv
185.281 30.3872 185.74 30.8911 186.386 30.8911 cv
186.669 30.8911 186.85 30.8521 187.104 30.7163 cv
187.139 30.6997 187.161 30.7046 187.179 30.7319 cv
187.354 31.0552 li
187.37 31.0894 187.364 31.1187 187.337 31.146 cv
187.009 31.3276 186.742 31.3784 186.352 31.3784 cv
f
189.13 31.0952 mo
189.294 30.7163 li
189.311 30.6821 189.339 30.6714 189.373 30.688 cv
189.61 30.7896 189.825 30.8862 190.244 30.8862 cv
190.681 30.8862 190.941 30.6714 190.941 30.314 cv
190.941 29.98 190.806 29.8101 190.171 29.4937 cv
189.43 29.1313 189.181 28.7974 189.181 28.27 cv
189.181 27.6987 189.6 27.2124 190.375 27.2124 cv
190.833 27.2124 191.122 27.2573 191.462 27.4038 cv
191.496 27.4214 191.508 27.4438 191.49 27.478 cv
191.331 27.8228 li
191.315 27.8628 191.292 27.8745 191.252 27.8569 cv
190.986 27.7505 190.766 27.6987 190.442 27.6987 cv
189.99 27.6987 189.792 27.9536 189.792 28.2485 cv
189.792 28.5366 189.877 28.689 190.499 28.9956 cv
191.27 29.3745 191.553 29.6636 191.553 30.269 cv
191.553 30.9263 191.094 31.3784 190.284 31.3784 cv
189.814 31.3784 189.497 31.3335 189.157 31.1577 cv
189.13 31.1401 189.118 31.1187 189.13 31.0952 cv
f
102.469 37.7603 mo
101.852 35.689 li
101.235 37.7603 li
102.469 37.7603 li
cp
101.099 38.2358 mo
100.833 39.1587 li
100.822 39.187 100.799 39.2036 100.771 39.2036 cv
100.323 39.2036 li
100.284 39.2036 100.267 39.1753 100.284 39.1353 cv
101.518 35.145 li
101.518 35.1284 101.529 35.1167 101.557 35.1167 cv
102.203 35.1167 li
102.22 35.1167 102.237 35.1284 102.242 35.1509 cv
103.465 39.1304 li
103.482 39.1821 103.465 39.2036 103.42 39.2036 cv
102.927 39.2036 li
102.899 39.2036 102.876 39.187 102.871 39.1587 cv
102.605 38.2358 li
101.099 38.2358 li
cp
f
107.608 38.2642 mo
107.608 35.1733 li
107.608 35.1343 107.625 35.1177 107.659 35.1177 cv
108.106 35.1177 li
108.146 35.1177 108.164 35.1343 108.164 35.1733 cv
108.164 39.147 li
108.164 39.187 108.146 39.2046 108.106 39.2046 cv
107.625 39.2046 li
107.574 39.2046 107.563 39.1978 107.546 39.1597 cv
105.927 36.0562 li
105.927 39.147 li
105.927 39.187 105.91 39.2046 105.871 39.2046 cv
105.428 39.2046 li
105.389 39.2046 105.373 39.187 105.373 39.147 cv
105.373 35.1733 li
105.373 35.1343 105.389 35.1177 105.428 35.1177 cv
105.904 35.1177 li
105.956 35.1177 105.966 35.1226 105.983 35.1626 cv
107.608 38.2642 li
cp
f
111.475 38.728 mo
112.245 38.728 112.579 38.2642 112.579 37.1606 cv
112.579 36.0562 112.245 35.5923 111.479 35.5923 cv
110.988 35.5923 li
110.959 35.5923 110.942 35.6099 110.942 35.6372 cv
110.942 38.6831 li
110.942 38.7114 110.954 38.728 110.981 38.728 cv
111.475 38.728 li
cp
110.433 39.2046 mo
110.393 39.2046 110.376 39.186 110.376 39.1479 cv
110.376 35.1733 li
110.376 35.1333 110.393 35.1167 110.433 35.1167 cv
111.479 35.1167 li
112.641 35.1167 113.179 35.7622 113.179 37.1606 cv
113.179 38.5474 112.641 39.2046 111.479 39.2046 cv
110.433 39.2046 li
cp
f
118.552 35.1167 mo
118.586 35.1167 118.604 35.1333 118.604 35.1733 cv
118.604 39.1479 li
118.604 39.187 118.586 39.2036 118.552 39.2036 cv
118.094 39.2036 li
118.053 39.2036 118.037 39.187 118.037 39.1479 cv
118.037 35.1733 li
118.037 35.1333 118.053 35.1167 118.094 35.1167 cv
118.552 35.1167 li
cp
f
123.05 38.2642 mo
123.05 35.1733 li
123.05 35.1343 123.066 35.1177 123.101 35.1177 cv
123.548 35.1177 li
123.588 35.1177 123.604 35.1343 123.604 35.1733 cv
123.604 39.147 li
123.604 39.187 123.588 39.2046 123.548 39.2046 cv
123.066 39.2046 li
123.016 39.2046 123.005 39.1978 122.987 39.1597 cv
121.369 36.0562 li
121.369 39.147 li
121.369 39.187 121.352 39.2046 121.312 39.2046 cv
120.87 39.2046 li
120.831 39.2046 120.813 39.187 120.813 39.147 cv
120.813 35.1733 li
120.813 35.1343 120.831 35.1177 120.87 35.1177 cv
121.346 35.1177 li
121.396 35.1177 121.408 35.1226 121.425 35.1626 cv
123.05 38.2642 li
cp
f
126.384 36.9233 mo
127.651 36.9233 li
127.691 36.9233 127.713 36.9399 127.713 36.98 cv
127.713 37.3423 li
127.713 37.3813 127.691 37.3989 127.651 37.3989 cv
126.384 37.3989 li
126.384 39.1479 li
126.384 39.187 126.366 39.2036 126.332 39.2036 cv
125.874 39.2036 li
125.834 39.2036 125.817 39.187 125.817 39.1479 cv
125.817 35.1733 li
125.817 35.1343 125.834 35.1167 125.874 35.1167 cv
128.014 35.1167 li
128.054 35.1167 128.075 35.1343 128.075 35.1733 cv
128.075 35.5298 li
128.075 35.5698 128.054 35.5923 128.014 35.5923 cv
126.429 35.5923 li
126.4 35.5923 126.384 35.6099 126.384 35.6382 cv
126.384 36.9233 li
cp
f
131.374 35.5522 mo
130.7 35.5522 130.35 36.0786 130.35 37.1606 cv
130.35 38.2417 130.7 38.7681 131.374 38.7681 cv
132.036 38.7681 132.394 38.2417 132.394 37.1606 cv
132.394 36.0786 132.036 35.5522 131.374 35.5522 cv
131.374 39.2437 mo
130.135 39.2437 129.756 38.4116 129.756 37.1606 cv
129.756 35.8931 130.123 35.0767 131.374 35.0767 cv
132.608 35.0767 132.987 35.8931 132.987 37.1606 cv
132.987 38.4116 132.608 39.2437 131.374 39.2437 cv
f
135.598 37.0415 mo
136.106 37.0415 li
136.65 37.0415 136.934 36.8374 136.934 36.311 cv
136.934 35.7905 136.661 35.5923 136.118 35.5923 cv
135.643 35.5923 li
135.614 35.5923 135.598 35.6099 135.598 35.6372 cv
135.598 37.0415 li
cp
135.598 37.4829 mo
135.598 39.1479 li
135.598 39.187 135.58 39.2046 135.546 39.2046 cv
135.088 39.2046 li
135.048 39.2046 135.031 39.187 135.031 39.1479 cv
135.031 35.1733 li
135.031 35.1333 135.048 35.1167 135.088 35.1167 cv
136.169 35.1167 li
137.058 35.1167 137.533 35.4907 137.533 36.2993 cv
137.533 36.9624 137.188 37.314 136.64 37.4321 cv
137.624 39.1138 li
137.652 39.1646 137.629 39.2046 137.584 39.2046 cv
137.052 39.2046 li
137.024 39.2046 137.007 39.1929 137.001 39.1753 cv
136.056 37.4829 li
135.598 37.4829 li
cp
f
141.178 39.2036 mo
141.149 39.2036 141.133 39.1929 141.127 39.1704 cv
140.181 36.0737 li
140.181 39.147 li
140.181 39.187 140.165 39.2036 140.125 39.2036 cv
139.706 39.2036 li
139.666 39.2036 139.649 39.187 139.649 39.147 cv
139.649 35.1733 li
139.649 35.1343 139.666 35.1167 139.706 35.1167 cv
140.317 35.1167 li
140.346 35.1167 140.368 35.1284 140.374 35.1509 cv
141.433 38.5249 li
142.497 35.1509 li
142.508 35.1284 142.53 35.1167 142.559 35.1167 cv
143.12 35.1167 li
143.153 35.1167 143.171 35.1343 143.171 35.1733 cv
143.171 39.147 li
143.171 39.187 143.153 39.2036 143.12 39.2036 cv
142.694 39.2036 li
142.655 39.2036 142.638 39.187 142.638 39.147 cv
142.638 36.0737 li
141.698 39.1704 li
141.692 39.1929 141.676 39.2036 141.647 39.2036 cv
141.178 39.2036 li
cp
f
147.264 37.7603 mo
146.646 35.689 li
146.029 37.7603 li
147.264 37.7603 li
cp
145.894 38.2358 mo
145.627 39.1587 li
145.616 39.187 145.593 39.2036 145.565 39.2036 cv
145.117 39.2036 li
145.078 39.2036 145.062 39.1753 145.078 39.1353 cv
146.313 35.145 li
146.313 35.1284 146.323 35.1167 146.352 35.1167 cv
146.997 35.1167 li
147.015 35.1167 147.031 35.1284 147.036 35.1509 cv
148.259 39.1304 li
148.276 39.1821 148.259 39.2036 148.214 39.2036 cv
147.722 39.2036 li
147.693 39.2036 147.67 39.187 147.665 39.1587 cv
147.399 38.2358 li
145.894 38.2358 li
cp
f
150.642 39.2036 mo
150.607 39.2036 150.591 39.187 150.591 39.147 cv
150.591 35.6382 li
150.591 35.6089 150.573 35.5923 150.546 35.5923 cv
149.565 35.5923 li
149.526 35.5923 149.51 35.5698 149.51 35.5298 cv
149.51 35.1733 li
149.51 35.1343 149.526 35.1167 149.565 35.1167 cv
152.182 35.1167 li
152.221 35.1167 152.237 35.1343 152.237 35.1733 cv
152.237 35.5298 li
152.237 35.5698 152.221 35.5923 152.182 35.5923 cv
151.196 35.5923 li
151.168 35.5923 151.156 35.6089 151.156 35.6382 cv
151.156 39.147 li
151.156 39.187 151.14 39.2036 151.1 39.2036 cv
150.642 39.2036 li
cp
f
154.653 35.1167 mo
154.688 35.1167 154.705 35.1333 154.705 35.1733 cv
154.705 39.1479 li
154.705 39.187 154.688 39.2036 154.653 39.2036 cv
154.195 39.2036 li
154.155 39.2036 154.139 39.187 154.139 39.1479 cv
154.139 35.1733 li
154.139 35.1333 154.155 35.1167 154.195 35.1167 cv
154.653 35.1167 li
cp
f
158.364 35.5522 mo
157.69 35.5522 157.339 36.0786 157.339 37.1606 cv
157.339 38.2417 157.69 38.7681 158.364 38.7681 cv
159.026 38.7681 159.384 38.2417 159.384 37.1606 cv
159.384 36.0786 159.026 35.5522 158.364 35.5522 cv
158.364 39.2437 mo
157.124 39.2437 156.745 38.4116 156.745 37.1606 cv
156.745 35.8931 157.113 35.0767 158.364 35.0767 cv
159.599 35.0767 159.978 35.8931 159.978 37.1606 cv
159.978 38.4116 159.599 39.2437 158.364 39.2437 cv
f
164.257 38.2642 mo
164.257 35.1733 li
164.257 35.1343 164.273 35.1177 164.308 35.1177 cv
164.755 35.1177 li
164.795 35.1177 164.812 35.1343 164.812 35.1733 cv
164.812 39.147 li
164.812 39.187 164.795 39.2046 164.755 39.2046 cv
164.273 39.2046 li
164.223 39.2046 164.212 39.1978 164.194 39.1597 cv
162.576 36.0562 li
162.576 39.147 li
162.576 39.187 162.559 39.2046 162.519 39.2046 cv
162.077 39.2046 li
162.038 39.2046 162.021 39.187 162.021 39.147 cv
162.021 35.1733 li
162.021 35.1343 162.038 35.1177 162.077 35.1177 cv
162.553 35.1177 li
162.604 35.1177 162.615 35.1226 162.632 35.1626 cv
164.257 38.2642 li
cp
f
170.661 39.2036 mo
170.628 39.2036 170.61 39.187 170.61 39.147 cv
170.61 35.6382 li
170.61 35.6089 170.594 35.5923 170.565 35.5923 cv
169.586 35.5923 li
169.547 35.5923 169.529 35.5698 169.529 35.5298 cv
169.529 35.1733 li
169.529 35.1343 169.547 35.1167 169.586 35.1167 cv
172.201 35.1167 li
172.24 35.1167 172.258 35.1343 172.258 35.1733 cv
172.258 35.5298 li
172.258 35.5698 172.24 35.5923 172.201 35.5923 cv
171.217 35.5923 li
171.188 35.5923 171.177 35.6089 171.177 35.6382 cv
171.177 39.147 li
171.177 39.187 171.159 39.2036 171.119 39.2036 cv
170.661 39.2036 li
cp
f
174.725 36.9233 mo
176.05 36.9233 li
176.089 36.9233 176.111 36.9399 176.111 36.98 cv
176.111 37.3423 li
176.111 37.3813 176.089 37.3989 176.05 37.3989 cv
174.725 37.3989 li
174.725 38.6831 li
174.725 38.7114 174.735 38.729 174.765 38.729 cv
176.411 38.729 li
176.451 38.729 176.474 38.7456 176.474 38.7847 cv
176.474 39.1479 li
176.474 39.187 176.451 39.2036 176.411 39.2036 cv
174.215 39.2036 li
174.176 39.2036 174.158 39.187 174.158 39.1479 cv
174.158 35.1733 li
174.158 35.1343 174.176 35.1167 174.215 35.1167 cv
176.411 35.1167 li
176.451 35.1167 176.474 35.1343 176.474 35.1733 cv
176.474 35.5298 li
176.474 35.5698 176.451 35.5923 176.411 35.5923 cv
174.765 35.5923 li
174.735 35.5923 174.725 35.6099 174.725 35.6382 cv
174.725 36.9233 li
cp
f
180.016 39.2437 mo
178.861 39.2437 178.346 38.395 178.346 37.1548 cv
178.346 35.9321 178.861 35.0767 180.016 35.0767 cv
180.401 35.0767 180.685 35.1284 181.001 35.3032 cv
181.029 35.3267 181.029 35.3608 181.012 35.3999 cv
180.843 35.7114 li
180.826 35.7505 180.791 35.7505 180.763 35.7339 cv
180.521 35.6157 180.367 35.564 180.05 35.564 cv
179.416 35.564 178.946 36.0737 178.946 37.1548 cv
178.946 38.2524 179.405 38.7563 180.05 38.7563 cv
180.333 38.7563 180.514 38.7173 180.77 38.5815 cv
180.803 38.5649 180.826 38.5698 180.843 38.5981 cv
181.019 38.9204 li
181.035 38.9546 181.029 38.9839 181.001 39.0112 cv
180.673 39.1929 180.407 39.2437 180.016 39.2437 cv
f
183.57 37.3979 mo
183.542 37.3979 183.525 37.4155 183.525 37.4438 cv
183.525 39.147 li
183.525 39.187 183.507 39.2046 183.475 39.2046 cv
183.016 39.2046 li
182.976 39.2046 182.959 39.187 182.959 39.147 cv
182.959 35.1733 li
182.959 35.1333 182.976 35.1167 183.016 35.1167 cv
183.475 35.1167 li
183.507 35.1167 183.525 35.1333 183.525 35.1733 cv
183.525 36.8774 li
183.525 36.9058 183.542 36.9224 183.57 36.9224 cv
185.133 36.9224 li
185.161 36.9224 185.178 36.9058 185.178 36.8774 cv
185.178 35.1733 li
185.178 35.1333 185.195 35.1167 185.234 35.1167 cv
185.688 35.1167 li
185.728 35.1167 185.744 35.1333 185.744 35.1733 cv
185.744 39.147 li
185.744 39.187 185.728 39.2046 185.688 39.2046 cv
185.234 39.2046 li
185.195 39.2046 185.178 39.187 185.178 39.147 cv
185.178 37.4438 li
185.178 37.4155 185.161 37.3979 185.133 37.3979 cv
183.57 37.3979 li
cp
f
190.192 38.2642 mo
190.192 35.1733 li
190.192 35.1343 190.209 35.1177 190.243 35.1177 cv
190.69 35.1177 li
190.73 35.1177 190.747 35.1343 190.747 35.1733 cv
190.747 39.147 li
190.747 39.187 190.73 39.2046 190.69 39.2046 cv
190.209 39.2046 li
190.158 39.2046 190.147 39.1978 190.131 39.1597 cv
188.512 36.0562 li
188.512 39.147 li
188.512 39.187 188.494 39.2046 188.454 39.2046 cv
188.013 39.2046 li
187.974 39.2046 187.956 39.187 187.956 39.147 cv
187.956 35.1733 li
187.956 35.1343 187.974 35.1177 188.013 35.1177 cv
188.488 35.1177 li
188.539 35.1177 188.551 35.1226 188.567 35.1626 cv
190.192 38.2642 li
cp
f
194.409 35.5522 mo
193.735 35.5522 193.384 36.0786 193.384 37.1606 cv
193.384 38.2417 193.735 38.7681 194.409 38.7681 cv
195.071 38.7681 195.428 38.2417 195.428 37.1606 cv
195.428 36.0786 195.071 35.5522 194.409 35.5522 cv
194.409 39.2437 mo
193.169 39.2437 192.79 38.4116 192.79 37.1606 cv
192.79 35.8931 193.158 35.0767 194.409 35.0767 cv
195.644 35.0767 196.022 35.8931 196.022 37.1606 cv
196.022 38.4116 195.644 39.2437 194.409 39.2437 cv
f
198.632 38.6831 mo
198.632 38.7114 198.643 38.728 198.672 38.728 cv
200.24 38.728 li
200.278 38.728 200.296 38.7515 200.296 38.7915 cv
200.296 39.147 li
200.296 39.187 200.278 39.2036 200.24 39.2036 cv
198.122 39.2036 li
198.083 39.2036 198.065 39.187 198.065 39.147 cv
198.065 35.1733 li
198.065 35.1343 198.083 35.1167 198.122 35.1167 cv
198.581 35.1167 li
198.615 35.1167 198.632 35.1343 198.632 35.1733 cv
198.632 38.6831 li
cp
f
203.391 35.5522 mo
202.717 35.5522 202.366 36.0786 202.366 37.1606 cv
202.366 38.2417 202.717 38.7681 203.391 38.7681 cv
204.053 38.7681 204.41 38.2417 204.41 37.1606 cv
204.41 36.0786 204.053 35.5522 203.391 35.5522 cv
203.391 39.2437 mo
202.151 39.2437 201.772 38.4116 201.772 37.1606 cv
201.772 35.8931 202.14 35.0767 203.391 35.0767 cv
204.625 35.0767 205.004 35.8931 205.004 37.1606 cv
205.004 38.4116 204.625 39.2437 203.391 39.2437 cv
f
209.136 37.5679 mo
208.456 37.5679 li
208.417 37.5679 208.4 37.5513 208.4 37.5112 cv
208.4 37.1606 li
208.4 37.1206 208.417 37.104 208.456 37.104 cv
209.606 37.104 li
209.646 37.104 209.662 37.1206 209.662 37.1606 cv
209.662 38.9272 li
209.662 38.9663 209.651 38.9888 209.628 39.0005 cv
209.312 39.1646 208.983 39.2437 208.553 39.2437 cv
207.398 39.2437 206.877 38.3833 206.877 37.1548 cv
206.877 35.9321 207.398 35.0767 208.553 35.0767 cv
208.933 35.0767 209.222 35.1284 209.538 35.3042 cv
209.566 35.3257 209.566 35.3599 209.549 35.3999 cv
209.385 35.7114 li
209.362 35.7505 209.334 35.7563 209.3 35.7339 cv
209.057 35.6147 208.904 35.564 208.587 35.564 cv
207.953 35.564 207.478 36.0737 207.478 37.1548 cv
207.478 38.2524 207.941 38.7739 208.57 38.7739 cv
208.848 38.7739 208.983 38.7231 209.136 38.6606 cv
209.136 37.5679 li
cp
f
212.22 35.1167 mo
212.254 35.1167 212.271 35.1333 212.271 35.1733 cv
212.271 39.1479 li
212.271 39.187 212.254 39.2036 212.22 39.2036 cv
211.762 39.2036 li
211.722 39.2036 211.705 39.187 211.705 39.1479 cv
211.705 35.1733 li
211.705 35.1333 211.722 35.1167 211.762 35.1167 cv
212.22 35.1167 li
cp
f
215.048 36.9233 mo
216.373 36.9233 li
216.412 36.9233 216.435 36.9399 216.435 36.98 cv
216.435 37.3423 li
216.435 37.3813 216.412 37.3989 216.373 37.3989 cv
215.048 37.3989 li
215.048 38.6831 li
215.048 38.7114 215.059 38.729 215.088 38.729 cv
216.735 38.729 li
216.774 38.729 216.797 38.7456 216.797 38.7847 cv
216.797 39.1479 li
216.797 39.187 216.774 39.2036 216.735 39.2036 cv
214.538 39.2036 li
214.499 39.2036 214.481 39.187 214.481 39.1479 cv
214.481 35.1733 li
214.481 35.1343 214.499 35.1167 214.538 35.1167 cv
216.735 35.1167 li
216.774 35.1167 216.797 35.1343 216.797 35.1733 cv
216.797 35.5298 li
216.797 35.5698 216.774 35.5923 216.735 35.5923 cv
215.088 35.5923 li
215.059 35.5923 215.048 35.6099 215.048 35.6382 cv
215.048 36.9233 li
cp
f
218.618 38.9604 mo
218.783 38.5815 li
218.799 38.5474 218.827 38.5366 218.862 38.5532 cv
219.1 38.6548 219.314 38.7515 219.733 38.7515 cv
220.169 38.7515 220.431 38.5366 220.431 38.1792 cv
220.431 37.8452 220.294 37.6753 219.66 37.3589 cv
218.918 36.9966 218.669 36.6626 218.669 36.1353 cv
218.669 35.5649 219.088 35.0776 219.864 35.0776 cv
220.322 35.0776 220.611 35.1226 220.951 35.269 cv
220.985 35.2866 220.996 35.3091 220.979 35.3433 cv
220.82 35.689 li
220.804 35.728 220.781 35.7397 220.741 35.7222 cv
220.476 35.6157 220.254 35.5649 219.932 35.5649 cv
219.479 35.5649 219.281 35.8188 219.281 36.1138 cv
219.281 36.4019 219.366 36.5542 219.988 36.8608 cv
220.758 37.2397 221.041 37.5288 221.041 38.1343 cv
221.041 38.7915 220.582 39.2437 219.773 39.2437 cv
219.303 39.2437 218.986 39.1987 218.646 39.0239 cv
218.618 39.0054 218.607 38.9839 218.618 38.9604 cv
f
13.0615 22.9829 mo
13.9067 22.9829 14.5947 22.2969 14.5947 21.4497 cv
14.5947 20.6001 13.9067 19.9199 13.0615 19.9199 cv
12.2134 19.9199 11.5283 20.6001 11.5283 21.4497 cv
11.5283 22.2969 12.2134 22.9829 13.0615 22.9829 cv
.9 0 0 .2 cmyk
f
13.0615 31.4048 mo
13.9067 31.4048 14.5947 30.7202 14.5947 29.8735 cv
14.5947 29.0278 13.9067 28.3384 13.0615 28.3384 cv
12.2134 28.3384 11.5283 29.0278 11.5283 29.8735 cv
11.5283 30.7202 12.2134 31.4048 13.0615 31.4048 cv
f
21.4844 22.9829 mo
22.3325 22.9829 23.0166 22.2969 23.0166 21.4497 cv
23.0166 20.6001 22.3325 19.9199 21.4844 19.9199 cv
20.6372 19.9199 19.9512 20.6001 19.9512 21.4497 cv
19.9512 22.2969 20.6372 22.9829 21.4844 22.9829 cv
f
21.4844 31.4048 mo
22.3325 31.4048 23.0166 30.7202 23.0166 29.8735 cv
23.0166 29.0278 22.3325 28.3384 21.4844 28.3384 cv
20.6372 28.3384 19.9512 29.0278 19.9512 29.8735 cv
19.9512 30.7202 20.6372 31.4048 21.4844 31.4048 cv
f
29.9053 22.9829 mo
30.7554 22.9829 31.4404 22.2969 31.4404 21.4497 cv
31.4404 20.6001 30.7554 19.9199 29.9053 19.9199 cv
29.0581 19.9199 28.3755 20.6001 28.3755 21.4497 cv
28.3755 22.2969 29.0581 22.9829 29.9053 22.9829 cv
f
13.0615 14.5591 mo
13.9067 14.5591 14.5947 13.873 14.5947 13.0259 cv
14.5947 12.1782 13.9067 11.4951 13.0615 11.4951 cv
12.2134 11.4951 11.5283 12.1782 11.5283 13.0259 cv
11.5283 13.873 12.2134 14.5591 13.0615 14.5591 cv
f
21.4844 14.5591 mo
22.3325 14.5591 23.0166 13.873 23.0166 13.0259 cv
23.0166 12.1782 22.3325 11.4951 21.4844 11.4951 cv
20.6372 11.4951 19.9512 12.1782 19.9512 13.0259 cv
19.9512 13.873 20.6372 14.5591 21.4844 14.5591 cv
f
29.9053 14.5591 mo
30.7554 14.5591 31.4404 13.873 31.4404 13.0259 cv
31.4404 12.1782 30.7554 11.4951 29.9053 11.4951 cv
29.0581 11.4951 28.3755 12.1782 28.3755 13.0259 cv
28.3755 13.873 29.0581 14.5591 29.9053 14.5591 cv
f
29.9053 31.4048 mo
30.7554 31.4048 31.4404 30.7202 31.4404 29.8735 cv
31.4404 29.0278 30.7554 28.3384 29.9053 28.3384 cv
29.0581 28.3384 28.3755 29.0278 28.3755 29.8735 cv
28.3755 30.7202 29.0581 31.4048 29.9053 31.4048 cv
f
38.3301 22.9829 mo
39.1763 22.9829 39.8633 22.2969 39.8633 21.4497 cv
39.8633 20.6001 39.1763 19.9199 38.3301 19.9199 cv
37.4819 19.9199 36.7993 20.6001 36.7993 21.4497 cv
36.7993 22.2969 37.4819 22.9829 38.3301 22.9829 cv
f
38.3301 31.4048 mo
39.1763 31.4048 39.8633 30.7202 39.8633 29.8735 cv
39.8633 29.0278 39.1763 28.3384 38.3301 28.3384 cv
37.4819 28.3384 36.7993 29.0278 36.7993 29.8735 cv
36.7993 30.7202 37.4819 31.4048 38.3301 31.4048 cv
f
38.3301 14.5591 mo
39.1763 14.5591 39.8633 13.873 39.8633 13.0239 cv
39.8633 12.1812 39.1763 11.4932 38.3301 11.4932 cv
37.4819 11.4932 36.7993 12.1812 36.7993 13.0239 cv
36.7993 13.873 37.4819 14.5591 38.3301 14.5591 cv
f
48.6367 24.1899 mo
48.6367 24.1328 48.6709 24.1001 48.7275 24.1001 cv
51.9009 24.1001 li
51.9805 24.1001 52.0259 24.0537 52.0259 23.9751 cv
52.0259 23.2607 li
52.0259 23.1821 51.9805 23.1479 51.9009 23.1479 cv
47.6167 23.1479 li
47.5366 23.1479 47.5039 23.1821 47.5039 23.2607 cv
47.5039 31.2173 li
47.5039 31.2954 47.5366 31.3306 47.6167 31.3306 cv
48.5347 31.3306 li
48.6035 31.3306 48.6367 31.2954 48.6367 31.2173 cv
48.6367 27.7153 li
51.1758 27.7153 li
51.2549 27.7153 51.3008 27.6812 51.3008 27.6021 cv
51.3008 26.8765 li
51.3008 26.7974 51.2549 26.7632 51.1758 26.7632 cv
48.6367 26.7632 li
48.6367 24.1899 li
cp
55.8335 23.1479 mo
55.7539 23.1479 55.7207 23.1821 55.7207 23.2607 cv
55.7207 31.2173 li
55.7207 31.2954 55.7539 31.3306 55.8335 31.3306 cv
56.7515 31.3306 li
56.8198 31.3306 56.8535 31.2954 56.8535 31.2173 cv
56.8535 23.2607 li
56.8535 23.1821 56.8198 23.1479 56.7515 23.1479 cv
55.8335 23.1479 li
cp
61.3867 23.1479 mo
61.3076 23.1479 61.2739 23.1821 61.2739 23.2607 cv
61.2739 31.2173 li
61.2739 31.2954 61.3076 31.3306 61.3867 31.3306 cv
62.3047 31.3306 li
62.3726 31.3306 62.4077 31.2954 62.4077 31.2173 cv
62.4077 23.2607 li
62.4077 23.1821 62.3726 23.1479 62.3047 23.1479 cv
61.3867 23.1479 li
cp
69.3877 31.3306 mo
69.4678 31.3306 69.5005 31.2954 69.5005 31.2173 cv
69.5005 24.1899 li
69.5005 24.1328 69.5239 24.1001 69.5796 24.1001 cv
71.5527 24.1001 li
71.6328 24.1001 71.6655 24.0537 71.6655 23.9751 cv
71.6655 23.2607 li
71.6655 23.1821 71.6328 23.1479 71.5527 23.1479 cv
66.3169 23.1479 li
66.2368 23.1479 66.2026 23.1821 66.2026 23.2607 cv
66.2026 23.9751 li
66.2026 24.0537 66.2368 24.1001 66.3169 24.1001 cv
68.2778 24.1001 li
68.3335 24.1001 68.3667 24.1328 68.3667 24.1899 cv
68.3667 31.2173 li
68.3667 31.2954 68.4019 31.3306 68.4697 31.3306 cv
69.3877 31.3306 li
cp
0 0 0 1 cmyk
f
47.2432 19.4009 mo
48.0142 19.7969 48.75 19.877 49.6914 19.877 cv
51.436 19.877 52.5581 19.0049 52.5581 17.418 cv
52.5581 16.2607 52.0142 15.5591 50.5972 14.958 cv
49.3853 14.4697 49.2153 14.2549 49.2153 13.8008 cv
49.2153 13.3379 49.5322 13.02 50.2583 13.02 cv
50.79 13.02 51.2441 13.1099 51.6851 13.292 cv
51.7871 13.3379 51.855 13.292 51.8892 13.2129 cv
52.4224 12.1709 li
52.4561 12.0898 52.4561 12.0107 52.354 11.9771 cv
51.5273 11.6147 51.0513 11.5361 49.9512 11.5361 cv
48.2632 11.5361 47.2651 12.521 47.2651 13.8467 cv
47.2651 15.0601 47.8784 15.8081 49.2954 16.4087 cv
50.3931 16.896 50.6201 17.1328 50.6201 17.5977 cv
50.6201 18.0967 50.2134 18.3921 49.5322 18.3921 cv
48.75 18.3921 48.353 18.2329 47.8784 18.0181 cv
47.7871 17.9839 47.7192 18.0181 47.6851 18.0967 cv
47.1753 19.2637 li
47.1523 19.3101 47.1753 19.355 47.2432 19.4009 cv
59.7891 19.7969 mo
59.8901 19.7969 59.936 19.7529 59.936 19.6499 cv
59.936 13.1558 li
59.936 13.0991 59.959 13.0649 60.0151 13.0649 cv
61.9424 13.0649 li
62.0332 13.0649 62.0781 13.02 62.0781 12.9189 cv
62.0781 11.7617 li
62.0781 11.6597 62.0332 11.6147 61.9424 11.6147 cv
56.1621 11.6147 li
56.0601 11.6147 56.0142 11.6597 56.0142 11.7617 cv
56.0142 12.9189 li
56.0142 13.02 56.0601 13.0649 56.1621 13.0649 cv
58.0552 13.0649 li
58.1113 13.0649 58.145 13.0991 58.145 13.1558 cv
58.145 19.6499 li
58.145 19.7529 58.1914 19.7969 58.27 19.7969 cv
59.7891 19.7969 li
cp
72.1191 11.7617 mo
72.1191 11.6597 72.0742 11.6147 71.9951 11.6147 cv
70.4653 11.6147 li
70.374 11.6147 70.3291 11.6597 70.3291 11.7617 cv
70.3291 17.2251 li
70.3291 18.0298 69.8872 18.4258 68.9922 18.4258 cv
68.1074 18.4258 67.666 18.0298 67.666 17.2251 cv
67.666 11.7617 li
67.666 11.6597 67.6201 11.6147 67.541 11.6147 cv
66.022 11.6147 li
65.9204 11.6147 65.875 11.6597 65.875 11.7617 cv
65.875 17.27 li
65.875 18.8677 66.77 19.877 68.9922 19.877 cv
71.2241 19.877 72.1191 18.8677 72.1191 17.27 cv
72.1191 11.7617 li
cp
f
grestore
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 14.0%%AI8_CreatorVersion: 14.0.0%%For: (Juraj Blako) ()%%Title: (STU-FIIT-anfh.eps)%%CreationDate: 9.10.2012 17:22%%Canvassize: 16383%AI9_DataStream%Gb!R&k@4"nZ2f2XJ9QMhKFVmeP!CG8&0QN,dL2a.KKt&)=DNELa*IBZif7kL=a07SZhNG]=e6Lj7Pgg%7e1j5Zdj.ORLT_3s.nHR%p`DrRmPsJ%H7Pap@:A_oMNT4kl4?fN7A`==DUr1n#h*?`SFqTTU,\Xd`'rBcr6q4J$^5IXm.09liuNS*&bqdhdp9OV,"fX;P3N`^%UWMG?p!XSm[$tY@YaFi$(jCo+:]PImG?fMUm8$abTa?5VK?GA+GQAm33p:o`==sWR!&Z%:GkG%b;?Y(%VGIq^.-:0oQ^@(LX:kSV%6Z,fuTE""R(lfA)Z+D"#VJcKl*-!n:l&+MT)%VN;Y1+59k*,425cc/$2G1pJ#r`T[dL>p&=<P9ZG_53NW$E<V0anN*`L/+l#N(o5%oEn;HdA6>nb&61AOmmSKIF[_GVT[ZP$aZrql=5S3`FWiW5CeA3_[ltM`(t8P'1':#Ng?&6q9'J$okHAr->>E8]['Bb6`JH5JGP*Q%[(G<o=99q>9id?]Bm3Ip!.)$/r?I+JK#V&_[V,>jiX!ZGUC:rj$.oh;.EW+6`X1(a+on[,#SDBO;K.ij-Un*P6!uG`^`78+#XLft%%7elhKM<bKBKVkqh%>C9fI0D3Z)Eo+d6Nt]"Q`D<&(Iaq;Y+6frXUpfn7&pBVG`%skSC@$3!9i,C1.840-JNgmKbM0UloWbs!48>%!5rWpFdHAVj[hMtXpG&I(]GtZ!#+:OVVroG_Tu0gIMRi^.8@^0Bc913C&!pinPc$7Dr\</(=lqtpkr]l/XD*u=I/,]R&Le$P=iYP%.I[T":8M@#<!q3.hr#l`<@l!j`?K]9=G0J-79G?.iDZ=\=njo$_rj.Chn^":H8.Q",CU!WPb6F3b6pOC/_DEF$#@@8aXtKX@#Nqj%X92Z05@M08:>g>)S)>[l"^;*o+XG8Z$lQJZI_p9GIpjdB'?#a<M=JJeY[-`3f&:mV-MJ%H*:k"g&T\8-i\tl#1%goW9H1t].@9p&%Y(?U\/_E8^#pJ7K`3%&*E0%hb@4g+q\VDn@n@PoQn.YeQXi()J5;D9("Fe3kY^Q!SpEGn9bZB`F@[(F(;D-.Rgh3!<b]R"qo1e?T%DE4R8;NC"YGVNa>^MjYX&(Z<6P9gmN%_dp,NM")]_,"/@b;X5Zjp?JQI_n.MFY9jKg%*e3SAQ2JFNZEjbDIifOE)m$=;Kt;+nmGJ%4/NL/*TP+dK9XPB,.A$1%Vs2=0m*=WIZFF^j`k<FBuYR]H%R:0kRYk?3nj*c0!@B@eWD0L8X4]Th6Ph:nd"&QAOmm,C+mb8<r2nq%,]aU4X`?e+<Mij;MrEYS8Wl>gn6`738a2;1n.YJ%r!+elr)<X7IkGY%N_@lOnR!JkJ#iV/^LRuW:*sQ-8a.n#a%t37nR%u?J#iV/%5F7_sE/FEEr[X9'DtRK87jrjhT>SBqT=A7uDtt4K(UT64MG0Q'GfW\:-V<iUSr`&Sc$2F5\=6:!,VI5,*CB68_1:uG.ZrXc4Y":e%.JPL2jcf0mW.BE6hlm5J:N4+j-#kMeKnA2ZX\q=hlf';e5PPW'Kk:%o3:nbb(aa\b:@f;08&FG7P/27(%*`6r#nGEYZR"a99K/T^%E$6brM4qbO,WI7S@1adk)h*Q!a!lfFihd@X?)8SQ9AqfZ5pbK6p^P*Yp#P$"?eB7P#<`+cV%Sjk$KC5^'&p\<iLg#WepoV$-fJ`h%4MnbIFQ%-ff-F,6m8CH[-pcYZ1\j7??cK'-j(Je/MjL%)8_df*LNkF;@>]&cWtZpR4I-9&pUK,>gUP:tF:iN'pG$PZ.B\4deR)EV%0i\?$_iWsdf2GnI]Z$#?/.(f_-js.Go/r+g'UEM'PU#`sI9)Y/0KP>,i-pBE_`#A=p_1gPX:)eDZ4H4HAVkr6i*0)oG>a`.h"u-<%iGXO%8OS2Ke?R@l`T%GUQU`0CMFUrEmVS4b$==A-nL25<Bk8-j;JmZW%DL5q1grB=D(MZrQ+/`8?B/FP)tNm1(2b34;&mPAT#5c8%N%.hI8f]E[>:$9]`<i@e!&kLVHDR:<729?MTYf7WilE<]2su1f7L;XT8qN1gTd:QoC7`Hc`GNQ!VGaK\-Iaptc,QeF81qr$b?U1o%JoUmAao'!8?S0)WKQ3bo1nq_jPm>-6.Z"d2@]E!([tQ,joJ2dL4A&:-6JrclQgm%6^F<ZU=*:Mo!OBYeise['V;@ML7NT0<>,5#S%kg&d_#fCSHr)W\peh*>QO6BV;PDlO7<3;k&>:1^XSY4Qb^F?W391uN8CE[u1aR@41<ZNct``5Nc<)QUGQD?[?SlMbVqa]1od!!Ou%Jj#1*898g4agt"0;p9`ef)QntP[Z5'Fc"[uU=$u]D,W#BekB0eA]c\h9T*@g&1qoCq$GKK8.3Kj<C_Yp*gqX9^MjSA*n+kGXaX4q%:A;3VT4$H;T0cunn<TpR3%r;/MR+BAgK;NQk,(,-b_Gn\nf9joF77X!`raWVcLhUq*_kUHgi\UJ,Wj8m$9TerZdntoqDiWmo7L1A%E487Q1)[YB]l0UZ%(Q76JblLV)D-YVG;Ki_!obS5;/kQNi+;OZrcdtgSFANPJ(3(iBkdF10U^0C@$QoCFPqW3MY#)cS!39I/%STg%!kCMk$U!YT*iZBo1'^(Vb:e'J,"r4L"Xa5JLPO&2_e\pR6q)26`7<kjh4Dk<$<[6O"hIZl8n%\u%NJ48_R)&:$sL[s<A7n)Mp),]%/>0F/#4V,s)1&PLR>cl0GQ'JbRisJ2Y$f,m[LoT*5J>`\[.mM[8Q4((MT\kH,..>#QGS\'1rt[&d<#?k&Le`cg=adl7c3%(YO5X\%0UH-/WnC8M`]HF?C/nUd@]pGDp^)lg0E4_!Ke$2ncMjE0+7?MZrrSE_G;WO;"l-BKmZ699]4.nicQ"c1W^=37/j]ogNkr2/QQ2a%%\`=kfiI:\,IT4.MDc$)8RrMfG?eu(_!0f\(\mQZTESu^_AT['T`rK<40-Ut780r1a)k5Z?!9>15dHnEF!r7qRKki9Qhs@s+Q3D4X%`\-XN!N=g*-mZp%\)DNO+P/AoXi76U/fdRtp^rfY#j2/LM?+heT`oCl<dB5s>NJURrXJ]FrYkGQn%.L#r;6#aIQ\VUV@V#.rr;mi%VVlFskU(<!>:g"d3l8+9?51$OhgdZdHqgaBf4ZoNKdj/l\RUtV1WiYkZ2=]Z.t$VHSLusQFiD<;(elR^*V^VcWdf.=/%I8`?WbgI%Jrtki8X(cJ^]':7B0)Lh%N%!iouFqb$"r=fiIA=B]b+F(,os?%#R><ZY>HN&[ng6*5i'1&-V.H:3,8JlgRAID"Fjpbra-T-l+\2K%F]e<DQ>"p`rbA^.rVX9rm%9KZoV)_a*,+rZ&9B=]s7j)([/:`&o)FJB](l4#^XsJ)bJR^B)>4$5lXFR<Oumh;F=5X6r=VT;0.2BF%WVQ#J?tIg7L3EMY)D&Xn1eXkDn$\,+e=8`uRe#XV^)?rjUe:XRAcVL$R*BH9d@2_=%o='+Q[#-fP?+g#o3YnoOeQX9<aoE$>9*Zc%K+H2S^J2S+Yj;jMs0F@!WBKK**_6;:-dnijN*[j!-kRa^DiXFUr+\!LK,F?7\,aDQ4I'5t\Io+AeW3qj`X"q=GLKD2TTXle01jTo%`'MbuK3R%?.#@;g-nL%J>Fh+cnMhPU\<+I!\\$k,2sZ>'G9?7YFHc-adb6\":eBuQPZsA"["LP$&M\=4h;]rOoZgK1pCPCA*T8)t%K%sQG?q5_dh5(*"(!pJl'!\s@koeb3@I`Hnm4O]V3;O^2;U_i^^HiOE2]AaY*7/I#%](=s.<_VIGo$`frsp6!1iP*;s5T>f>Hh8J%OcA-p\qJT'%Z,c3Qf)`hs&lp+K@.!Z)bifF574/3OR'2OmnSY=mSIj]B61TsNLHJOAOatW"/AQfF;JEh9oJg`BrKRQN#%k"60&I:%USu*UW<>%V<5r#=d[a_sB1e3kCJp@:cb"6P$5TD/eYK8>,&,.c4[7lelF\Neo:WL@$#:m'0?9Lf2]9ThUtgY$7G<8d-C$aITU1K8%HqgW8C'(A#$9Eu/U6ML<ZpLnM29#"UYO8-]1g/SdK_n[crH#O(B7C6I*!T@Yp+Q%cUH)]bS8S<2aO1W=Cp?/>[;UTS4W-rtpC[at%Z^QfK3#g$FPpA2lVl_PF:6#/toTqhIHeh8;g/h6(&@VR3*!h1>BlqCuB1q&j;C`:,RE>p3BStM)>G/A5)jRJO[?MVdSW/*KEYd1W%6C&B5QJQ@ZWmb([E`q`=7W@_1j]&=u$jnDV%Y+B`QN#N"AlM(>.%Pt-[Hk%%i+a#qJ<YTs_.FIEmS^CQPR"_(%27=X2C(:sC#qb;%Cg>5^h0R*#lC0fG6&]>7NN#*MCd&Z13;00"/&jUP]VZn;Z;b)+c<*jumn#:!<A!U6cd)oiJ6;tumuNqOJW^Yt4TsgBWfoc:U$*FD%Z*'lK`/HjX'!dZ5Z1bPQc['okecAOakRVpmN\GGaSVb7_/b)`0^GJ!m][ih7SHq!PNV3:VTc@($:\oRB,mDob:D\1*"a--HEm%dM%WDj@W`mFrpZ.i([3)CM(cFcmofHb6q5Gu]g@%us"dlNCe:MpnaL1q6j#_*-oRo-PKp-s"7g5rq&:5*+X[F>tWqQoE!XmXikR?5cL%FCgW[4!)mUI!#[G.&a`$Zkg#`;dj*6A_L>fR7DBXcAW"$%^aR5KS'W<H%38r_SW27W5;rMc2>KK]);UE#9mQrC>*m-&5_c^F=KA1%WYJ^<[7Lc#Il*&#?^u]C_naMUb-uXGiI:H,[Mj%H@[TW;8lGl/]E[^O"5r>$luOE_1!1I^E&**/1B5hk?a,/GRnNrqM0'MU%K9fs%OUV\=B*?To;rMLiIC68K]JCWp%Sim]M4+qp"395q]E+O7$emUlfp"a)HnLu?>ftbNSk.Mc'NJA',g8ca;A[B52VQO2kN>06DQ<DA%W4']EBGUoj@PjTuf-d<4MPt<;;V]>',-%RR@G?+a7;oR2l.Y>B=;BF"%=XS-+U<<1\1:33(UP>#el4d**_b7Pg7PT)O#%CEH//o4%J;TsaR=<E!s3XUsNO@.*5RYcPT)^]C](=0qLK)U>=$Uq1R)4P/B-R[$C,CUnrcI]@kd9GbWCT:=1A=IN<A:AF=0D9*bt4O[+YoL8%g=RQJ:"4!'g>mq&WHkZt/o6oUH8K"lBf(Kqb)2@$:fl/W]UNYO'a8AU*T_5*WHM*@U"Ve<%Fkr'CT047`cQ'&/HftB0>O2<iu!-#%F7F<0[2\PT5Pp!mA77,,_"SJ-HH/Ve*#X,:dAW5T"OX=5d#%=FIMgXAC='l@?^#ROR`]MeMf^3#e,WqG8XaiV(=nk8H\+ULrLZ;a%)`=QpS1VJYD/9YM%:PJH03<A8$*m]E!RItjKGLB.^`5#H%%mZjc'LC.TT?BXB0CG@5LMq8@YKq,5L6frQ^>fR-U8+G+#4Xle!JGW%6cO?$I103Admg-p'?`UIl/C,jjZR%eY;kf:(FSQTV8OFQF*Ha4'm#M?^\Y*Rii8Wls30bdr+0[>(!<i&MrH.+[4$/^^;HdDYeT0M%?UU9jV6<kDAc(YIZfaBA-aN_8K[#6DpQ$%oV&1h5+Hj6<Xn>ZkHHCEaB6NcLlB%_:!qRB<lf"sjN]DB(GmiLChbC*)NVBqre2LVW%^-6cC/P'inGCKG6obaC1%d_-SF5IM!iolkk)3FD8l3_/&P72M+&;uTJXue4"nAW^g7u-`&k;r^j(MX!Nd:o\lcaSZt@?R*BVEYGq%bMlU_R7+hIT_`3t2g9`0HcW$"d3"\k1\6%i4p0\;J%<b=V5FkrI\5\*OlIm.csq:(8q$S(rDGk/j"Gj9SMNNOZ(8Y#b\kjq_HDj,%%l:CWFkO8dlV4Rsamf2%)S:=='o6Tb1N[oYUK\L45n^G?66)PDUdsn(6"/cdn3qf>X5?bAo=MsVlEA+p09IGeWrfi<l5.^:h7r(B%e%Y8uPc7q!\A:u+pl+Zf`U&$Gpl"q6Yda,VaQ8DEQ2<7K7c9c:IMWX,j-aAYc0'"o-A?H46kT&ol]eG^4=;mA>W4#OQ*7]"pH4g)%Hb1;O$FA6/kkom+-`Ds/:G40uQ^8@$(JK32]e,n;@$gKK:$CTNqhrEDb9jj3ZhEr<hl\S5#R^jf41\tL[nrATQbK"T'WUpcnFKAS%r$Zkr?5Zl2/XL>hQ_ikrG=[+Y+#='"R\O<aQh-8ZSh#Ln_6?P;3CF8I/oPpu%=a$`^(r6Sdmt&-)nf#">CK43;>T?Hj<pL:YpkR'%_S?&TQToa"K.f:g6geF)<J/n5R?^Q(m^#n35fl'>!]^IuqfD&nQ9Gr\@jlHJo),H,U^'-E%h1]RplErl.2)'F@TU%BH,OI9k[a#R%Vj;8Nf`HY0HAtN+HH8M##2e&$8Aqikip7[VZ4l)03$Bs_YXIL=9rN'(2iC`'CW;kVe^A@J=/Msl(FU6#]I3>&b5JW6[i4n%m!R8/%I*-KI8DjQmb71$@aLA>k5*rbR'm_@L7bLI=,/qW`at$ODYWgG2JR7I52KM?L^3k]cs#cjA@*,+&!&AZ_@im=<';Tka%ATt,/kjpA%6TO&'P,QptZCZ=o<8,B\oaVWR>^>ZN!*qPH:fM,6>c^X.omjJUYLs0<_Fl9cWDr)?\H['q4GH2Q7mlS.&i_qkd:1%7T95IE!t3D-%o]].[P.1rHmVcF76CI+[(&&)(4+%3`7YBm\HEb'K%"@cLO"(qb0h3MuimUt;!LIH:gjT(*bEnANO67[\oVsTT?4,#].K5Q+5Ct&k%8sT85hbs[7jTPq(qtW-/l!brdqVnOXQ'q.C<B(Mh2;./^DM9_N4sk:H'o_9j:T^V96HDqa\TZu>;69f+8_#dCSK'cR54cL4Pp]$G%o6_LqC(s;D+>f<EX*[7F)80%l^J#%fXAAU#[,iH795pM?Ol`To`tfN^<<arin9bG?%p+.ms72RR]FB<UQ,XIk5o87Ql29o\qT8V5%C]KFN:PLB)SbeUk'lnTK0sTe2gqF4q^_Gl#i.He,7;*POY`+@pMC#gWpf.(2.j%2$Ib_dN%TS)R7161Cs"*;?=\]/ubUQU,"IX?+%1G?LD][/gd_5A/QQI0*f<(@4OnCrqSj]8'5YIm_sha#\!=tc+a+^N&6C)Xs@h_$E:ZV!#u*<H<j0WLFDVP.#OC]hA/Y[Dd_S$<[g%#FYj.(!Lq:!/Q@F`_nVoE@nqXq`oSWUmk<dg>5Z\VmaQaDrc!l^h*A&=*Z#V_-$@%n0OK*WXrs!8ejNiZBV5SEtMj6+He3O=ag<"%P*NbCH(7X!U!cJPF.M2*c8G24*T]/]_6SOCaGERYD8*FK*bi9#U]?:h_TtFGP^]:W;ah#n?m/I>a26(OEPc!fZG/jD[^o0>]`3'p%."9.%9qA<5\@+\_Kkq1pp%":CITuQ1aV8]3AWuo+I1fO95<6YN'0ZFl0>aC)o=;"A`,Y5%k:^e,8c=Y3im3kc0(^dW\'rsIUiRUQ%i+F2cls9/\o&(0GN?&1/_!L34?L!=#YlYlA,$LOBkRBNq=K6$C\^A,:cMDaoq8@'SOZOZVDobH#ds-I\GA>"@50Z=m!07P5/M^9&%W!JnM4L5RbbnPFC^`ngACda_R62-(\42+U@S=Me_j=rkrQXIDu83e\k/Y,djPP9.;*h41>[N/Y^\>R,b:t'r5WQ^1NP=4[L\cf54%G4Bth*r&J;D"$d=3JiV.W=SF0@nD4%r6:$%Phr<.(ARr:]tI4&4kT_HH@o"sE>"r!#j*dtj&ih5]`\^%hR@&E>HW[qYU:)2I&a78%+;T;`;9UTnlo[3@H_94D)cXa5-i<gfB6,(En-SnQ-RdL"k1`io&BZm<EC4Z?`^6d5>dcp(9Id=s0LtJWaW/dgL<f,SKb$!fB5%4?%8&\Rh\#>EjkpdG<)o,X&R5#"^Sp2[nP5TU'/]ZZSol1a`_WM&h^J"pSXQmg)?osK4X$%I(:\SLqN.NmVoJZ9Bo&(J2Beglt]CViZ%h@H6s?8DKp,ljk?oFjAcq[uIU)>4kFqO&"h'?..:-@PQ+JY8MF(M=hDan3;<Q4""*)Od]SYKNDRbR9[;ZRQMsphld]jBK"d`P0"J%;eNLont:tZ5aKZD,SKL;5ZB7(B7Saacri%#Q*A181lMb/6X[q4S4*cYM('SNcf='Ff;g8>b!*MQl<m+tL%/1,,a<.p1AX1Z08ulh%7t%&o'oEYe2qNb?:a!SZCufm3V2*O:%7cq9d2J!>`@"/gT<%*u^4"U]!e$K.a:<;<_H"S5#GP63m,PDWe;5+"X\<LV.gC!W8kk!G%>$tt67?cCKX]e!?cGFiQHTNj6l;=.tVLG#FqqCl#)H#sW.i<(p&nEPt3Y1j=^ZEN!q?sN5gsB06=de(2#?'%4"VOuUDlO[*N/Csq%7DKc6l9jPYRm3/b/<@uO3f\c7H3hZ`Xff1tm/Zd-/q*[]<m4+(4lWBYI(a\!M^0K%s.,.Zf]-+0k,_@7I0o?jn?A#D>m.gU<\X9`%me_HD:dRl2V[M1iTZUM/d]a7M31T50KqCgmY)0;YPuf%-en?5t!-.%]Wk_V+`R29Gb3^FD=1s-pk1'g1q%T;$<QUEJ17H-=VJYPa%HuRnUmgd/$;^t\E?=Dt"'6sA+X4:fp`K,"iadkrS#'\`2h12dhWVA.[!TE&-MiRj.c@;'pS^!d"]biI,+4$_Sp$ccslEsCshAS.3%0?NqP8W3$WTAK.0Aq%jKdtsZIF9r=@%_ZB!e#B*!eN9o6Lo!(uZepEmdnjkhfQ2O;N20MMRiqH.Lnoa8!GRurHER(Z;f`8BdH!R$%aQRJ$+;e/4!SZ`2"4M;e!/CG4UO1qr;FH&c7Y$R)WK]PnratYkq^mnB5_7=U/Z"7Nar:.G=#6?Fbh$U<<IjBS4/:B,9Nkc:1Tl;6%T5VGC?VC?Udl:F@oX%Ljml-kC<9rG?VPKL.V'qsL*>e>*^C'2mBL(mCC9!eiTk=i$5,_GTf@bX9c85I:?-0kF]bR`/pS<pJ@M+&Y%6$goTOXCMfXa5O*I("T\0`s`<We:6:ZrP;q^)B;>?NZqC!DW4X<S(XqQ\la_=u.]]`@Wt8'GM-*/G"HE1@GO(.B_DT^WL!/nOc`*%=m+[m/ET](-q]A2ZahS=gA!_L0k:RuRb@lH@5`=Y_0EN];f70gd:YeGIuiAiW0$GS/_*T`/h$]MHt;66@mUh&P<.V=N2iD43qL08%n#r!Tg.k+XEq=Sc+&)7-hY`T#-=d-*b+iD(k:$/.nVV@P3S&S8]-(O-T[15hAoZ:5Je<K&RIhV&"Y`:?%$_4DQ`fb?RX'ZsUc-Za%\&GC6rRfKMCL]SsR`5-"hQ.>E(CR'Gqt/jLeGZm>.f=rp8S]?o]XWCnj/("[&iQ!Z>T\*PG4$`cPX\"dI2/J`o'Nm[7QVaQj58j=%l"5b,"[%;)C$..J'&*`pS(./nPMs\omd0=YK%(])#Q4[;Z"j+0b*TV_U;2NK.V8l%mFt&Y'P'GY!?cA51@Gq6F8%'*V+05r[IuA*%gO>QW]mP05R/G0kH=ceaUWf1)ThN2ZHRhP;`!lM?[7Z+uhg33Mnk7g68&/*5Di<6&iYaBA'[CG@gac@&e_GGH(tDVUU01%L)g;m=%*ZPuG#d0*1#K%ALT6$Y*@],Vq/j85I#<,;YlM'm8eNMdNDpIfA^q!mbq.Oe2>^u,u`hn*BdsSG0O#XtV;n)/^oXm;S$3b$((he_W%*PnmrDBFG3]F2(!4/S5iZIL%V<Da!WlDl/SJ<h33rPo]g[H=UlQJCqTK;@&<>akD1faIMY%&Nj<34dF+r>/jnDjppmJQf4urqit@%"jJrF_u$JNoi1%<?g;2[$@K?%$eV*OjG(]n9HlW\(4j4`>5&^pKc0X<k$H=8-f,@*'@3@0T-G9b4]lbUh?*'P]p@NiQ[RraXUhE%%ZICB-rUP1noiPsA3*p.oCp2F[r)?!Z3<l&P2WTe,b=A-3\)Sm,YL3cT@AS-2Oh)R1R#f)pjB0#Z=B:%1GW1-L3=J<QiO1K^cd;L]%rP^a?St/(Gb>+Rr!"]KIhm-EnSrW5DhFcpqnN!gA#!4*HnOHpoPOTrd5U8rXSaskHi4Pfl(EpG)][4^pg;A!ShV5=.Fb%Nf(_9We%(Fta'a&a7K1>,T(68[>I%:.;o\^+5t_Y&L*DlWd[T(Dd"oLQ_p+cuneJ,6_nHNe0F4GK/J^t<Qoi6n8?XTBoODsW)u38Ns=S)Ntl%!pcDt\]aEZ]C,SR"+WIO[kJ.*"^]MPd4fsn_lMo5T-KXBd,WRr2!JC#Q9->Zi&`@p3P8`:?6fti+0YMfg51$!JN;mN0mREEs7.P0%qKfh=k.0VSMtbMbcWp<4(]l71iL*Q`U?$hr4^CYj#5pG7p@'(FBXO+C?)@@eBQkqBTs9"@dROOFp6SJC`NKD!A@'%e.Zi_?Yrh*"%UKE"_GU_(<#b!N;n3Fj##ikeA(8]"9GN+8R,o398G:o=P/6Csea<$QM/9&Q!&)<7l)[!ifRFBGgZmK8cGT8i_P:q3[i.e/5hg6mQ%j)+Gm[gMo'0EBuCb[mB+$Y.KV?$br5SkU?Q$ms$q(<d2&D;]/oX(VJMT*ji31H9`H\]=@aL"jK=GICCeGCh[u^5KN!#X!rh#]<C.%-gohY/T'Zu4HP7gKP[!IPO6![mB$9fiK`u_9(803kPGWujkYO[9'=9:a;b-lLf3u;]k\*eaQD\RcG4X_nAhVT;n2nGrW7>"[GNX5%q:TY'>.hE*hS,`g6hOubr100:e&:i6a!\4>k-3Om=5bKU_A8NXPYEFWo77f:L.?=DVV_@WGfBR,idE9HPT0ao6q>b20c2D!+`OIt%62%e=]`;):n,q#'SC@_7<@G]-=YDq`+OYf^;s5\'LiZq&^H24A1JAlqB2.XqL^JaJ.=U@_&aj[;I)sY)T71Wb7<'lIcf#aHeU7L9%0flLAHm@k>a3c_B>p%W0s-s4^XUJ$B*/@6S=Xs/b'06:L1,2%ae[-W^2AbJQ(S2uRiI@VaUiTP^-NRgI9sOJA;->#1_EL@@a?2$a%*q<0oGR<t3$FutOdJ4u@oW,tUQh]$MIBIIAM0_oqpFKMh%G>pcl'X#H,)+\$FO30B%3It<[c0ec.28"u4.gs^iZp9j0!</B$rRIJ%L]tq'":/kSrfRS!S,EW?L`],q*ulFSLMRsL<>KQLL\+Fc%hEWu&_J'@'jO:c^?=6XrFPs`q7g'Do9k%0(l)#(EUlLq9u/^:C71oK%[^pqp=0'G`1nP&!.FlnOF&'tBZcS@uflO$iBnTKg[^%u6LX\)hT,M;CFQM"?oAg.`6b>Do`9q_\ZRoP?a??e"Z@TD!j3bLuktZ(R%%DlkS!-km_?lMLHBY/TQ43.ShhpA`)^G?ID5!5cAZS.Hjap.2>6]VkGfnPMKbH.6G>*Iu.Egl[_A?nO+RqEqh[0E``G3:jFH6eE.%s.qIhI^sAt?'pD,>I7%88DJ;+ZGRB$MoKR,gYL5'OSt7_32O>KRh!d\qTFFD?&h*=Fs80GMCs<,U@#:+-ZF,b)9KF1>9O4WnGQ^5%B=rXZc%[%B,a]m_afe@@TF8SpUmpLq3R<(rcs>3?g_O%/NfQBV4rm<<(/h.dG`K93C/1NXV[1&g5^>)s3;W`6qsTq4DU3,3:lJm<%h\Tq=mLimD[0sF[VS2kmDq=<bnQW_OX7"C`PGXi&j]AWtdht+AH\tUR6W_LnHS[\POeanLh#@Fh"Vnu0fbfb+0</7LCSU.03fum\%[4HM$BO6jd++B8*h3>*ke%3NBQHaPAXe^TnaYhC&0IPK;'G2]`<Dr3=UA(`dg2km8ZB;j"314kMe%-&q&IroP'Fu'/]HRmabGuLR%Z21CH!j`ihcf[Q+@PuY=c0$m&)+1q:0dVGp-=:^.>;r>RZiUJ#_rIf,Z7RA"S;H"R6KrUT5M*=MZCj)XCWdSQS#o\+f`f[5kU]ZV%_D#p$/gi1Mj1BUr`.,6-grh@DHJJt.A),7q].XN\U`MD^6U&G$iViu"m8rS\\THE/)t`ki=H&TQ\Qd3R?(c;&\N$(,Jfdk!]8/]^%%++k,W>hLtblr>/_V_-MQWl3Fk^?,):rVoTo6?KbL![:EUQ-;L(IrQD`#uU2>O9Yu:AR`'9!+Ff!SdV+'g'001;IbOJOQ&8;LE,V%Wibu/Xa8?[c)/ZgfUU45O`]2FRX'XqTgX#2RrWCh[G/,=ICcGf)`%9^'WZM5(>4jkosQjV\a#(4LCK#LW.#,;GPFd7H[)1U$U@3h%g88$<[!P*.5&".7BIQK'K:6iXCsp[0r7IG=2b/$fOrJ3b]R<hOceI,GK1ho,908b2Dk>L'lj6%,e5Kt7`*cP%=R:blnA-3"*]/nH%qk+@?!RP;u]rh_jrWPF:@\c0d$d>We'C;2)PrY`>Ci'BXhM%UeNZV`Ga7R9k[/A.%0Pa<TZhHf>pdZNMESlZdZ-ZK!FRcc7iAZWS%^IcnsK,`nkH>l>\[$Lsa1K>L6*0i/N8N^RLVc5'cbC4^<F=#t(`-f$HY:#PTT6gXkcRDZbCBP],Hq$8m<P%8u?TiG$#]W9FZ-8CR%ToXPXJK&2e/Zo(ngmGWcHt;J.P"r=/m*@KAW/0GZl;OG*&W/3E-tY9KI!C*Gc.,^MCpJ*\&ERQNb^E'1I3uI:ri+.TnsMZZbU98#%(Ad)=</^ru!PUU1eQgn&-s]Wbe`4&0on=fc/_U1rpl^Ff/_gc"Z:0p`hG`mLnL61P,n]9o$<DO!(?Y[@EYZ`_4f>7;W*d&S1q#r@%RH3hi2u$OIJ@D.14jmF%mHXAa*,.G'*`$.W7no,[T3TuR?3=@G.6FPp^#hl34aqB:H:;nN:%FQ0U=)=BWQV?:?229<&IYE)07VUJ%<&-td4?X<>&\KkfHGg=rQhMbF)n7eA/&A\:3")PKZ+&E/kH0hp&EVs83u'3uRAcc17rl>e?M)X0_6;a%<^PO4q$cVdc^'aq64.8.%=46j-'9M96Wd5-%#1e,YqSHdGMBRM7RB;=oq`/SO1d5Un/QJUH,\+2enbpsaDh4/AZVqr=Rj)/!he4O9'u7*-bL=\JXli4RKeIEq%RNWDI+/CjR^Nb#[6V?jI;H?3nYipH,Uie>^R3Q:7h?a+_EbjCW,CXXp*QRSPAk636U)[KF>I9YYp'JWA_kO!!R(/MB:E\*D)LHDt%i'ejQ\H5;8F-kM2ep=([,U%Snp^KdI<df@VOd9=o]WS*W3MQLNMOPc3Go&u9haM"%I)@/87\j*OEFan_2sqCO(._d66n9i?&5jod%"pW['YI/om?CE'TFY:rjO^>e'WWb2S;"HIr7H31uQo&CD;>kai)YOA,;l'/1Eb:1#XrJrf&5nkHUocN6IST&WOBr(Xh]G&QVFVd]%H9j?_5USq+SPFY0@):c&L3RL@"6N.X)oM,7mQ>0?oPGJZ5tI\t=`<V%1N`J,Kp3rG2o"P<8/o*ipl\tu%7gL8KXULn@4`=dXEYeh%M)n,[4^+0EKB>L*4hNH[BkVA11lfl`n#N&j(mTa&N+d%n8+?4?697jF%@6.@\@R\FUm*OuYNV*<`Po'-%$="YU]?=K+R2hMlS6Qb%Uq+I5.X[e`0[^>Y.;WCq-dO`!)!Td1?.H2=E#1R9A?#V;5T<p/Km.&Q;*Y!`8GSM_WAqHp84_2g;12(fG6RI"3C6>Fgst]r.E$hm%HMk()pKj:".C$nNldY1Hj7;=F+JmYrZ^C2Umm:@Wh#(k0$$>ae?2_0GqL$idS.h6mTr#_,?^C%2R`B#95nEHnO10)F_5Cl`VUCs>%$3#U2ce$+tW:Dg49ps\`WL.A3<T8b29(,iIb9WL(:7/eEH0WL/*_J@,:R>_%bNeW7r+V.8F*[)F:jcjESF'SEZ7DQde(SFjS[a`J%5##?JPHlL2_Bp8''.6CZ7b43;Vg$s`;V'jl\c9BgrfAou<B+#4"<UCW;8M8Z9"7f1gTTa8YO_U8-9qg[T3gCVMu:9PPX6/3+2<<h%7?"NsqXZe,N.n)'e#0Z%HeXP<G>1'j(48uTHi<?Wn%Ge59qHMMWQ\4!_-:nQGeE1*7h*<4m8)a/bP-F1AGXgQE&5#uH`f$GSr.!S%F5ui>\Jr:*5*)j2V[AcMS&,\`\u(/!I-5/$H1Q$Q:KJWPJ'`Q1q*7a-3!Pse!l<YZYcGL/SHmI'b)C8!PZ0P@3Vc.uMl;"[MosO#%@5^!lc7D)og)9,]F12[OnGPG9=*=dbO8gN1K&<#9r`Sk]C)u4?4cU3N[;9G5#1U###bQu7G*STo^i]3gKdJlpQLoI*TKS<p1;*\W%n;^+K\eEQY:%=&1AXX3FZ?%eMRc*Ne%Fot$#>]Mh-b!Tfh:JB4!jC0GO8/I*,uT=JYRLu9lnOkR:$K!EMH5N)l.lPXfb:ha=tY_/%$<!,%Va6fR*<3=F<uG^tU1`tb(+I]ndB`KnGH4"j3'BE*OTI(HPIkTFXb";bg?.NgRAVEJUdt?Ed#CX\=u:H-5RM+e@.)CJ6JAh8%$GGsbOg]'Vnjk<o6@\(AMS3F5.J>CdD7r%hoI:^_^'6ob^.B>b]c&l1f/ONSA)F$C;'Y+@:et>=`a4Y5J8J>oj[]!\0Qb.c@=P40%>?k\&#N(Ecs1:[XOZBJ$pi>C1nG"IaI9[>Pn-t6c_0I=?^=A7Ajsa,f^6bQ^GPANG#YiXNF8qnMN#D`hL"Ma-H/ZfKJfn_4F%Ob#%5gKg."q0<NX@-P0WnPX.94#jJd#>!>/HrF:Q(+\dEYYRa9'cV@9N:%Y0D^49TUTUcPVn[@E1q*/Y%SZNiHtC'$%AI4bI%[$Ht^/p%'=BM*AKWE[3_kIX#NdCof,uKAW.<#u/f)[_=.>V<5&RcLEg-3&OL;Z&qcmHE$dhK=OYc;h[K#HKqtAR;rX3()ncIuA:r_'j#cKlo%g,$ots-;Qg`9iq'"74lJfNhegiiY%pq"4MK3gD6rXqZn1-#5tn:OJG03,ce1Qn$4)F2#,fkI\ot=U*FJ'V64C:[,8Hf-4$pY?*k>%n&F4/09N*?79KXWRkq9R4-c<kdns7oD(KPg6+T2f5@1]_f/;EMi!d2/VRETsA\bTcoZ:7<^/`YS<Xc>2olr9n:[o:-,(pN=SNF5Z%=rGes.WC8KAZeLp_K3DYf[(`K%9%T7U,iaY$q$SU'1+L$WqY&Oh39M+rZ\d!n`8LCo9o;:>?U207;0OV8IjDR.n3kc!&Fi`7\).9%S*a'/j1+CreUJTu48Vm1,e;)KPq;be>RKL%WNXCB\QJLf,I?fkSs$fTiJ434;%VJM2S)C[UnqnG^1O'tJM&4il!Fh@W*cRoS>r#:%10j=<G[\TEdB+^+a2tlc9>K;+U91S@Wd;h7+)C^t$cB?nB@P&_TWHbF)RJMqDV;ebjD'&1aaEFWid2_nB#42[2Nj:cZE]ZE4Ut^X%JFDgVMPQb!p7:oMV+W0bg!7`QlgsFgE0ErX]`1C=<7.usmfRCal^$o%Ed=2WgGJB'UJ&'CNdt9Sr:Z+L]t+;b9Wr1)jHs8KD9Xda%Z6]eq<HrnKkU3MJ3)iN)HcIV<.*`@f=_9U+%ZNhkY/c839D@0%?$!6pI>*Pu-GIO!**0#I<M?k?6lE2jY4q#J_Q35sRYbt/*Ttm8%^`1D)>iSSiq;X;j@*t;,6<+@nj2F;CfhLuFKO@TtPa"mG^^2/Rhf:*9C`<"&+n?TjGZ"Q@'30;D0\ajonWKa^in!K?q+.8LnlosE%gWqI\6XUMU\ATo1jXnu;`;fqfYTlf(>i)T=g/.l!18Yq0hj4RG!2+b<gWoOFgNSdo\[#kYb9>?FV<TQjMJ)-8H#9XDH<YcZLCl!i%+J1LL#&IZ5A"?YAo']62P<=/3+J5g]4if4G%WT[+O#0L]b_kl*XLVACHt8Ot!=nc>=^=%TF`39m<K.+9.RIS\9)sG3M*3_^rqflP%KK_uF5f'<hZ%J-S<V>6\8_uX)!^QOOL,Ydf2`F(R27'q_GiP\o#`J5*bA.]RE8$uMb!D!3[38.4T;6oRVi7lk$c:=([u#Z<`G5Ht%XPu*`8_3*"?)0dT9#IdQK\hus)-pr>o3GZ-cEu(+l'p]RGpiK!QlbQNWD/tgNd()`h@.j/\_'r;0R\"mnPV0s^`DJuIH*UhnTs<"%d:iC9c:^64ONUtYCBgQCP6.-'!#C4#gPmr]_*ZbbWO))*+a4RRfce>$`Vu7]e-5anrVd8QWlLG(\?d9"H:\<5Gjk;3(jqA]g:XjD%l82fNJ]4.<(G'(inQ#pSfN0F:OWM]Jp68S,CGmM8Zc9HlNd`1_"Z>S63.eL2#XhKqNA5d>:>Q3#Q?H%[h_tS5?Qn4IM!EOrO[X.^%NDiGOG,Q,[[#SrV3'.@O+K\\&51XLs<_gSCgEA()m\e6D2Et8">0o[4h/0@CX<JotC`G^8/]Pf\C?HYN#r([6+5'[U>X<tWW;SlU%,+'R]NqOLjG@hb1LTu?<]gaf9>p)-(CUC^kXM#f;*Qt:c*$Hm%@RtlOQBA;(Y/ANjb8I[)l-S3U;1)#n'H`\BB7kq5>u!=B37r<F%G],U)G.o44]$j?p.M;ICe1:U.NKQ_?hbq]_c*uU/?l[C_^0enAh:k5H>7O!F1sAEK7Rq>HC-Z!63.#Rp5Yt-;_=a)fNGtshNhoBd%\se/"D&N#QZ\;g:G+lC"&,Z.r3[&qM7CI0M)'>AWD(o@T*ntK?!AGnM7n['bRoo`!HcKBKTSJ2arN4_ip)u"d/,$3.J$4JKfttG(%fRoTAD[+2Bh$D&`270iHZA.Tb>uCK$6\?tD>Je:X/X3K@m=!Z%3tcB.UR<]5D5DFIPe%=AdMDn*]j"6%Ff\!+dQV+@-OUkU8dCrj%XHNZ=7g%1jV[Gc/2anHtFfh6F;m4ZA`7iX[7eGn`SD10;JtW2)@uKl0KpLW/S^'chq&mY>lsP&U$rbZo/3R.)--LP=V.&X@CaNj3%44gRsqbP5FoN&&80Y"nl]^RnhT,TfHnl>mdIZ:3ndk=q-hEYIAa$RG$@nu%*<\":KSqN9.gO<oGbeh=I7Un?GDh1<l*NG8r`#K>"%(DaFs>`(t9@R-s2J2`1Oi7":BikIWJGf!hF/XRDWpI(1,N`cRWbBoTr3r9>s[>^e"F6MsHkj[q]ru=)s$p)":_/45Vlndktfn-j!%d+N'Y\\*^>TsN(<1Lpm]S3pq]60Ie[-ATl1K+@;:3'[tEI6EhnFFY>lq[>N&'Q0N_3r9=HaWK9-6`8h'Cn4um2tOIppV:!G!p+m?%,0;=_gH630D;<G/r!r:o1g](24):=`)g6lqO7WK;27M73DS='AoNCW>gPSem=Z5S-c%6Fh_*SW`./Geb)dqX<gP7oDc'`XugDA[&%?5tcWYaDbb,jW[p%:Lq0P1ERo@!$M6UcE)!jsdALf"/OXgEf[5Yn[D&IB1U8n"mq'c/H@2VTD6\29j]p=*ED99QnnRK\S16.,1):%,K=c0S,'@LEL*sdfkmXh+F7l2(h9nTX.>\sS;':*8i?d[qca-NDnuKreoF<r@`'/Ij<g:U%WthHkg=j;K4`Qtd[agVetK`fP3H!r%VG\J-dhKgHF*lb[/R.7r)+/&+",ETC0Zfu(Q9_h3MUa\#S_.kH"bu_#=QY1J/FD8MD=[JgO"PCacYcRfggR;?F/9)CXAdTRbDWA(%8N*`Y=TfcWA\A=TkrM?5QTEg,#C_Rn^8_'6"34X,nSQL,YndOL%^-#:2*Hn/W@K(AR46kjdp&)#3VL$mf!6%2XHu8^DPX)UG3,)T%n=(!@2EEFr$\L[PirignfpKQ'%<]k(V+n[o;-R-':_f"%k$sn!*ud]Do&@U(,f\qVZF:V'[@-AaS.S%%SrQS?!<LZR9P5s2frNiU%(-L!Ab3dhKlRO42EusW]\'8E41HV\)(_'qmaUHG)$Cf[VkIFRYO$$974)sCQ;K%J"<:<=`DT[jU)+1jC5'!OHFITMRg/LZ;P\_#o%9XKh&7[.$dm,X3.P.XQ-(5b=gaetuml#=%+Zh(^c&ET-P``4"l#fmm,N^R8RAt1/=L4!O!cF-_@`eGab4"Fp0@HT0cZY=WpK;:IG%P)O$t>`dKi+X0:GUuiWYFA=#8(M)oHs'9A>#8%hbNGl_AiMX7_6q2[X!*Sp\h_^OQN4QX=GoGE1&K-dK_:7qV)hbVI[?crd>CPEe%&K-Kd5@i!8Sb<PWEr^,\8!<4TQUG`!Q=ul(nSI&@m_i8"f+*q,G]?7-mhg"!dD/Vhg0oRoW+fj*BD!%n8K(bZYl,n/K700>*,T!6%Qp,-7\mUdT\1+V!]=j0#4&fujpZpMqeYtIP2H+kl"qd))B73=9<g'"jeH;2"I>2V)TZh>h,7>GOf>dDF&!7BXpVUeQMsm2I\'+SW%gZQJBmt*`F529I+<#t/>D:kP.TR8_pPP6,LS+>N3:B\)\+1Q)MS8gKP]_m!+HoR=27j5)=kJK;>-/\e!E127'DWs6%5+K`"b[O][%7T+D8TJPYenb*%FGYb-oLgb)Vd`J*%[9XEWNW$Kfe*E\?Ejud',94=d_2_TA+WSD\GoLK4Igj0H2oct,=e@XBmt'AtdI(fQ@`JAl%db)#LL*fQ=0SRb8&P"bcQ.pf41VF9]&_1!pp35_3@/&4sa$Phi%`?`\dgkW<#&bLNqZ+P'Bmu/mJ.Wd5@H_P$MW!hU%(/pI+PcRi%)[sc54l-#m/^&"^&=EHQR8'TQBgJkled,Is1;pD)fg]&sDF1JI8:<Hc7dB=.!AdUSYet%J^A]/r,F(BK+!Mr;HZU"2LZ0j0'u8Kq%Deej^*1\RbOW)^5e$^-ncB!P-:5R6ioq;CqF(jjIRuH9^3ba(gD&B/K)`ki=>Y@\CZd`Ii9ne6!fZ"ppqF9n7$>7mBLJ<KW.rOT2%'lLX/jfYS%L,4WHi]iS5B,Xc0GUf4`I*CRI%+n?'Wk`S&Z;'>BIY5R^-c-i$Z)<3pW!3p\jRBGQfn0b9a:Oa<+S%[CR,1/ZaRFA2%$i4]3@Pm4\$--ZD!mL4>MpZ7D3(RpFOQ94^1so/6o,pJPDXacJVW'/=IcuC-`95<VJpZYK>IiCl:bR[oR80X(NCfJG=GTs!\7;5d%i\!R"G%UF[@_oNo'@cXhq8ZQc5l%]U*;0\9\5s>>^,JW,]=uYS@_m^<[#ugb],fcn27;Bn>ma[l?$pq'8p5QgbW:A8o8tpKG3E+H%$`*,D]N"dQ.bSZ+L>AB.7LH?L[R:HUeK.oU@KlBAG(sP:At79leYdqkX/6W-`ah#Q60?*8_i>&UACqpmh5DVtK!1_(/WdjHpq4g.%pL0?Rf!.kk4(57RQ>_eU<MXF)nTc(KX0*2c>9!9BfBt5Q!^0R6h=:>J4i%@=aPWfJlrLqrbY^O78/UXNnRARkHj%oD#7s8efs7EB%:=/,N`or5YZQu0"5qUgX\_jpYf''pO[`/FG2'U>^"t+&_4W2/:)Z*e9AUfs>g7Bg1U5Bo`PM5Ks:hHm9]1L<7*]_\*<VF!qDTaH`%g7`.@B1'sL?=Lf4iqe(O[[5'Pf[k>?9B7YYB6!C0_nEW#8_SF@J7GH<fLi,)95XG#j.)0sfr"B3c*k5F]7=ctUj)]P\m=>MgL\j%%blcHDgnD%<b];slc\L1$S'EQ3BJNofbbd2>V;!6dEJnCEbFS>gB@@aN@a(r<:c=j^W/W0XCn4:52Q:n4OgiH01L$d)fZF;-e!]=G%)-03:OA0@'B@3=ZGDL&rZWOh#HTb=dS]s/r#L'&$bGE\V*BceKSXIkp]mnCF3\uqX-QDNH9kW%,0(2j/WIo"JZi2c:%CK7qh)_Ko%G7*f#9kWit*\s4&.us"e9t(T>Su$VoCq<n4[Tte^faQ&Hn8(-A!%>>QT\4F!!*fcTVDDF.=ka%nG;c!p/tI"U\plW/=o+M7A`OEU%FCr(*7f0K@2Ot^AFLPg%,b*(F-J&:(l-+24D!p?<IfalRk<q--1u'`Bgu)X$9G$e4phk+2LU4oHa4^TA(Pf`.cAX#Qmp`3ll>4-A%B7/EXZ`Qtn'eUBq`%N,j(=#<u>H.u:Q<DPr7'2[68/4+q?#D0<1*[+om^RA#:[aNDAfE2c1lMm9"K/"rQcZ(r&Xf^`s&AY<_.9%C%9k7"/`N1`(gEL:Tr0f_G3EOL2o'NWkZdpg1#OB9&YIV!]jDpPWkNGTYqu+Xb7<a):W4E$MgGc[^_)6F3,)Xq<YPYS`.,%pJk9O-.%BQq^lSGTb>5%)R4&:JO73]:dF<p*`4CBr%h\4GL:8q,U/70te&mGC!lB3oYd(B_aVZ?Oe\O`&'Z"e4V[-LKt\5U,%(]tZ0i)2?_3%31OTW6,p,6fgJlI%/h%ifuX\-84TiG'/b7j%A!=J:fcmF0O69A_hAH;h,(5km=o?rE]6t@iGPS')k3<]:'][2bf@NU9-FRuj`032%mriYn1O6Q7&q[IY#XhJt]%\]5Gk935"Di-gXj%=A`l)'BLgnWM)4Y=*XgI[u!?n],E[q[Hg?47,-q?A:27C\kQ/=pT^e+k+^"PFX%cs$kpG>NoIj!@D=B&],'W:.08h/.&P44k!scrM2=A+P.]RE2VWfO'RX>r8oKoC4BAY<,Td5G`V&eS55"]6mA3H`YeY.,M@3`d8?-%]SOT^5jT.%[TqdF^/o8*Ohpe(0f-f-0\kuK4#Oe$r/SC[L>ghqGIua:^!."12VpF)j6dJHO'Lm62s"ln5)sR(4%N\@eK&j<\'">V%n$TeR-PoKpIDalqqd.2+0s&VYgc7OJ*,\Y787Ipm?,M!^l9)>[Hdp`1$gVi)=PH"(R>)+i9L<liNsA4WIJl%HDVt/X.h$(FBU7<h%&HL)W&o/X)H)$T%>\l29lZ;$l>AH'.6<^6@4`$D@DDIsLqGkq(5f@1M540HCdbO_3IB\[U%<.EIe.E.2/\MnRR)ZM!&a!o`Y3?bG%M>Q>iS$=fFo$L=%g.;oU7l8HGGFqsR6r0^P9ZipCl\Z'ho\Nb+DrhhqN7=fT1aY_Q@5/ZT3/.u;0tP2e3-5S$/0.*bmpb#kf>?R7%j[foYB@c)Vg+>+t2GB%!Y1R-B)=M7o0n9ZuR0G$_nR:#BDerZ`Ye=7[s6C_Q$Y8fJANat_BMZ&a9Gt.-m;cI^d7_FQ:;dR5S7X)^%7Ic!%iY9*"7H2GNjdu:G2YUGhF860tXqhDmI^*"2e_i@2em(*qhMIgd.Cs'"L[AtCGqmKtF*V27g5F3EG;nc`<g7_%E1sUe_^YsG%rY>'sHY-HPXA@KScM^renUm2T;M&g'DTn3R]_EO+D3gP$l%e(PGEJ*oWBNsK>bj^p:$f`Ad2hiR<Bmh2rB'RSVP]3N&(39@%r_q3%q#'JKF6B&:%F9"*T"_$SG+!hEPV*/Ubl+$=gQkB+lb_8h$E7Ef<5/)YH%#9ta^CibrDL'hR]P^*0/Old5tEjKq%sQ8M#d0B9#=9*%otG^b1Wt*m?>CGQCY]Rj-IB^(,VrS99q4t(i:<qjg>,Q5ET3LV[BnUG)8`;p)/_/jSN5LjAnRT?3;pDijWHm!SW`X2PU)b"@7/OF%>@FTGS"Lfad+535c>mE[4pL<qP19+A\"GbF3jY;Y?F]C2<nSaK),HjZ4Y(Bu%S^XZX<W"Z)2*(_]fk./>;eF&U_cahn`#r#c?Eur%Gd:U)TQQcLbOK&J:Fh4b=l11!='*f&g>_d(=E@iHGp\k6FnK']\pS3*K14tC*TY_['(#Q!AL"mT%^=(XReF=BI-eOgJ9)YqT:7E8%DgAMYNfdo5hU0ap%\\S:J55^T2U5JK0^E"J:?#c<9d;f9B$?_2*nBZ4lr:mpW7@U(a:?)'%YMU1jdnKFRc*9'3ZYQ0X:Mou$eZ\`%fj-+\:57,4+=M.lFi!:&=O+hiAK0[>>p<El\bXMba,+?q`cDX>hVC65C6S7dMoNmbXlmIo14nUJ#7eCd/P0aTPkIWOeE_J1<)1=k%=4X@$HhF!`cbc$ZNuUh1m\9uu^DF,A"1n-X[5PfY?N.PGa#;fCj1LN(+ZW"6P%0FsYdJT3Fmi-I0=t`q3m@[^mc`LN6-R0p;a+4!%$H0rk@n/P0YkN@f!]9VC<=Y[6L[#@PJG(uCC[5FkAcWf<`H$^D^(8epL\A8U%s)R=/3mL-f]3%8j]GZkA"O_51iq^uZ2h!ud`4rg%l]mj/[8n0XVl_W6gZh8:SM0*Rhj3q2?-6dq<B0oQI%,%b42dtCG`M,P%%f((j[1PTgYICh_kh`m;7OMNb%H&co"cs?F*`>t*gcH^%U'd!\3qI)P<9)8$C9Y[ZIYTm%$Jt)mOA)g0SIN!a]mfgT)&&K_fPPDMYFg5Ba<\f@VgJ@N;JEYkDqD=hN;*2%7tiL,i`k:*B@0)p%XaX;`6Z%1RT-Hqaqd)MaSKXHCeR&"H3QU8B^qG1VPKPGGX4Wb%n+F#*gA:c5]A;dcJ#hI%2h7:NlY#)to,Xjchs4q/:%kKRmr5J&%rJi[lZ_7!HELM>eR=(h#qY%MPced$B<Ls<JlXt^Jhj,Wd=l/IW5Lm0o"hjTBIV-3he6DnF^5q^_3Ub8^os9F*HN+!>qUmO#BQeLd%Fg%EciiG^@l;%*MR4kM[\,$t[BA!#d^\)G_g0=O:I7cT!Vb$RYfdekF_053lYFk&?NT*:_=jm<DqUoesen:fHI]o@rIr"FP^U8-c%G.cGQSq6HlD#<)TB04]4THkW=?9e>;i@XKXgZ&tYrI'(jk<53ilF21"L\\W4p.N?T]5>$hf?`<;a#WVchs4p)X5@?kdPgL=E-Vt8%YFkc>ZZ-etY4qeGhs.\kI=,78d]g?EDstScP["(rEZa2Y\[7"<)qOKNgZBtLK8/(J?GEmY$f.q69#f5Lp\H>uAU:E7/m2oC]/c04%[cP2OG&GUk0:;2MjBfSgjLoHFf?[UVlb<,i.8V#@NP=/\IbX8#1:c"TpLJO1<^5F=aP'XjX`L*#DY:=rj_UuEr@IT.j9D\gYoW<+%ZesuR(/rrW?9bL_3+`iESEE#2rQ[mohY6k`2m;$0?9b"?>.`='TA>.RHi<:W_W<Jm]BNWdHcJrc8_ioD5Pp+9eKXI+YFkcqIO>'H%:A=V<3C2;Q3Q/U[:48N.me,''V"%JMg[*WGme*nF%ND]5*T-0qD]C#u#qf4If??UQYot">L%QH.L3'3TPLMRHmCjpSMcMPaLU6s!%H[XVB6'!bZ>Q*j3WG^AcJ$^@PUmRDT5u=##S-"u*#.ojVLgW]>a8ZcSGp5!#<KsYa:?5%?Kd]iW]I,ZQDdj;sqNQH=MWa#9B^p3_%S#s99MNCL804%DFO$&cPJ1&\#`f?YIg%7l%iL'4sVldO+pmO]X?FEl6m3K](qCjl-\GiK7X]4T^[IS\%,3QA[f%8/[E`\9,XmS:4%JA9P^L'$7.naFIn1N`=N%mB*AU:97YM'@B-3LU8\R$Tf.3X\(%qtHd`kfTOr4o)(pZ1"6(U3Mf<H@g(s.h>Wn9L<B?-:dRD7@)ld%%m3]QSm<#k`q>ZHN\2O8l7;1)pqkWGfPln9BpnoOKegd9(YC#TPkIS2mLpU\0ruG6;:uLS'p@'".).UN=E;`8^<UB^RD*tN,ecdq%=89HdB@_`H>$lJ$^eY_e;ter:E*Wj>[2$/moas=nSpDKJ-cr\d_:rdkX1jYGAVNdI?EkY"3>?SaCFPFFT7-mI#k<ftr\EIF7rLYU%@05UD0J*`25G!bdiUc$!k[LU>SWMj5"gr'Ep!N?h,2mSD_3n.ol(RTnT8P:R>U[S`@YGFpaapauC@:\rI@[RG+4m2c4EJ?::2U<U%\*@r:[?N.'Kh?SlUK*Rqq8!TVq*SE>]AidSb=f/5Sj%@DMkb0KKUjnNouFfr,5+!V:n>`O9Z4NW&SU3#i/WU!HlEpHb\Ts[g`8fq%=BW*Tqp8l0LrGb^q?]-IRt73r&Gh5YD7]ZL"ZZ_+#9X@^oSl$p5QBY'JX7;Fq48PfcKZG_cs>*5)CD='b(HA\6.+Fc*l+>aRR_S_%5^='o4r@lqPm<!)60.+t97Ch#5V4;*oqSZf(.+9l?<k2A*pkJ=+rWH&H('7p1!(]ZY6gT#oKu[33X("2(j>B(X2)FUi@;N$#uBfq%M.l8!#nRk:]H?8_MC\AQ,(t#)TO[$(I\hUE8mqPB0-m!`&@!TH'YA+>C%/JM7Sfu`Ro\1iNlkI[^e']^-7s-bS-lplcA;?2X[pV!%R!=@"R(XDMSH*KM!7Z-.Y_333)*;/pL[NGU2LEJLk7_b95G!cJW5*Jt,>%IT$^La[eJJ&8_o%6ZBN/@s(s>Tt#ch6$EKpt)#p6CA%;r$sjM$F%4DoC$^+N`F"Nfm"90CNT,;l)ag,CQ>AE<mbK6$/]>&E7aFAZJXu$(/Z+G<;j0$2-mI;3AJ'8h4E$a4]BTH,PA.pQ$'A%QCcNjB<BF4Q;j'ES!eU\$:iJKWkqV6'4dB7VJtP=3V[c(c,CIi$`%pT<O^X8<B,a1H6q7"3U_2J"H5YI2&PQ%.aeqQ\^LF0:`nXE%luPDdq7;)P@nLfLV&e'*dZ:R(6oT(:T8=]A2;P#CK3-r*i-afkl@#=@:i\Me@@i#tEA-<[+Z'kq=BU.1V-coK0gHDc8lDX9i#*US%p3joQjp5X#8nnZBbdEO!nf&_:'%!!t,(8X0><BlZajH>#_s[mtUOTS+qb$BgS0%`<F^@>U(u!,Q3WM8)$=1(K\<FkJ6C.*<8^P5i%##ljV8P'@/-tCk+WQuSV"J5/6j2MqJij9Tc7d*J-:o7528FAgAYB-b+%%Z#>X:&%*MX;I[SQDO`GTsqg%-#0?"L75LIt:CX>[[m'%oU2^oN$p1IA=h^^_7*)$A_e4Zl_3dd4>jMhi\TEsK"cV06+$9@ms*al),!Ysbke9R:E]c+,LA,0kmn)6+TkVVpGXLcNK6E1PN.N+%%!8#3NFgul9r]g80_Z.F,4>Ro,uF1lBBY9[_l_$g:naXePlhhE[jS)6,R8.+G7=jAJe+IFC&`Xi?QMA:=@kRD5SOT%0Fi.]77dBj%PM9.]\kLe%m":P_ME&'8W*Z*O=hL9I%Ni854*@W&UPk2lF?Rj$*$*HJ_XSd*JVbNs.+F38a^phCgnLXLi"b'PXY=2VdSQ<=35?bT%@"K7(khM0T0<q0sd4hXJV&'aX!*YBJMn?oZ$#=lJOmEkc22)4!\*266*F]'=?kl6eP661l4Vm$F@k9?c>*2u(oG^k4Eo</Z0o9d_%G[i?u[NIE4BEnP7r2(V+ouqd0!19#\9"/=!2BmPDp.'lp^f+pt6"i]-Ve/bZa/=_C6]bg42?RS$CdWjSSp,I/^5l*Y8L<GbEtEfe%240>?qm!9nPPn[qg]E-95V&,3Bc+T7Q[03<,Q^K=r*$Y<"JM[.a@]G^c+6gpq\SMe<!Es,)F8&tEYlQHqd?n!9*5H".P:Grg1"ji%<4O8(>cXcma"u8t$`LptNc%b[]btB4i(1k(=r"9kI!Q[:"^rQa:?3D<=?r.Vh*ue-?Lu8oAe.3QA%N0$J6'[5Cke46^$91QNX?",%g#M+!D^5>4ia!';W40j[E$D5QV*,9F7:)n/;YN2J6#Vm0)=^!?;Q6THA<Dk//%DWK7ajQ[>DPj:jieA_7s_H3IS,=`$nPL+c_QpG%hs&3<\`Si(;-1jN4SOjE%u4:MXi5:InPL"6$`*0&8J(l7$r9oXDT=D!(!mBmi112b4MdR7E(X7>8O([QkS$u@da's!JH/X$V**YK%,a;u_)c>iP;\GMO6i]AhH1BB`dt2B_UqT3>:Pp%c5r#)tTF0"h(\34%R/2=s3?.,B#7XR`j]sqAYFGnKe_dd%bJg^JJHg2k1((u\%#h6aBMB2u;.0!V)#IbuT8RL7u<`"sK3>H]BD4gl?4:3T*BbUoq@tl^g,RW_0J1[_JLd>G[!sH@di9)*^)oS9\CVJ.fbREo;b9!8t%UL46j&-\9;Vn1$<%iNOqk]le]_Ss+LVs30iGK6>BQuC7G".i/P+)f^gThtCr3[&$;g`)7nJjE37e`9FS=lschU!6jQ1*1.(*44Xd%P\%6sBnB]C8`s1cS95^GO^5(;obo6M&XK<7]t9XWik7j6m+!`kY[;]0U_NCa]i3V6-(+DFH<j_R2II(%e;[jPg`hOdZoSA>5/sCB%a"N,Dm@@4Tku#0QH<,l+NsE&SdCY2%i!A5\eZTds"U2Y?@5,Wslm#H3"3%/(,?$!<nGogCqoBJeEfeq<I:N]P*8VC!qVSA)8L3:m%L1+b>Os8RmP)1RAZ.mes&0'VB31@FrXts-1In>fIe%ptZ"edOGB?AEpWukc]FJms"I&hL;R>c2RIl7knkg5Fd7m\(B+\C7]Ya0HD%<#>!aK@[ZMIAY0Ib40>GbC("!=\U^]fqJIPahUn?0Ko#\ZK$"%i;,Iq$%IrMUQ<a"-aZLT4Q3>2c4_A(-tk\9f?-r)JM&54,l>gb%4J,,-pfZU--3f4T+)'<4R9i'>^TQ^6WC8^J3IckUZY/F7,ecGUkg3>:5__beqMK/RA[uc:)\d\[JH?!,pjVjgn)$cgpkMA#5LM]H%mAn*b1J]8l2aOK?h`ZP<,jU:\DdGT#IP_3;WRmf+#[s,oU(O6eFPUCtpZ1KPO%`pC#tNG&C,jYl&P8(LYpBk*MDA!YIWX]tge<<9%A5KR`j:R@7<5Pr'r[^O4YZ7F?Mjf3sQ/O:Sf9j^3hk-2VUk9S4#T(SC#<@<'@hGCMOrs3kc%ELUHVT#df,/&9&42[VMn,>cC!EOk%GF;N,c9#Fl*RHb,\u[:&%0C:9OCZ,KG8)fF>-6U3L60B<[!)$rU5&YK6#!8SlVVI6I@8+Zpj#Lt`B]$9!W;bL_1M24`Qel,3/Ik#%Kr.MmP9I&ZIqh@t/4epLK_N8pnVcKJKh:hpW=__O[;aq9"#Fhe;A]2%DI[;J>i+9[h@Z2RH'_)=o67*F+2tEOD4Y\/V[qF_(1)U]%5a(Zk;?(X3/>1CJG^X9&[oX)UbU<*'HFHaf3D6P\!.X;Uh.(4-=PcC<!Zl_iGbuuFErQ81l220BPIe1]N+5eC?*!L$'KXG`kd;ZC%lU:g?]H;XP3)nojV6Q00PuGrjOHEh"B/t#28/uD'>Nck(!,NcNZC4A>Wu7R=TV=0@)5'+j:n(LZhJ>Ma;t5MC(MsgCF(/*)=Q4m\%`?kgJ(PQF]KCXh:c)"%g?g'1.6+b;7M:g5e2+)"*2]!s1AbHqOh''o-DP$i@h<q0Y?K7o13R=2EqbY1`d1c\*:2KR4N8i[^UMr8I%em!Yt>cO7[!<`IE?'DD'oDp&h8KJ$(d^9u_)QUY>QV">O-8g0@_R@s'WdWGYk]MK5pM+ZNG)b!(9,E%[A=\jb]FHDCKKdRp?5aEk%/]VGT7tAlEl>n<cJ_+Tn)fXmZj6Fo/h7alA:F<PZXlcRL5>p'ImWHuAW%DFl5RSbu.N(L)MC02dc+9-(ogBa"V2gSA(M.klC)/Y-%9"DTm,G+Y0+:-pS*]&=kHu.p[&0nr%Rh??>[.aXp?g7576D'j_OFYAV)"&US9,D38;IC=0UU]r5d@l\.PXV7Oe8\e$Qu4Y-eL''$%%?_L$V";;VPe%h9QQP'8<eSij^%mPIbNi\!,l8:Ig+S6608?-VPA.,JC"+?&@DRjmpLG&47668//oREX4F!3\&<5n@J<'?/?PX$@%BNT4Nr1.P'K`%?r=F_092Q[FWXpAkX]Jj-9LcJQQZWe:Upbc<0Mg=mQU0a(#5m.T=)uq[!D\LnIKH<D"CcnA>EB59Fi>lW/O,B-=%l.MgL;9NC-1r#5d`:fl*V^`;U$5I7c5[#MD!tc#&(u9@F3ui?fpB@h:L'`Ve5WG$b0GZ*oA!S6Z1`/MH*HWZ43_)5VD=JTtfLr.c%!*,fpa*%PN3aedF1=4Z4JtQWcm'/Ua(.[Ii;-,Cd<9qB4+e".D/X1Q)7l"].WgFI%j7:oUM!QSRZ)C.3FrTs+`r`!VfGY$)he$Q/%Nm#%=1T7EhO>hRN5gYuj>D:1(JS@9A6-R>_*<=6\F]=:cPS9:6bq_a,$l58b=/`'rR7+,ZA@p]kS2`H>H[\qP9G(%]dQdo'p4;IX%DLnS0BUYdTP)X+X`_G-AhNEl'(cQ"JH:t[dldKdp54k.W\-[)%;tcooA0[YX[OM+#>I(*8V.!<2ZRsl$>hX#_[!jsBdnS\Z+e!;e%G'VW?f`0_rCq0FIhMV9XD8\oWs/]KFF0ZCIW[Ae)X41gJlQ;'eWR32[HLVNbX41etZ7l5S]IK^FX0<Xd(p@-@Dq9'no"mhk:2)c9%/g.^;?;T&_QE*$I&FU<diFlE`rXhO7l,N`J_#N>*,3:/NUmm7^_2gQ,XnQ(L<7ahKgiY:_l,</POrO(\UY3")rc+iEdGn7*mZMXh%h7.>-e3.mM!B!7Me-:s8E7Lrj.."GLG96\Vpc%t]\-P%mhq1@gA:R1"^lKu?ndUKUFu/P:pWFN7*l,7&d2P;&MPd*n8^`\eogbO.%Z7.O4M?r>@"MIZVICamh;Bhrk+;`T$5iGo\bo:fWQg;IFePJsAW_%eu1/scee+"j2Uf[U6(9p.!^nMN;YlG+\8gR<9<.[`P@6oJl%),u\k8HfEd;/5a>94X80)$D>/19_6+V+:sD8L3=I.UWQDXq]f\;N.agBG8;''l)5"2G,;fr/t7%O>O+-cnkn6i\Z?d1J*=P"c1C:%9;OT[,n_bH!gA0%:.,sHV(G5-M0M-+]d+C?a@$Zk8[1k&R1s<R_&uECP):anQopf`[<8E]4I%+!!LZ1V1gh&P^`ms=QTu,jH'=Iq%Xsq/F!!NdI5Ved%JQ<R!VF6T?@1f&l\dfFZ1]e+G&kC"V<!pI8M%jP;Rn0P:0Z?^JM<Zc/SO@TKeDHpL9dW^n;f%t)$?4VUhUL%@%bJl"Y[=Cdnjo37gM.eY>i];'/KaJG$,P<u97g3n*HmJ9GJ1aql&Hq5*8O=hEGriq0$E/X--FkN7\hJgU&W^Gt,T&S&`A'rH8c^87%(0RUH!AI%t-)CYiSjN!>,tUNrj=s(WOs#kq!XtleFg$e9U5K8[Ys?N(<1&UHcp.@N.LmW,Oq<-F,0AhrPZ.`#5Tp,d!k)DaR\1i?%.Rj"f:]L]QAsd9>BJ<7:*4^la-PA0S\HiTM[hc3d%M^uRJ8bL$BL8gW5t,<.V<&o<6"p=7$6X?t#8a4%P9kP),*GMgY9C^(aHDZY%"W.^dA@,5k_0i+:74R=4^hNm:hI#_)W2"tq(J+Z?8J/6FV,0CRJ0#nt8eEW$CI790!rR\%9*J]S-/Ik`8:uHe'c^*PG_6,dPY#Sh%J70IZ-P;.;*(W[&5XJC@koF"3kX_M4D?YhiVm.gE:u.Yk8/BYZ!;rK&>#GX1"TBb-8J2JUTMIEK)Z4Uf(o@G1&HH6Y[jTfRX!7TZ%^mBSoTT\"i,g^3=V1Bg,.-so*+>Kgg&-stn>&q"[Jdi1G!D<aR)@).Z<J:#MQ,F>-<Q\/>94IE;=T"X[,0#d&:c^l.81$s,O<>0-%!f]fS!^m@;(_,O3rapt2;O'RN&18p/n,gBjK;>lk91#aICLeJ$,dDWOdki[bij]1A;$3mI,FRjCP[.CC/[&,fJrAWq((_lb!-qRA%-(p61FVFnr*N*u^!o6V58_mT9SOp^7RPIu1171'uRpcA$Lf<FY-AQ/'<l8KF5c1pE!:5,3eMR64^6?Sc778Sj:8%;JoCITl#Wb7d%&],_)lZRdi31=A-RS"kPB_WrJV<$NqC,#K4<lToN#&R$`1nf+a(40+.$)ACQ!'-?%*<i-5KI!(D5GU]);A9?C%M_P*"IPXp"Y?-B%$6U<$>@P-VJr>dCXa(B.>Ct9)"pK%6dLmPX11757.%K3.2U8>)J-@e'&5b7"D`3lV1op^sPDOsI1U$ifAG$],Rj)O2gTZ4$'&#VS%M+cc%6N&fFmn26O84A*@La!re/.c:G`PA<>K-#7n;!8Xk8X1W<Y9Aab'EJ@O9F@g8JjG9E!qn:d@[`L#AD9@HJmpEL(au5L3`o!_%5o_u4ZAf!KJa9#Pkl_eoJg.l4`F#X/Jo1`CTLg[p,T\fWcoZ=V.F]U\B2B9',1VWfMib?#"XM9+E'YjC;ZK*>f]CYHa8chdR^^(N%L5B^(C'l4:Xq[j9>Z6<8XUJ:^(CFnWb:!LnC.;ojns\?-"g2$ZE,->W!59A5[5qn^7?WOOP59cr1fujdZ(=NA)I/p8N[HE8^_L=#%D?fHPa;=M$kW[COb!iM0BS;.KPA'MpO?"TBd,P-")YPoqG@UVcMP/pZdpVD%dTBX]c]n^c#)\)R];94L0Nh:P#E7Y%<cA\9s0o(N%gU1m"cLMXmGF1<n8hRF!Cc@t=@?="l$NUkQi@<RHC^$%e'=8E<]KQ8[Y>aasXde"Xd9Srjj`9$4TJ<!R3C4l!WPF0hciC,B;<EDj%;j<4i-gn^l@r+2>1bV4LC,uU0g].sGjUdssN\sOk:)t:E)dpoP'S]R$VGnNlFVOB'm+(ML`.1>Locm9_MEmWk;moaGQ3HpO(oL5V%P+GVg:b$gA"ChT__$21UfCsG3NTGmeFbU9,*1nST.j=-^18$!oT]$7q-)nffgfM%-$bm'+Q^+%"cl?c&#M?&=;fD_n>ik<hb'l3.%L9@5dFIM8uj,q@nKf$9Ho+6%@?!1).:d`402Y0qVc'Q!e?W^dpK8\0t;:JGg0dB76!*78a(KTZSV2(egGcZTaFC"1*Y-#UQa`X6p%Jto9\KNQSRfW)gJNXGD06j3YZ<.B__;B94S9F%NM=L%LFI;`S2GP>64gr3Le0;<U00EBHP*O97h8\dBs,NPGe/0iBC/f-s$s,<oP%%3Z0qrGCUidd@]U)JhniA>\gu.5;Om4X&(#M=iE'bR.\698:DCO+LH.Xo&fR1q^3*#1,Z-$8B742/>bWR4em^79aCEFD@Yk63G!%%/^9L[)"hq,T%#N9hk&>2+rGh?;R/Id(q&FY`^+rV40LL/("7l>1k=_R,or'`jQClta%GPZCZ=kh`ZN.lJ;;jY1>+tr5c5H'B\Z]3%?_M$d20[BcI(n@V'lh#hUX-Zgf:Q#WY6Q8_o1,/f:8RY?3A$K/U:6fKg?hGHJDtpkQlht:ahFO$K'=UPd4)^,1B\5SDFCYc.j\'?%mg5t%j8DAJ\HuqK7b;e&<rlLN![.>'1EES=K&2+%<I5'rs&Q.&JEu7mPd!bW@KUNm1-R%YXI^-2NOum>jSD]WJTQmS_-hSZBgC!0%#@9nTn0Z))f*.oe('P>]Jm:3kEnP[kc)8bXDjr_GXJ>UZT$'T>YUu-b!>t&G@KkHgV!8Y.I7s6Z0P^Zm#k.Tm:^^Ue>IuJqq\`#/%Rn`7LZ4_5CC,I0#r]$oW]i4mF6I?k?VN+B$p8lh2o26&FbG-W@JQ8bE<3:_YpeA!EO%#Y?ojiL&qP_u1Q6d/[WDuC\&6]-JW,/;&%;$Ld>F9@JIM^#mi>m+"&)-"!Uq:<sfjD/Plqe5b^.^U5l9eIEE_6Z>JoW4'GIk:4'fp]I,/S&JZ>-nq+N*L,HU8U$F@&2B2h]%/#%ebp#I?+,jGYMk;RWM?@X\]U)mo\/^<fJ'hA,`*<'o*@2'Wo-TuEl"A/`2&YPGDLlHWB<L%ake0RYR^2cX_^WIjgV9rO,^W$.L*^)%)fGthMlIkCJH-VO->pHs/=U!\lo`A5@bc2IfTR5qgcXk9(<aH)VOfMXm)Mn60:isZNa9+:giPX86gU5Ll#ski*-^7]o@2Kk)i?r*%Ksp7.+?&$gihkI\'o:QD2q1SrGF<a&m>sL-8jC-qpJ/<9!CL%>m(!.V'jGS?Rq7,(jn78G4/f9.jW-:QOnR6,Zob_4OHc$=j;@JG%C>*VG=>9IiRq\fD;0QKec"]!3jH=f/,77iUD2rGID.%^mXk7PZ[GK[C[JdOt\te,[rO)f?=Y'4#'!V<m8%.;uJ63ZEg48h!q:KUY%/QI:QrP?-FKZ9ZH@(+sY]@*PCSUKAggHI]gCh&F_`YMdO%+oh<'$uD:+J-@a.#qbfOqAC!Q`H#RO4kBuUSGQPqIH6DVDSgs8!tMU%II$aJ;63P+de'#2c_3fJbEL7mO\pEE`Hd`h-4%thOFWM=MA`AgcOiW<C@)m=)$1:mkUZu2H.P/HO#%m/p!?hOU2AP8*Io<OQ(\=K%?_SO70LmHX98a2OTu/(8e]<Eo]KbbF5U1,/$<YD,']3M^1_TXi&8&b4=scDl.%>LQ%()GG#"TNs*peEO^QCk/i6j_*$HmEY;T/mr%];5E4E*o<7]tUrrBi#KApS+4,EX0T]V]PGY+t-q&H<+DR8pT&k-FV0&fR2ODf?24JFkh/V#p=92+jqX-V9s*5&omk0\9^7#1?BS%%=FO1\k^W`crQl4=BJK!'4V;@seQ[X]e>7P*B#].i;<'`K?Ska<@k`W8'_[JmYn4t,SNR<@K0W!?FksZ$ko2GZkOb<C\FuJF_+m0m%^@;<5m%_&(^/qVB#hGCES(jZKkZtGV,Wj>qp9%(4ET!=t::Nl5&o7[*,DeSSFo0O_^O^O9`#cI;`tl&pgECbQT$WP2p_GmhE0m$f%aHu:OfrjoIpXNG`Oul2`0P&qm,,HW5G"RA>ZO`M2jkl`Mbr\KO&ERWE2T[+Qb`S(cOeo]`^9Dq"L1JptelMZEfK+Pk[TKeW/F8b\%,A\A<W3*s7fK'Y>Xht=3Xhu@o>DFR\C`SOF+e"Op(BK\m);hmS@RJF,Z4ECYS:aq4.G3`o-'dd]f:e46*L[PkTe=tYU.6:'pLKlU%FS&q5E@:>Z^`$?p!&H;gMA[id:.[(jjqa"?VBckLpts&T"=-/E*mDd_<`Bt#MX%O1a]&<`ZD5qKX@GE:9iN*Mc8l&#+%$+6faIlJ%p&T?5UQV?p-Fq^(n2!BP"i(cZ@$O'V`f8!2i(O!_)K]a^FJ*I%[8J\p6S&8t2"q!@VGfu4MH4Y\j(R!>1B_3]fG-s<$GOIMmAqbr%2fGFE.e6tA:$O>j!CT[C7%2'g'/:FQfJ@9)Vt-hP_ii/4rJiuSr!c.KpB6ps99Ic_qh\Fu#F*^p`1(_9V43%fpZB@O2./?n5O6^&%Wbe,0YdL*jQ-^K<0&;&*_?$?fqH=r5pJKJ=NbEE6nbkjpCN?]Cq\&'FMcdes8tD^6'1,Ka9>0%!d8a#emJ&daN8W:%"#,/0*Grq1%djHZ##R1CR+FlC>#1,I\`X$n]qaiJoA?hDkZk9]r07",FAn1&,c@dWCQR-TANUL.I`2-b<Cm1LpMf=q0*F\00CgAP^KjlGF8d*W@%L"HM>30fBnT=/dFYl@+j6q=Jk;tn[SbM>[h2M,YnZi</&gF2@$Qs7)-qJm>b]umR)MKbLn+"T=)i/9Sa%obbU0ERanGnfjV'SP[X%<H9N:0C2AZ9Enh_N-J>CVYHYW>AI?1U.go"0ZoVd:3N+R0[;"rY-!80.,-Eo[1CX)YX!rs<l'r*(_2:P!A40ED=8feZN<"C20!5$%BhCph/.g_A4??D'VW@WQJonl*'iP,XB<LfD$AZMT&C:a4-B#KC?8b`;eNW6WGl!k"ku^%LN&h$QUc-1K&AL6-%-;Xt]d18u;Umd2%-WSNg+9bE0.b8<'4W7s.!K:a/ee>ft/6RM[L?@aMcOkN+]3@R/fD)!p#4$3i.1uKtlLG4CU$rtsCFr)*_c*Gg;eofJ72k7#0<Och%-;0i&[@95A7&Q/?HHo%^Dg4kDePeR0ljKQ>_lpBk?Pn$71LJL0VBZ+\TK?O5naK1Z\/QembZu+.gi^D8=sk<pT\#RC^;P`t/44>G%oI?+hcNn^0WU;#k!EFOV,ul07d0NFMlO4PS;Dg"^8_(%]6nll!#YmWb%53YrOGnTPb"'ZNj_#:?$t/@R/!Zmf93asLg;OZ;8B&La%_6BrLPMGq&e<I8+:G84\bed2#*REe+Xe@l##&\q&50E#Hmc&cY_;IF8HP2j!Q&VNnFqS7!X5IXo)L63^R`+!)1`I$#bJNA\\$[2%%g:#lL_WGb?mN'4q7D\;:^QR9K*aNV]OrW!H'e!'N7PaSdb/M%1.R5Yt.Lt.tlFABZ;n!MQe^RLbEYHg"0GJh.-DHWi>VB!544OJ>%Y\)3=!Hb3%8$J`$\mk[Mh_5H@i-`k;34$ni+`*d=q:+!a#t4n/@01EYWhqf^W:QEB3't+MBI`M"DEB_@"(:nF_&6&e1Qjgt6;krQ%2sN]hcIJh<aOQ&e3Fb7)XZj-V04o!67tRc6qVJsA3?5__-":$hgeINK@Wn\Pe[$*:<G,6^Qq@fR\LTT@M%nQ\/>f3HeJ53Q^KDrV%;ABdJ\-=4U3A_;0m!Fbb/g\sCOXIV9aWFoI]K"^H&k)Ib70$E&7(4RCh-U?H,T+Cq(5tbFEiBCb[Im(BJ<r76[XI8p9PS/_`BYnR%77b\7l!S@CR&B\@Vei5FR+;M;>Vm4,1rSPd7X"JWEB"N6fc(*BM3I2'>UOVT/TpLrWmR6VgIMB]m%RqtfjLD6%(]"a]3<-i*OOcf%Aq,d$aS`W5*WRn(gf(`ik\+i^p!AY.8i"6>eL^:@6dJ!1V/$T1)7I/S?s;n?2uuGHqHdCW7H*4:qkK(dcA(p0hW,UiR%:geK4mo4%]Si3mmsZ$NlCuo\m<@iii`K>UFAW.>IlO_dC/Q7h+*mE0MB-lf-)-<TCK>3/!.D6(71J<'(p_F5;GrS"8['fs%OWiN;/?<Wo\`UU%Ugd?b>ng0d(IjkMO$)MVH<:+5`%Wptr=X>4`AiRu6$QBZ&V:-j;hg<XNt8J>c^86a2>VcpUYE5L+a8"ffq[-e06-h&K;g$jJT<71%;!mndZ'*lB&i\n`ahl$X34_2(M'"Q>Tj+O5b0"pjL&<AP3BSUV!'F"RI'^+!Bb'jE!kcH]GIGoIDfGQPEsBHeB)pFr[6T=k<Gtdf%&Q2:,Qob)+qeos6/Y:Y:P3fEoU0]0Y&35c-7K$V.?5uZlpjM5l5)TSAK&[jA/SUIb]n1Rf>g_Fap>0arR4GK)JRjC#<qJgYbL8SZ%>3GWk$[g4V=_usj#@ge?btALHo`_jMR#bZddoBH?Mm;br2-0"#D3qtT$=;.Y4#Uj52`Q+Y.2C$4qgR*5&JjsPHg`S>d+VL[\Z*p`%@,_N^>5ST5fqed9q\e3'oA'$JjW81Ybnmg^Yn4Eg;3,<5bW'+5;m@QjgB3l^r>*)3pDPVZGN-F9<1)Y*]^i?E^fEQ3S,ab2*$S,:%n)BihfgPGEFJu`qI,pCGkbNZn0-cF*#h-[T#f0fm[Y;g7BU4fJ*O)KJT#SJNp1?^&'M[LFitH:PKaG[e)6K%lX1+h.P,,)/*I(i\%1`fkSCD'F4W6+U%^ZW&Z9#5W4-*e">Vo?a-RJinHl1]S3bW4:uoF/)>!b`Er3W4F-[?qkq.P'Z>lKGr!9E_]]f2%I_^mB:8heP,?%FI!]7mKhBg83[5)Y\AM@Pg%5e0cMT%19-HUG^V4e(>@2j==eY*-$:a`=YKka2=5_?!A]9RFf]'X@QhpjIHt_Z*c,mZhrVkeY'-)K%=u$+]nX3)>K,/Cj\k"GKNi&reo[or?\?t=t3kLEKQ)0CEn_1YI>1Z:j0*%36/u90+$mVDkDt$k4:*+d+C'o*tMe7ie'A2GB/0rhO%67cK$NUk\gF1!_)\^k0)][M$G5Vp=,`B;QD-.]W!%Ek""ECS>^GOD;;HN.U;4^]jFnnIJeTO-o5Vs)XL&rgko!EU[6E5D_hgH2:0%F^#tK'micfes>30)Ml^K@c_O]_./SOg:HPF3dCq:g2>9q=\8Mi'*#GaX-5V95h`X`W:Q+[p\PA$SOQMdcUbX\MN*5:QrC3g/8o`^%5/5oZ[n*LUK:%CteD5&d5pP44aks329r/tK2tEUN,.sfe3[RVP6:(*hoR6PSBd"]$2"sp%RVY>Mh-pWX#`6LY]\sb=?Ji%V+$rUC%:7^4angPu1/Mkh6S,+;_O!;+tFtHMfEp1Z-AlL,Y%0d&T)LH"09A_Z:CM[@46mm_JH/G3".8Q1kJ_0WYWJgN8?F#f`cqkNQs)!Re%P9V0I16DS@TOmHVK[MnS*iKRKD72Q'9rtcmIfq:u9tBf=L92T+lU59J17>9X=M.4hJ.(Am+8_h>rmp7t[T294GB*Z^/31lU>bd3,%@0jc*X?e1tmj2a&n[8O]A+h><,)q%0*`de#W+t)mFgZ1KRrR&K2c=6=U:`H9(/GI#&dZGl_5^PNll#?*Cn:T<d@q3.dd$`.]a8qe%pHN>7ff&8V*Wq!2HkfCu?79H/7lQ&1qmlfmjLo-C:InNG&;"?.pP0>X*=o?4K??UjJo*#6F1b;b,fqqOj_rsUrlio*LD\DJ-Plr*%5;\;*(7@/:Z#)FE`<#TC_mk5sWeV)Wn:gLG!f%D]HR<q;JASun)2SO(B:$sI%d3plPEV*,f)U0J)!pG4CHiLu%N<Fr2=O=^pG>A?%R#XVO#L*(M!gmWK^1Q52!3mOJB&X5-H_`)"TK`hIbdP6VTS52dAK@Ji)?EhNV1-4YDHNPK3IPAEp\nKmdC^h;.*6-`3V:,sPdB'm%FLc5(9$VnYrZ3bcRTX:u=AN#%,r]k@h@5#4E88a,J_E*n-!.:/`8q9_b-#%Y4!h3r3mHfleC8->?@Ca[k('$d]eWD[01V]hAgGr)%(Mp+D`?"g7Wd<_M'ZO/Gb`me_=>Q@d1JgNt;)il5,e7m1?9/jIPg1cF[]+M%Ug&)J6B*7J4TY6J16daY)6o@Jd3nBn2?:7ZSmJ%k%8)!7nFDX]TnC$,`n#-5eL9d/[Feu)`/Q<Aq[F0a)K$to=ldUVm.'Dgu9p?F&kB!_i[+,S,Q"h^AlPVD^+uV3T&LVGgZWpU7P:%HP%)Amo0>)Nk8ig-UISSAWaf2N:7`bh7jHgUkn'P+sDI#I"r1q!jSN4"+53u#s6$PnI/i"ZaAnXIc*5*hQE=rA*s:qtP3Q)`?.dgon+%C2Vm^*\O$lG`JiR/KI]]8SaXUM0(SOI@7RE+gJ@@0TSqs1%[k^am"d=R(>@rq@*rd=r6%^*mcGhbnC@rDusL*-bt<6&><1%`cK)H%-257ZA'WcePmFe6I'Meo)dSX5egg1tVK_7dLTL.LGQi[0'lrGY4()X'LYjM;r8s#j`Y>)3Ah?C^f)0=Q2\SOo(7oS_D;t[/kXLQ'%"oG%k2!jY_U]NN^$ak<A56J0[1D%sP[Li$^VIJu<<&VbHVZS8AgT1A8_AS4JOX@8rU+O,a$aK]\[^IC9ah>ZooWuT[Y0_o\bIo.T%`6:b10`d#P(YOfOfQZ[XSi3hAjP.d^b_*G*iPBE''_FSTJF-emA-6pC1-d5'/<1FTC#L#OcJ-5r[,GLrPAt:%L-c/@5c=>sRgq?K%AgHu>$'&o"Of&M.2tno/#o09BOV(7p4p37+gR+W+AJUY]1p!bcn&aURTaHG)@RcTf/cW=JD*,OVLeQRX"-"[5C#;=d,n51@<Ze`j%4a<5`W5<n%Koo?nN'q.ZR!4oX!7&G7VA@7(3A9X1Dk^EI$AP_-/KY_?Ge,jkiJha4PC]oDVf,p"ARY2gDIdebk,"Ehju--jS';;]%_;ss&'`-t#;J<opH#h/JdY&^-l"]_`U$N(52>Ei=4$oeK>H&o+pbQ;UK.F+-*Qa*#(K%6\Rfo*CTst:,>h.D.kU0Aj2lKTZoHn.,%"6Lm:?GO(F_,p/nmk+3rlIQ,b57o_b9>N+TL[FsFfW*oeR\%NoOAH<]8\YX:>:gJsS3R,/(oTf";eqfAeSm&1H6i$0]%XiSH?(5C%0XVK:m/i$.:R+rddGn-*o'l;DD9YLA]((/oe4&CLF.nM@X$Rg>l8<jY0h-kCNG/+8%>>5`1.)-YE2U[YJ5T!Sq*8NJfbQ%c0+.rN%<uJT6J=>'087.kAY15hsJ^ATEaAG(eh,TLm`0aB)`=r,4,RA,Y8:d)`Id1AYLU@s4.NH_-CjA]61NdCnjT)2SHV\p?UZ^j%U05.[%-5R-&>tL_*RmIfL#:LZ,!4XZU+lQX:g8KPZ[TZiQ(%Bs8ki\e;6B.0O3[f@`Qe04ngq@,'K7>f(X162S7X[]f,'/\"Sg"2.KAkHt%#'0)+lUOERN.4'Rgrkue(U6W0a9?rSOsoPg5il[=f="%JL88)]BQ0*e\71i'Yf&J+^V>"\r>iZ2;5nQO9>L^=agnb1!"q0.#c`3Q%_u##GJgV?CE6Dh?N8)(]oH&0X$5KhYj9k>]KhKYQ9QC5+gg<9$\ghiE7rT]D4OHR5\FDm9P`[J(\]_r$L:!'$V\$\GDCUWX%fiBX%l[':$4m%]e$PcPm2U>`^\t!FsV7h/N!DmPf<PSXsb4U(Q7TK2X@dc,GIai1d$cbfS)XeFD_!33F66-!>GjGZqr[@3O_rVb93SMol%W/`q(]GE/$D5[D7Y1h0"%lr:Vf6dji@h8VV:IJMfqotuaQA:"uNYY:`n1Jk\M<7_gA%?i'Zc%/*%rOhME\Q:+4Ei9!JD.\S-q=c@%=:N!Z=/r;XQkRCe!H,F&e@<`1XE"mL?%S[u=T5AqpOIP]_RU>j0))0@kjA,6=6CG^RDNR>KU4Lk!=J:*6PD=VE?=8?$UN1D9@(6n%+p0JY^-WoYrse*5XnTEnFA8+!,*!3C,cA/&RKbMi-]r[NAk4_^o=_YWHq`d'l_Z-?e<s]I&dp,$5CcG*!3f9Tnq&B5V6e#Y;6WDe%fYb2n;.!;H%D6r?qL/&3%BbtgQi-!#bC4t@Sq\l2>Qn"T8'Q`d8fj/s`cMohSph=t34F^+-X<>IGOO5F?M>n`fiu`cBZU7q:hQUP%52ob9E[7JtQLnC^AP4.#DgSmV9r6)"'&`1YQUcO99,fg"\o>*rS).fLjCt9\#F7"!)#Plq15aU7J6_COP-@_Z[KApIFPP:8DjoJX%&OQ80nU1:Sdcdt-c@jY<JYII:]8oPaE[E:@Z[t7dG0,Bi6+"@QYQO=,PMcER2rtTVgkg7\Op[LJq/7gf$\8#QjFRs4i\?O@n+7RS%N-hl7PhWr)T!'52;F*:io\tUpOp_>_=K,iF=DbIK7mZ()hjOqiC>/msOLSZT>6I`%g:\G0r5a=M$'.-a7.t:PRp/Pj^3JoD"s$'W%l@I,k%9@Tb6TUg/*XEm+2j@h9/si3%:rF4q$#X4_9T]]JR4[9HD<O]9,m82XR<5S7,]_$>PcHL"(:>`K]eVG8>_efWcWl60I2P28%(46Ati-"gr/fmI0a*0(E^\#;Q2Pn*Cn;'k3l:h>G=$ri`]q=N>X7Wk\BprW\rtm7:FL?'Y9F;dO_FLg4g6FK`#HCLu*(<p%$*f:k%YSEm&*bCBOgLW/qb$Jt.cXdXV./O-`+A'Wg?:URr'C6UEaA_mk25@&>_>(O'_@(la4JLaI5ikh&T\NTMGr<c;4u\.$'6nqD5AX;_%UY7.m*9[)37&%$>"H8.3.-B?O<]+?PD%E0KVW)kaF@*5cQgk?9(m8#"]SjtKdZ[9"SbLLk3_*-bG#-s_ZIEd)1.jf)%7>YJBMqJ@%gs*nl7BUcYKN`TN^&VPm9'UJgI"4mkXeM?.+Xe9S0&A<,kG!8sOqo_AO15s4=i`&I]]M2OE3!W2#M\8<)EGiW>r`?'DZ5%5Y+Jt8%'m)7oqHn7K75o(*qJT+,?7p,6"XlJErV@*3-e70#g%>7l=(3bYV!,8'4\>[qi8r0+`'B4$O=,cL,./LQMK:;1!4`;t=llfS,.WRQ%?H>r/AI7NBV81HsF(m8GeV'.i;^G0gYA<=Y%,R6i;@G\Y9&usK.?WJJ4?\^jl&F37!-=cX[*>-N0L.E;!H@pZ"&&c.J4[fj0F;`a%Qitk<P9Mpf9M2#s?jn=`9L9`Y!,r_1LCXB0Z_gSiY!boP)9TL)6G-"+m>#'OAqDb%9J?cmjtOX.+"d'5NGl(IeD-%7mXt`$aH?p+%^hb\2fp(R=VBcsoF,NO0;c;@2(<)NfoI;-tk1*s"QjhIKo@_92emb-h[Es>N&^?`d#XH\>2SETW!LnQJV8eT.lc]KYX]jeb1#1SC%=1p?DqE@[XK4j@>qGICG(^q_h,U(Ee$BC'[j9ArJbD-T%QQAu;?sjb"HQs,.6>RkEU)1,Sen*tAQpLROVmc9FL4El&!^t4Q\H/ci%$mk9c+VpLQG4!0k:R\jA3@X59Qm3gi7[(!K2R=^)8[8raRkJ>PCaAO%MNX4>KX=bj\8.)&DS;5p,nRQaO6_qF>B^>tQlZS?_#[6C%2O'\(+RS/<31>apT#V=cKT,UA4#SamNF871=&iUT!0E$@O`.gBI'bRl)^@8[QmI'Vqdc-AJ0lWkc4U+]K?5[,JB\]5fdr6sB8In$%ZUB]+Ar2a?RjAK>JKZ1RMYD&[2LophHuhO&`s'+H!3`gf/c_0-jq[r4+-[_[`W\_DP"8,*PR<F'Vig/6MBc3gZ"E@,k!"*+<s?YK%#I$cD+e'_sfd,O.D7'&YA!4XlVUBd^,ij>ORQ$saCm)k)-]-/=k#_)NhPo5,>`c[Hk];0PJ^bAt#GEP+1;si'/hL:)/M3iqI?#g)%+Sj9t(t1g-I7HCh/1Dni')Re7=$BR\VL7AMI^u2hPW@N@0>8-tmQ!fu2.UHs8TD^)-,GhlK6Btd/Yp#(PuLijO1Z*NC/dg$pENJ6%I%"t2Y3Es";62`(&!.Z$h):rb,]-7Ol.AN7i/:#6d'ui!f#Ib"eCmI0W]9*q>lV6=X!E\M62]GX3c%p]Z\VPP*I,E[I]O[4c*o2J%=?gj.$YkXmNLO=Q*S_3XRiQB0Y9SDfL$N!bm$2F]BH`n.o&ASMX1&cSXp^=oZLYM_G[3_:S9W&FO2?S!q<X0Z`2V4V-HUfpVKIP\%)ITNb)1,Uq;NmVV[(bGTRm7rJMEf1)d;0b$>SJn1icAm+@MMDCU4]h*8mh;DO,R`rKTnR![A^>\m56Zdnn:W6k`E`R6WoRhSBISp%1:>GE4^M7Che[I$Xlj/Js5hJD]YfQ7oNLq,7V'+V^B[AW:I:SZL>ATiE@kO[H:u&#J(K"RKS0,dK2'og#S(6gO.k@8!ccdH_9kb0%o%^Xu?mfh_WG=)sp-c-]NYQ/)&YMM+>%biUs%1u_:dor&(Y`f4c2aPt];3R/.N[,>B@)l0*&#.TQVog9b^TaGlFph4:V]qF6`C8'%@R6JkY6p1Me_n+8hK>haTK@q?oQ:e5)o*rM:i9dtp4/q^^.HQ>BT;\!Gm%e4g@so[0/-+.idtj7O`\eG+Ltpr<;ni(PuP$[*NKW0%bg<Ra(J<SO*odUuQK(M_P[q-(\97Tj)trM4[UG6OcF4]*Fi-Bf2OKucI<s/q:VE<.ep?cN!:@Fe+NK)R6`a"petV?cL22Y5H6>12%Rgh7R6utA51OLeoH&h[)/tP4@[HihGrRh[-$jjKZPDdu[R^_TI.l7aqFM4h&[d,<\q9nhWr<Y)Pk+qD@c[^:[Ps\(u(6H:[n/,&<%HigO])]8t?%:;ud&BRK0nrqD)q8@gPQFpA7jNN_\MP]P?#jisj9s2ZE+a4Lp+UQgeRZNOV-J4fK738RK?$*\SXmR<W1;SSDe/!)b%gBOW"[\tlh=`C(#8WPir%:0*`((L1GCN:9o\8*SapstE9-$d"BU6W?9_+Lm0D=/?((k&h2SggYO(b44AJ9(/dco%6TM=KtE7?SA@%+AAF7oo<VrVuF5GE,n&F0;+Vt[/_MVHP8)-f2-3P$$dRES"VEt&p^ceI?k<MD"*>N["qplI84Ta,R8e@#ZhlKiS*6]?"H]cYKnbo%["_dP0+RR19KatGKBL)h6+Y+)WsmA54AJtG"IO!*263XUnDtRij=16WGA*CWbi7@\q>8lN$(Ij:Z7@NO;eG:SA*sMQ>co-N1G:3&%WCq..`%IcB7i;Q21_#kJbgJEYM`JUU6mWga(*<9XqsbW>W+:oD9-8U8i@"f(c89X-Z#V;U-t?gibY\T+gSk@DUWcW>h-uC"<[l!-%AZR4O36InEFU?"DU,:-+a+j?93+YC9'0qiN%<@LNhhFrtJ*-(AK3@JY7Rc!ko3Akf!'kUUlj(1JqFKK;3atntE^E@";!Pl9n[2@!%00.l6\*E&38E92q&s*o2)9C/UU8k/Q"FML`M:n4:.kgPN@.NBUVlJ):84b@YXK?n`;#P:kKXCPl^)r1q-;S@7I$0rln]fRcf$Z4U%C=PmJXHU9cg*$%(`>bY(jP95jnmo`@4DWa5`[Cb9q^&Pqq^#\3G^sH;HL@K*h6X*patC>]U[mKWI'YcrK0UhW3N?qEEaO,AN9,:O%o@Kh1oguOaX$0-e17Hng(nZ9#lC:/)Phrfbd#UqfUCtc4:)l_H((%/F5b9h"]EMILc3:^;D)7:@N_(i'/p$*<:4Y=5mcYrjS(u^5%*To8EXepcScZ.$.LecE:.g,61GXG_$iF]1bfoM^O-DLMlT"F"HKj2c@Z.UdMCdsW)4kEdld+*DMUD6>N3>XNe/`9t+Hif<n(]XKo%b80(uUkiKIgD$Xt#*Yr=o.T0Na"L$BaUua21`j<%BW0[0(RH)>bjoKP_U%6"MbcTG$#>>Le$WX-p0a/7$6cqE*^uElgR%[PhkRM+%7PVA^)U;/?RpO,.)pKbm5]JT;ii0H_n6%l=bDupPJDBC,V-\FGR+2VaaRGn2p\nKmiLL?@I$g'H]or10$8:6!D"r+aQa818X7u@=%O0]#"/7?TG`CKN$6Ch>smjF9&l2eiRZL\)U!TI=[i(G&5oiY=i2\Aeu7'OX34$mlfLg9$I.Wde&57pQ>";bCd'p1$Aq@RFB`-a9[%*c,T/d;)J\gls%]YeK<9/iA.=/?562Eg2`S&<dD"ngha,hMU?U`"$(R5*FQZDR#hMj?^p>fYN!*:HVLS_Lu%>-J7Y$,#;4knI/!9%<$=B\qfi7u@q_Lh9]-[lWj>X=^:,l(<KrEF&R4Di=c/c3JB=hY\B"UMpb#X@aDXOgHJ&JV@,[6g(kY@jQAmUgSf"tXYbio&c*M*b%)V<iL++^Fq%U=nSb$n9<qHb#qn`@7>BhK8I?]qF8-Nqfd&u_(7J<VNNg2KDO=*mEZ^Ao%O>i9/VX\Rg=<rt(T"0D@sL-]1c#ccB1%h[(%SRngLGBBh8@@"R#)Z?Vlr=?:_B<W+,)4WU`>V<?:?=X9XBN[&CKmjF8nkCRQPpW-j%-qgt%Qm.&KUI`5^>2h*cJ[KA_WHBS!%fq@8f;+@_Hot>b.!EQ;T0`a7kpbJ#[_`(t>(r-4A\jd`(%[+:*e*$h>&e][h=Tp+f%^\D>`TWbQ'UoK=%d&nokiulBd1o4G6W,UA%Jo(R.MbHeEcllsF/1(?e.>\?cM+&4W*Z&qGdN;&nkeWjSGgX\tJfR[.>Kf>[!(X!q'4OP&@'9rr4B8*2KUo,>2`;m_i=h_F!<C1r%,:7re<lV!qBL=5.-SXd4.i/U4U5/'e$&OFN&SEh$b<N]K:!<pS:MW:;`%]:JeMBXRn#o7Xki<=$7YZk()sV2%>oY!Od9lHn!$'A7%\,as?k(rI]mj'ak*>TWk3_kKRXE&/WYaAqC_[0AV_N:WWTUq5Fq1jl&^cH0PHfHt./6T;e:)k^'Rr@RgF&U:A5iRag_5tk'^<,8o%s8(T\ge5,tc'p+p(drkq2>BT[E>67N=&+fdG$OURKRoL_*Sk?K"g^dqrV!$PHiZAOrB<MNFWFY8i_G4T_a)0#aO9'G/@?Q;$6NPL%5\YV"*k1rP>V-6`OPYP.%#=BUU]_O7\fKj0MRo]U!p#i-Q<OjZ-WSKG\I\k(S.^*V9St4lRA197$/C(bDdbMCi;T!4FOlDpl^,52%2RihDr@r014.g46Tq!W//pprt["i#og0YjhJ'CN]E>NFscQeJlgBMTP8NjN@)V1=@<4q`RK+?bV.iI-lJmU_D_;QC!*$1&EiZ(\I%(h+C7HFg#%8YDbMAaF7gma9Rn+Bnh?0=H_SRG@:*7>g`+ZD9oMFdF8*P"R$2-JnS>V?Re=pN9X#mr+3$2<_tKk=u.P;&4tFhLag\%LAZl2*96@/:Z1A@s0!L^ajjK;AT1i7BSDf\k=6KP:3q/t0a9Y2_PNP&ZS^tjQbPVcgAT5r<ebPf"jYIOq:7mCZ[DlT&&)0Yj."2*%Y<4CW?aNp-YN1/,UJQ(gP1G-SZI+Kl&m(PZ"h)Z[445)S5O'sI&AC$4g8>Q[4i^Fb;[H$f0Y-%!/F)FspSCp,kYa[Kq/e[R[pa$3%\2dnS*iWi[Qgi0"%Sr4E>);M9\#S\=ja<mN2Pa_*kXq^*!#Z/Bo'fDuoe:gMqNaeXe#Q8-gDT2pm3kt?6EE3]lucs'8*.kA#^=IW%-]]E]P8QX/6Z!$2H]D"i.XXeAg>H0I`uJlkA+oS/`c?KpJ_0YIDpuJV`,@FDXec73D=hQp"Xt[aDXOZ?)a-[??@UT0n'8u4F.'i8%Cm@LEH1'&!Yl"kbQej^*?[F\tAi/!jT;GbpI+t,^D.`9LiS8%LUN`W-?nX9gi9><c[;#:7.Uaq5RNn4ndr.(8Mq\TLGc#e8VrF+l%AMA_p)RZ-j,!bn&TpR/Rf!(Ki<iHW+\(iDsZb7'V/u\`rm%sI'e"0u$r=#'KeUI%I@N&9uY,'>Fd.tlUOb#E=8#il/T?+sp(A!92%S&Pl+8FESh0d[O+3g-o[E,k8?2*:u>l71tC0)7<_J.dIAq*a;pl?_QO\uF5&1")tNZmR(]Q'MPpUe8^/',aA"P$fl6Ltp.N(Ysk,%nc9XZKdsaBbDSN3GJ4XS.)sMj=N<k\<,VrZXCFFDI5W-.2DF\mc6kL1R`[%aRhr3;SsY'DRA!H$1L_P&YU@jCO.P(aMq&o%44%JV%#EXr1,hR[J]8iUWARsJei07).*`f>fno9`bAQLqf;QdoQ+K^Vap98n#eWYVfG;um.(ke->Q?"$DXQAsL`TA/B^VOM@$J)$j822"Q%e<gqGmmi\\k<4u9X#W0)mjj\kntlQ`e9qAZ+=4jc/]:nO/_*`3CcU,+s"j4a[]Z`<b4`etat/[Q`h[j*5Ot$L>Rh`5)%WL<UM*C?%aZon]c.m<feQ^mp8J\FJo6%KPd/r#.dIFd>LL:A@h&OD$OHK/B(Mmk*O$&^pT&s,^!ECogCG<;9b`.bfh;j#%,tI(eT4F1.P`hCF%PA&[Ia&Vd4BM'K(Qfc16$.N"$"J^T<''qmH4@c@X'4OP&@'9rr4B5h?D>@.b26?Qg9REWT,lq1p(aVCNR1..-dcF\,n3D,N3[:;&%Bk<HYB%BgQn/83mXsSJ?'EED:s&*Lg2!:pKYe8Cr_#STOS24XZ3l*3)AY0OW4p5p`:6F96O/ET.TF_dL4K"9biMRa:E5<E*pIWFQ%pl$I;8[+LV6uM+=G8]sn:3Z0$Z_n$!,B?uUl!%eF8't<l@O2i(5/`ok*k'hN<*nHd&"D(nVrj/5)]lq,%hC`\d,K"=4#brTE<CgG%\b!;a\J$_[G=H'):3*2>;q,RF:?b\=\!,IHF(Dn*!3PSLS3FK&Q3G/,djL1o)IiQ]V`'.ce?SH<M<fBjf<i"+%%2!s&Z[8^C\:*V%VVAnG]\JPg3OkYF<g*N3V'.SreSQ9pDp!lqh?827YfKa]Z6Z=(AD-H[Q;JHgJG#d)hO>-eD[O>7/L#6(9ictI2d&"b0P^r/Qce3#%I/e$PFDed$X%i8pM7:GskW8e@2DSWD$.*o:lh)J6k0cu-ECqrsb[V!6m3$]C0)nB^X7W7W.Prfq.q8%?r1Y^ZNdEkRcNe.[_u\0u%Fh:dZhQ3ZMp.-i^lgkd[R+5"*Opaf&hdV/Hj^fa8[d1"cVr\*:e'sqQ8XFJPNtq-s\*^edp^+U?V*Cr!-,?9,M5oE1%O$5Br@EBU%/)q3j@-UpBrhR^a:=0Hc,XYcMh,;bYq;UKi5k7Nu'h[$-klk/!D>hHE=&%a(!;8AT?+(9,[@gUC!TIZpbXa:6TT!$Fm54-kZimec%8=TKmQh5'1I--5PU221Wh:7@0f?X=]0o':)#CRsSX(3KN$\4YUl/LIQ_nd%kos%.aVfVC2NF5bXWXQH.XW!%Y(pak6"ofq!`ZC1#%L+H,,$sB0U'TAH%_$T=ePtF^)-/T4inaL$<EjhlF/!CcTMefqlYSFj.A.J<@?&aCf2h8iKEoqbN<\n2;qK$X+T&DXqS;X:0QgU(o%CL58Ds7fk@JfRt`(eRLM+]biSp,::Hnm7fG,r%9JSeh)>b`&ANfRYoO.'h"%-CM+:8%ECGM7O;gqVJDdAq57$Xq)UB7o:9EaZKjd%gFKD[`#md9U0K._+']W([ShWGEkD/mfY#Io7cc\Xg2Ib6OV*WaRU@XHO$%0pOrTa<>kR1J-bt\o4:mSPBsl=R>&PuVqO5u]N`(3q%Lt0(9UfT\(?R7tb=%R2R\%[sPnkau%)Fn\$$!;O/Pkn<F;U@&KWkp!A)FP3PEq1,:^?"ou$H?Rt[akNtoAP8qfuEr`L7:\[P#d1D%+boDlapbQ@D_np+k\&O/'U\+iiDgPeY2OAR5-d9-0T+c'$sf%ta[(g)OJg$mGY12@is)<D">_0kA=?stK?S3T-6!1=$15Y&j&4)\%P`fDYU^]2Y[.Kij:5U[C5`3[FVoGNWH9^tb%7j^,K<ka*YCp]m")ulQD?qq1AeFMY%oI9PWebRlaDDEA"R&gcGJYVEag&[@[!Ouu%*.1M5V9.oAD#o8*-:D3u"jB86$74RSCD[q&mrXeKf7Z*lWa)%$4R/=#p<pFa@^=`=ln0'tm4Ka;!TJQVY:Y5Z!>k0/H-(Tg'hU,f%j2Ic.ncl7>M?)M!!bpg1.5XBVeQj5[G>UI70t?JF5O!KhR0ta2+u859;'DObNuV:-bmD`,MF:2sD$U39B:3q"!%A)+Ztk@0m<go#%g-Lino1IQjgcQ#a;@K@g%!cT*G<sdOIcMr#:qY=T)AdQNg&L%f&McM2]_s8c"nHrd4bM?GAcQ[T?_:.?l$P_CP[f(n<]iim_ufT(%$$?^i`9/KPDb7<DE%@k5a\;bTX.7#o.dQBo'?Q`=!8=1C;TuQ)gaEYi0*u0\U:a_5Q_Bnd+</m0S#CoT?glVts(9>$WDfe/"5U\>%4m5;#efhml_/e#*pQNRo`8W_FYHlm1)PF-*=0=VtL:Xr,leRO,2#Y.",K8Offt<OuQI^XWD8)5MJ5Wqg1mOm']jb[b+qI_tdMfTD%+o-H&6.X;D`C2;U0!.tZnhP4_B'N*9]!`*1b0lBSX[UC7hX#q,O&-YT2iCS*J4RGZ>3;k>hJ4T"mU+j4&r+\8o_hr4KRXTmd&nMm%e+Pc^6E(*dp',QDgB5R!jaq@#o#Q71Wm^eeS,\)G5Ce9s=8;hQ]*7b>l[bE4'C6UEaF-_O>PYMMbk98`ZrJaWDTPEW,$+ma'%#.X%-*a:b)JM!*,OGTT_:U$Baq^!Z1MsKZFgTO#E>ra;<H/0*mZ&,g"fO)Lg1V)K_iDq$ans^&D"+/)ZdCr:D6t1+@nDK!)M5BJ,B@]R%[uM6'Z.u_BGUU3O;XPeh!Ga3?;Hl]uWeejkVK2Q!V(,4ccrHUWKEni"]%dFi.g8fYm/tIehBZ2sXZ:F0cpe2MKf1F6K7su<g^fO^%BqbLVf\$@m=pbY@@/_Hcb&cNVb'OfD$:W9!!N\=nQX)N@"j!oQ\_W>A[^g;Ige*j\Yrogq='b2,WK),6,GE6p#:h7S31>d&5s2"I%jFS<T1:1rSR`m9#-*%iPXq6fP%#rQaA.1%_``orMDTr.ln)(K)AfuP+$o?B@=)KKQ%^fcaNtYp3gVDW%D0"O=rs#Y5'Q_(D"C$lX%H3d[#@NuH5XFNHU3lM7^!.&BQ*e!pK5c`>6:`Q%_6s$.O=k5/amuD`(A9*o]'4B6:ZrH't1G)>/#kA0-Pbu_NQ>Q/SdVi0oSKY=H%</lWV!62LX&2T+c)/ZhJ\HVDP&d_i1H")I6PBT(rXsoOPQf$lL:b:I-qQB1K#bj^gAIr:9(K$7?!b]r\R':`[X\)d>U>(`6M'L81%&"_c-s4="^%CoYIcAp0(Ct.@R):[YEK0M$es',Ht(Ou%cJ,<UPrp)fH[t"FE_Z&sFJ"Z2Gq[SB`e@?UO]M8PW93cXqa)H6`:VEG:%%Zr#]8m\!uKSMMdPcc/"ob.QMpc,>Q*I?m`&R<(L"@b3O)W&p:9Y[ZT'G\<12=b:rdOZ2+d+ZHD?+cIUEeST6]]EBkV:r?,)QeHY%^AJe5Cm/8a&VgupKhCi6IcLTV_Z?]Yhbd[8Y#Wet[@rD1je#kJ7]a6S]N0g0pZfUTdUr1;g)NPo](A'aQOurCL:?e<e"<r\eR`GE%EIY-efa>lCj[JE%$en<C/&S.TlLK$s^ZC-j[d(0eW%KBf$C0PKr5aZS%9JM\(=e+Jm+q9j$Ld3+_X^JU9d<]q(>c&aj[XH%&[I;o%IGrV8*jr--WBD*GlI,0&?-i0+hM&9@0Yp9J1?'Oq5gcFs.GjW0aB6$eB*.QH_H8O)k][q%lk_Qp/DhT2[mslBdU3-2D]Cl[OW.cj%bWCRmmlW)M^F`UoRP#DLl1QMfBAUBSB@amMBD1^Q1LOoN!LC`d>i]K63V.Ei`7p\Pol#c>JYpTo=O&ITaI+nSqh;FH.i\BZ_D>R[%1BEfJO'Lb9`Sb/21L^["DX2_p415giqVF_Zn?>Y!K89+4qh9/:)h.-8"t1c]Gc1`e4?i=e]UaXhm4)i>f^KjNhUnJ*2P1ib1Bn@9%5'Uac*?7be%iu2KKpV1V+2#_7KBm`=^kejQ_cuu/l-EL)eYR!NlI%M9F]klA\r9a6=fH(GGdLd_ShBno-/0]tGJp2n;kXgdPoohC%GtX^Pb1etFeVA9&qjshH3EU[idKR_8?8H=i^JgEN0<EGmJpht["tU31^s`"?$bHi2kJ-m;>3+$#o,iJ?Y1BGq[g]eQoFQ@]:C-mq%0"kj28%R0Ym.#T(0N&.IQp/]L%/MRhUgc3$^<ul>.T7lbp&"'q[!S(&]Kq8\'h[sY]#Yk(7?bL*F=f7=jL(b_16fj/"d_5`!Us3h%=TjIBKK7:@1%;3jLbSV<l>W0U>@J<b,au#_-B`P=C#rd.H?nFLh)SOdO+H#$4i4ujHH[etoIZDF)R+O6B>U*jd9A89Q'u$!=nN?D%iFhJ,"^i$N8S\M#9*cN9]nl/;1`p.<&]M3oOcks;+AA9IoX&>6p3gIN]kL9a>KElp9SF9Yb&;Z3b>f0L-5!+\AU<2i<r7>o.h@jV%me3!inhTL?;m8^._Dfc:=?PhPbK*5=;'M/FPA0j#=JLgoDP<Dgb,AgSf[7>$X\(B\`j_7rOXQtmR!+bZH.,ljN'>DeATTSR+-d</%f)q[7j'+?AD=R1=a6]dlFBPI/e4[@j23i9nNq_p(07E/bi?Y]FK\8/LQ9C/V7h$G(/#`if6$aKtD")kL/s3lU\rB+#-R)Q#19Kgm%eu8!U:(NC<ESHa8(.QL"A]D2[\(:]:]EX=D34(O8-"mi=jba]Y7QNTrV+UAoT_WqOXXPJ&[fsJf"BQbXbf0m:4BDDU.9#g:CdNFN%n'#dXdcn>OgIW<MPKc22BB9m(pr4)qR0r$.7Jf9tai4/5N4_GqQIgc):mXW)[mhhk88qS!bQLZj2u(Yu]+u*fb"(jF&1j/og@ku-%[QG)`^S$VS!q]E$3(',99uPe;V@oNoMN$O9pcIYcL]^5kp:qtc=6+_dHB90Lp![u!T^bXt[tF8+3nbom].'e@<DIshNqN:'=h@]a%mm=\P1q\;s]/0&b\n)/ua#BGLD1iMr'_T0[i1O'`isG(dp/U0Sj0'Qu4o%.a3s-Jn`TJ*_j;*CDF,5$RYtpeFjOPda19Fg6ZEsUs%7sa\3B9MmMVsLoQM0_!fj_c9E=tEFPaZd4o&64"s2,`Pr]4`jJ9`Oh/FJ:42B-M&6REV*iC1Vt*@?-WgAT<5?5-P$sQ*3^"`b1Jo%ILWMrhYsVlGJ:<]D7'_aaZa%'NBjA38I*%cCJ"u4*Ti-l_(='KmG48dld7cTJZ[n(bL%_PS-,OPI5\)]Y9-MWNqA]E,WbUFPQSTt%^1WW@GY)XiEEph>84,!,^<^7MI@dMT"sC`>^GgTa5(Hs*Yf<_4AP.I:E%[3d(LE4S2fM`DNlB#np=:cj=Xm9ta*j-,s,Kl[&W#P(%3(A"7cW/[8A.u$0U$IHTk`G_U=<ruT4su@S8;-!=i6;sS1DDI5:15?%1n<e($^Fga$R2LT]0mf$(\fpA=I/nk-_5-DkBkI[@Vg9D%TLg,GGPSC7m\&sW)mDoi:3:q)e<Q0';-uoPf=j*Fa_:kS`/9updoE6bJ_--890U`!m-b=_>^YO!\#6J$rCb67/#LId!C"]0rW=PS%;Ni$4-lHYqD.5NA/WQQ9'O8k6HZKs\_1!Q:5C[bkp!3BZ5PEF<prf:ZpKrFJrbm;aiSXQMs80S1VuQbn+915jrqoiIp#?R4peQD;%LHka(5QC8'^Amig+91g`J,DN\qYA0]qPSiBf0B9#TDmI<bKk\5o:Q$D?iTrJJ,8sos5TaO0?=H/5QAVCrq\kYc&_l85MeE=~>%AI9_PrivateDataEnd