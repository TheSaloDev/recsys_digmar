%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: STU-FIIT-nfh.eps
%%Creator: Adobe Illustrator(R) 14.0
%%For: Juraj Blako
%%CreationDate: 9.10.2012
%%BoundingBox: 0 0 201 29
%%HiResBoundingBox: 0 0 200.6700 28.9620
%%CropBox: 0 0 200.6700 28.9620
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 14.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 14.0.0 x367 R agm 4.4890 ct 5.1541%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 20 8%%BeginData: 4510 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD06FFAFFD04FFA9FD05FFAFFD05FFA8A8A8FFFFFFA8A8A8FFFFFF%A8FFA8AFFD12FFA8FFA8FFFFFFA8FFA8FFA8FFA8AFFFFFA8FFFFA8FFA8A8%FFFF52FD04FFA8FFA8A8A8FFA8FFA8FFA8FFA8FFFFAFFFFFA8FFA8FFA8FF%27FD10FF0D14FFFFFF600D85FFFF840E5AFFFFFF0D14A9FFFFFFA8F8F827%A8FF2727F8F87DFF53F8FF7D27FD11FF7D27A87D52FF7D277DA85227FF27%53A8F852FF5228FFF827A8A8F8FFFFFFA8F87D7D27A8A852A87D7D52FFF8%27A827A87D52A87DF8A8A8F87DFD0FFF6084FFFFFFA860FD04FF36AFFFFF%FF855AFD05FFF852FD04FF5927FFFFFF7DF8FF5952FD12FF277D7D52A87D%28A8A8277DFFF87DA852F8FF7D27FF2727FF52277DFFFFFFF8FF5952A8A8%52FF7D5227FF2727A852A87D52FF7D27A87DF852FD26FF7DF853FFFFFF7D%F8FFFFFF5227FF7D27FD11FF847DA8A852A8FF7DFFFF7DFFFF7D7DFF847D%FF7D84FF527DA87DA8A8FFFFFF7DFFA852A8FFA87DA8A87DFF7D7DA87DFF%FF7DA8A87DA87DFF7DFD26FFA852F8FFFFFF7D27FFFFFF7DF8A82752FD6F%FF7D27F827A8FFFF7DF8FFFFFF7D27F8F852FD11FFA8FF7DFFA8FFA8FFFD%07A8FFA8FFA8A8A8FFA8FFA8A8FFA8FD04FFA8A8FFFFFFA8A8FFA8A8FFFF%A8FFA8A8A8FFA8FFA8FFA8FFFFFFA8FFA8FFA8FFA8FD07FF605AFFFFFF84%14AFFFFFFF1485FFFFFF605AFD05FFA8A8FD05FFA8FD04FFA8A8A8FD12FF%A87D27FF2727A859A8525252A827A859277DFF277DA87DA8277DA8F8A8FF%FFA87D27FFFFFF2727FF5227A8A8277DA8F8A87D7D7D27A87DA8FF7D27A8%7D527D59277EFD06FF0D14FFFFFF600DAFFFFFA8145AFFFFFF0D14A9FD25%FF7D52F8FFF827847D7DA8F8A87D27847DF87DA8277DA852FF27FF7DF852%FFFFFFF87DFFFFFF27F8FF2727A87DF852FFF8FF7D52A8F8A8527DA852F8%7D7D27A87D27A8FD11FFA9FD0AFFA8F827F8FFFF27FFFF7D7DFFA8F827F8%7DFD12FFA8AFFF7DA8FFA8FFFF7DFFFF7DA8A8A87DFF7DA8A8A8FFA8FFA8%A8A8FFFFFFA8A8FFFFFF7DA8FFA8A8A87DFF7DFF7DFFA8A8A87EFFA87DFF%7DAFA8FF7DFFA87DA8FD1CFFA852FD04FFF8FFFF7D52FFFFFF27FD71FFA8%277DA8FFFF27FFFF7D7DFFFFFF52FD14FFA8FFA8FFFFFFA8FFA8FD05FFA8%FFA8FD07FFA8FFA8FD05FFA8FFFFFFA8FFFFA8FFA8A8FFA8FFA8FFA8FFA8%FD14FF84AFFD04FF5AFD04FF85A9FFFFFFA885FD04FF7D2784A8FFFFF8FF%FF7D52FFFFFF27FD13FF8452A85252FFF852FF5252FF52FFA827A85352FF%FFFF52A82752FF52A8A827A884527DA852527DA8F8FF7D7DFF7D7D2784A8%27A8FD14FF1414FFFFFF361484FFFFA90E60FFFFFF140DFD04FFA852FD04%FF27FFFF7D7DFFFFFF52FD13FFA852FF5252FF277DFF277DFF7DFFFF52FF%2752FFFFFF7DA85227FF52FF7D7D7DA827A8A827F8A85252A8A8A8FF7DA8%27AFFF7DFD15FFA8AFFD04FF5AFD04FF85AFFFFFFFA885FD04FFA8A8FD04%FF53FFFFA8A8FFFFFF7DFD13FFA8FFA8A8A8FF7D7DFFA87DFF7D7DFFA8FF%A87DFFFFFF7DFFA87DFFA8FFFF7DFFA8A87DFF7D7DFD05A8FFFFA8A8A87D%FF7DFDCEFFA8FD04FFA8A8A8FFA8A8A8FFA8FFA8FFFFA8FFA8FFA8A8FF7D%52FFFFA8FF7D52FFFFA8FFA8A8FFFFA8A8A8FF84FFFFA8FFA8A8FFA8FFA8%FFA8FFA8FFFFA852FFFFA8A8FFFF52FD39FF27AFFFFF7DA8277DA87D7DFF%5259FF5252FF277E52FF527DFF7D7DFF2752FF5252FF52FFA87D27FFFFFF%52FF7D7DFF7D7DFF277DFF527DA8A852A8A8A8FF5252FFA852FF7DFF7DFD%38FF7D2752FFFF7DA85227A8537DFF5252FF2727FF52F852FF2727FF52FF%FF52F8FF7DA8A852FFA85252FFFFFF7DFF7D53FF52FFFF2727FF53277D7D%527D7DA8FF5252FF53527D7DFF7DFD38FFA8A8A8FFFFA8FF7DA8A8A8FFFF%A8A8FFA8A8FF7D7DA8FFA8A8FFFF7DFFA87DFFFFA8FFA8A8A8FF7DFFFFFF%A8FFA87DA8FF59FF7DA8FFA8A8FFFFA8FFFF59FFFFA8FFFF7DFFA8FFA8FD%7FFFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                                             
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.2-c063 53.352624, 2008/07/30-18:05:41        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:ModifyDate>2012-10-09T16:59:12+02:00</xmp:ModifyDate>
         <xmp:CreateDate>2012-10-09T16:59:12+02:00</xmp:CreateDate>
         <xmp:MetadataDate>2012-10-09T16:59:12+02:00</xmp:MetadataDate>
         <xmp:CreatorTool>Adobe Illustrator CS4</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>40</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAKAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A7z+Xmm+frIal/i6+S89S&#xA;VDZcGDcQOXqHZUorVXivah2GZusnhlXhiu91vZ+PUR4vGN936ejetab5/l886Zd6bfRxeWo1UXts&#xA;SATQt6gK8SWLLQKa7e2OKeEYiJD19E5seoOeJif3fUJh55s/NF35emh8s3K2uqF0KyMQpKA/EqsQ&#xA;eJ98q0ssYneQXFu1sMssZGI1JH+XodXg0Syh1iZZ9USFVu5k6NIBueg/VleYxMyY/T0bdOJiAEzc&#xA;q3Y/5C03z/Z3Oqt5qvo7yGWRTYBCDxoW5EAKvFSCtFP+3k6ueGQj4YrvcTQ49REy8U2OiE/O7WvN&#xA;+i/lxqeoeU0c6tEYh6kUYmkihZwJZEQhqlV70NBU9q5hOxSL/nH7zANb0e8u286z+apyIPrFldW6&#xA;W0tjIQ3IEVZmWT9k14/DtvXFWH+bLP8AMm3/ADp0fybbefL+Gy8xxXV8kqxR/wCiqizyrCiV+MAQ&#xA;hakjCrNPz51/zF5Y8gaXcaVqUsF+NSsrWe8SgeRGVw/IGo+MrU4FVdS8y67F/wA5E6V5djvZF0Sf&#xA;y+13LYCnptOJ519Q7VrRAMVen4q7FXYq7FXlKXvnuPzX5/hH6WurJdNmn8v3LQNFbRXATiLaBCg9&#xA;aTmA0bxlqitd8KobXvMHm++8l+WLi2j8wWnEPB5hNpYTJqJuUsG9NvRliMhja6pV1TifGmKr9Wk/&#xA;NevkiNfrYm1uxtbPzM8C1WxuYpre4nuXKKUjaSETxeHKgGKo+zu/OB/NnzPDcvqQ0SO3X9CxiC4+&#xA;pM/1K3Zisvo+gf3pk/3by5bccCsa8kXf5wzeVvNUPmWbULXUU0fTG0W+W0kkk9e4hmklKQhOTTRl&#xA;4451A5BlrQVwqt13V/zYbyb5HuNOtdbt7mdbk+aIhF69+kKsnNuPBR6pTm0CsoboKcsVT3zNc+b5&#xA;fze8tX9npV3ceWNHEdrcTm3LD1dVjkjedeY9QeiBEHdV+EFw5UdVWT/mzB5hk8k3cvl24vYNXt5I&#xA;ZLYacOU0lZBG6FeLll4SFjQdge2BUi1w+a7P8zfLWnw3OqyeXI7KFLqeOKeWOa4WV1rcywwSRBmU&#xA;KZObIKb4qs0+784ep55+uSaz+mol1M6Lbm3P6OFsp/0BrORI+MkzJx+HmWryquFUmFz+cc/lXzTH&#xA;K1xa68brQ4tGmhhleNI5haC6eMOgZ1UPIZ9qKefhiqYeVNS/My403yjLrFve219ca9qA123Mb8Y7&#xA;MJdGFZGK7QhhGI3OzfDvviren3vnf/Dnnl7tta/xZDb6obCAwN9RUqZvqP6NZIwJWKen0Zmr1GKp&#xA;Vqj/AJj6v+UDaO1nqU3nDWNRey1MTQiNIEDmaUxNJxh+qmGMRo7NxblQ/FUYq9V8m3t3feU9Hu7y&#xA;zfT7yWzhN1YyxmFoZQgEkfpsFKhWBA26YFTjFXYq7FWJfl/+Ydt5xXUTDYy2X1CREPqkMHWTlx3A&#xA;FGHD4l7bb5mavRnDVm7ddoO0BqeKomPC1rP5iW2med9O8qtYzSy6gqN9aQjinqFlX4CPiUcPiNdv&#xA;oxx6MyxHJfJc3aAhnjioni6ph5382ReVdAl1eW2e7WN0jEKHju5pVmIPEfRlel0/iz4bpu1uqGDG&#xA;Z1aO8v6xHrWiWWqxxPAl7EsyxSfaXkOm3X2PfK82PgmY9zbp8wyQEwK4gkPkT8xLXzdc6nBDYzWZ&#xA;051UmUg8g5YCoAHFvg3XMnV6M4QCTfE4mh7RGoMgAY8KZ+cdM8y6noclp5c1hdC1RnjaPUGgW64q&#xA;jBmX03IX4qU3rt2zCdixL8qvyjvPJ2sa7r2rawNZ1vXnVrmaO3W1iUKxZqRoxUszNUmg/XiqYa3+&#xA;W8upfmv5e89i/WKPQ7We1awMRZpTNHMgYSchxp69fsnpiqJ/NP8AL2Lz55UfQ2vG0+dJo7q0vFX1&#xA;OE0NeJZKryBDEdcVSTyd+VfmGx88v5182+Y/0/rCWQ06yWK1S0jih5cmJCMeRJLdh1PXair0rFXY&#xA;q7FXYq870v8ANOe98+jys1tAp/Smo6ezCQmURWNlBcpLw/y3nZfDbFUg8r/nze63o3mO7bS47e78&#xA;v6Pd6o8JZ+MkkDS+kFJG8bxxruO9R2wqnmp/mjqln5l8v6EmnRSS+ZLexuLCTk1KySH6+D/xggAk&#xA;XxrgVfbfmPrcuo+c0aztxY+WIrs25/fiWaW2jWReTFfS4kMQwVuQ22xVJtE/ObW9S/KvUfOctlY2&#xA;dzZXTW8NvJLKUnAVOKKoX1VmeSTgqMN+v2ThVl9j5q8wTalpOkXFnbQ6nqOh3OqTASM8UV1BJbRi&#xA;HmoPKPldHkw8NsCsRu/zj8waf+Vj+cL3TrJtRuL+TT9LsIZZBG7Q3EkEhkdwpG1vK4p2Awq9K0/V&#xA;xq/ly31jSgsn1+0S6sVkPwn1Yw8YYjtuK4FY1+Vv5h3Pniyvb82a2tpafVrc0LFvrpt0mvYt6fDD&#xA;JKIwe9DiqAb80NRX84l8itZQDT3U0vmkdJeYtBc0UEcHNWpxB5Uq3QYqoeQ/zcvNe1XzXDqljDZa&#xA;b5b9Vzdxu/Ixwz3ER5RuBy+G1Lckqv7PXYKpbYfnXreqflbeecLHTrNNR0y8S31DTppZCqxTcDGy&#xA;sgJ5lbiOtdvteGFWX3HnDW7XzDLoUlnbTXsHl9tYcpK0cb3aS+kYVkkHwxFh9thUDrgVI9F/Nq7v&#xA;fLXljVLmC1S51nWv0NqcCPIBZuIp5HVvUCsJEMABB23qO2Ko7XPzUt9L/M/RfJnoxvBqUQNze8/i&#xA;immWU20YXvz9Ag+HJfHFUBp35r6td33miwfTokufKdpfz6kQzlTLDK4sVXbZZ4ImkNdxirJvy48z&#xA;6n5m8rW2s6jBFbTXPxJDCJlUIyqwr66oxPxdR8J7HFWT4qhNO1HSL0THTbq3uRHIVuDbuknGTuH4&#xA;E0b55OcJR+oEe9rx5ISvhIPuam1HSItRgsp7q3TUpVLW1s8iCdl3qUQnmR8J6DEQkYkgHh+xTkgJ&#xA;CJI4ug6qmoXmn2do8+ozw29otBJLcMqRipoOTOQu5wQjKRqIspyTjEXIgDzVbeaCaCOa3dZYJFDR&#xA;SRkMjIRVSpGxBHSmAgg0ebKMgRY5Iew1HSLx7hdPure4eF+N0LeRHKSeEnAmjbd8lOEo1xAhhjyQ&#xA;lfCQa50wL/nINiPy2nHCSRWv9OR4ojxd1a8iDIp5Juw2+0Mg2J5+XmgaFpenXMuleX7vy6bmQCe0&#xA;vpBJK3pj4X+C4u0C/GaUb5jFWG/l3PO3/OOd1M0jGUWeukSEktVbq7pv12phVk/k/QNJ8x/lH5Vs&#xA;NahN5ay6RpskiF5ELOttGwJaNlbr74FSb8hPK2hWXlOPW7a3K6pdT6jbT3LSyuWhg1KeONeLsyji&#xA;kSjYV2xV6hirsVdirsVYZFrfkWLWNf1tdJSDUNFjlGq659UjWR1gUF41nA9WQ8QKL3piqjLrX5Z2&#xA;On6XImm231fzPZehYQQ2cZa5tZGQ/VTGF3Vmu6mM7bsT3xVNpdT8o/p+wsntIjqlhdHTNNlMCFre&#xA;Wawa9ZIZKVjRraGjcaVoFxVK7y/8gWOmyebk0COf9Mk2V7eW1jE9zMs8ghKXBoHdJJFVSGJBNMVV&#xA;zB+XFxq58nTaNZG6vLSPVZtNlsofSaOIrBG0ilShkQKFUHcKNthiqZTz+VtCvrS1Wyhtri20y8ms&#xA;vQgRfSsLN7f14oyoHBeUsR4DY09sVSWx82fl5J5dXWNNso5tO0uaCS1S3tUDR3GqBCrQJReMkn12&#xA;khFDVmr3xVHDzf5W0P8AR2kQ2ctjA0Fo628FqUgsor6UwWqziMcIfUlDIAO4NdhXFVuneavJ9hq2&#xA;raDY2bWE2nxz6jeLFa+lBLxKNcSI6AI78pV5V+Ik4qoaJrv5bazrLa5YW1o+rppltqkurtbRrcJZ&#xA;3aOI+c5X1AeER5ITsMVQw1/8vX0PT9XttBF1Y+YxJYIIbCMswnmd5be4QhSA87SM6NsW5E74qi9Z&#xA;1r8u9OttZfVLO2jtY7y30/WWkto2SSZbWG5g9UcT6gjhkj4k1p0HTFVe/wDMPlAarY2+o2FNW1y0&#xA;jgtYp7ZTPPbXElJbdqgkrDy5zxnZQanFUxl8k+TZdJi0eXQdOk0iCT1odOa0gNsktCPUWEpwVqO2&#xA;4FdziqIPlzy8X5nS7Qv6kE3IwRV9S0FLd68ftQgfuz1XtTFVQaJookvpRYWwk1QBdTf0Y+Vyqp6a&#xA;ic0/egIeI5V22xV2kaHoui2hs9H0+2020LGQ29nDHBHzagLcIwq1NBviqNxVjXkz8v8AQvKAvRpT&#xA;Tt9fZGlM7h6CPlwRaKuw5nrU++ZWp1c81cVbOFo9Bj098F+rva1T8vdA1PzXZeZ7kz/pCxCenGjg&#xA;QsYiWRnXiWqpbswGOPWTjjOMVRRl7PxzzDKb4o/LZHebPKumeaNHfStRaVIGdZBJCwWRWQ7EFg6+&#xA;I3GQ0+olilxRbdXpY54cErryReiaPZ6NpNrpdny+rWcYiiLnkxA7sdtyd8hlyGcjI8y2YMIxwEBy&#xA;CTeT/wAvdA8pz302lmctflTIJnDhFUkqiUVdhy71Pvl2p1k8wAlWzjaPs/HpyeC/V3o3zb5U07zR&#xA;pA0rUJJorcT29zzt2VX520qzIKurihZBXbpmK5yc4qxvRPIWj6P5Jk8n20tw+mSR3cLSyshn430k&#xA;kkvxKipUGZuPw+HXFU20DRrXRNC07RbRne10y1hs7d5SDI0dvGsaFyoUFiF3oBiqH8reWrHy1ose&#xA;kWMksltFLcTK85Vn5XVxJcuCVVBQPKQNumKptirsVdirsVYtN5D8sXMWr2QZlm1W7ivtVkhaOO5c&#xA;CVZVhaRFEgib0ivXlQtRgd8VQN1+W3lZbbToH1C6t28vm5udNuDcR+tai7nE3ISSIx4x+n6ac61S&#xA;qvzqcVRN55Y8tw+ak813WsSwGK49T6lJPAll9dFo9n6hDJ6nqC3dl4+pTvxriq+28paNBpf+GpNX&#xA;uLiGSSK8tbaV7UTRrDci5Hp+nEjMhkWhLctuhGKtf4Y8qzeZpfNialIdRs5/UuJFulMEaLam1NvJ&#xA;HvGqUJkNRz5/tcfhxVMtW0TR9Sv2vbm5ZJbSwvNOmVHQKkGoGCSVnBBKsBaoVJNKVqD2VYzL5N/L&#xA;zyzok1ndSOula/qdjK0UiieOW7jMTxoFWN14ztbBnqKEs1CKjFU31fyboOqazFdG/mtWUWltdadb&#xA;SQrDcDTpTe2sUqtG8i+k0pekbISp3quKoS18veTZtY1/V7W+eOe/tmg1qRSiQvFOimKT1GjowiVW&#xA;9N1Yj4mBrQcVUDo35UeR9HsNYtLO/uBb+YbYW92WuIifq8jMoETcBxVvU4Cm38tDiqcDyl5Y0XT4&#xA;YJb6W1sYdT/Slv8AWrhSBcMTI0fqTVdldy7nkxapO+KofWvJvkvWvrmn6jeer+nL2HV3tPXjVneK&#xA;1itI/RAHPhwtVaq/FyqQw7Kpoml6O11plzPqLXd75eVoPrEskJkZ7iMQk3HFVAd6fshd+2Kpwb6y&#xA;FCbiMBi6r8a7mKokA36pxPLwpirjfWQlhhNxGJbgFreMuvKQAVJQVqwp4Yq211arFLM0yCKDl60n&#xA;IcU4Crcj2oOtcVQ1rrukXOlQ6tHdINOnAaK5lPpIQxop/ecep6eOKrtR1jTdNsp7y8nCW9uiySlQ&#xA;0jBXPFKJGGduTbKFFSdhiqMxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KsK0Hyd5isPP+qeZ7i7t&#xA;ZLXWBLFc2sYkEixwmNLA82+F+MaOWXivFnahbFV/nDyVqGuN5gETwCLV9Fj0uJZWcUkWWd2L8Vai&#xA;FZhuKnrtiqS2v5U6qdK0zS7/AFFZ4rHXrjU5LoUaaS0azuLaBSJopI2mrLH6lRSnIg1piqY3vkTV&#xA;JvPA1eOOyFkb61vxelnF7EttaNbG2jQRcSjk1r6o2ZvhxVJLP8odVg0rzlZyS2ksvmi2lhinBaNo&#xA;+dxcyCJ+EQ5IEuA3M1fkWXdVXCq7SPyx85Q+XPMGn6lqdpdaj5hezju7tvVkjNtAFt5laPjGWL2i&#xA;BePIVYncYqmdr5G8w2tt5U+sRadrE3l22utPkgu5JY4mikeJbe6jYw3B9eOG2CkMv7b/AB9yFVB+&#xA;X+rx/maPNcN3ENOmumuLyyYuWbhpiWUDoOPFXDGXnvuvDeopiqx/yyFt5fv7HT47eWe41aHUkt7p&#xA;3Nu9va3STQ2btwcxxLGnFVCMqnscVa8yfl/retXthewzQ6WLa2s4pdPtpeUBeC+iunjLG3UtGqRn&#xA;gVCHlSoAxVkvnXy7/iHy5c6WqQvLKY2iNwKorJIrE/Zcg8QRsMVSuXyhfj8yYvMcKW50tNOtrBYv&#xA;UCSRtbyXbFhEbeSq0ukC8Zo+hrXbFUstvy/1pPJl55b4WVpO11BLDq9tI3r3Kx3wuWmuFa3ASfgK&#xA;j4pAXJ6DFUu1f8pvMF35dsbCDUohqWm3et3trfyu5ZpNRuZ5rf1eEaA845uFxRQKM3Gu2FUZf/lx&#xA;rU+q6dOgsZEii0NJr6V5PrNqdGumuZVtV9Jwy3Abhu6UqSeXTAqOv/J3mG60XzJpJSyMWpXxv7GR&#xA;5pWEn76OX0LmP0fgRxFwYqz7HpiqV6j+XHmSby9FDaLp0Ooxare6nFYFi1lD9bhmij4NJbTKzxNM&#xA;JfituJaooPtYqnur+UNZv7PUIzPAbi907TLPmeSL61lPNLMxCpRVYTDjQfQMVf/Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Untitled-3</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:DocumentID>xmp.did:CFE766EA0A206811945780C5360C7B74</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:CFE766EA0A206811945780C5360C7B74</xmpMM:InstanceID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:OriginalDocumentID>uuid:ef5f753f-33a7-2442-afac-2bb3d7d6e2d0</xmpMM:OriginalDocumentID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:CEE766EA0A206811945780C5360C7B74</stRef:instanceID>
            <stRef:documentID>xmp.did:CEE766EA0A206811945780C5360C7B74</stRef:documentID>
            <stRef:originalDocumentID>uuid:ef5f753f-33a7-2442-afac-2bb3d7d6e2d0</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:CEE766EA0A206811945780C5360C7B74</stEvt:instanceID>
                  <stEvt:when>2012-10-09T16:59:01+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:CFE766EA0A206811945780C5360C7B74</stEvt:instanceID>
                  <stEvt:when>2012-10-09T16:59:12+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Adobe PDF library 9.90</pdf:Producer>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>81.883202</stDim:w>
            <stDim:h>17.882629</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>FIIT_CMYK</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>90.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>20.000000</xmpG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -28.9619 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 28.9619 li
200.67 28.9619 li
200.67 0 li
cp
clp
[1 0 0 1 0 0 ]ct
88.8989 5.06006 mo
89.1538 4.47705 li
89.1709 4.4375 89.2046 4.42041 89.25 4.4375 cv
89.4878 4.54492 89.686 4.62402 90.0767 4.62402 cv
90.416 4.62402 90.6201 4.47705 90.6201 4.22803 cv
90.6201 3.99561 90.5068 3.87695 89.9575 3.6333 cv
89.25 3.3335 88.9443 2.95996 88.9443 2.354 cv
88.9443 1.69189 89.4424 1.19922 90.2861 1.19922 cv
90.835 1.19922 91.0728 1.23877 91.4863 1.41992 cv
91.5371 1.43701 91.5371 1.47656 91.52 1.51611 cv
91.2539 2.03711 li
91.2373 2.07666 91.2031 2.09961 91.1523 2.07666 cv
90.9316 1.98633 90.7051 1.94092 90.439 1.94092 cv
90.0767 1.94092 89.918 2.09961 89.918 2.33154 cv
89.918 2.55811 90.0029 2.66553 90.6089 2.90869 cv
91.3164 3.20898 91.5879 3.56006 91.5879 4.13721 cv
91.5879 4.92969 91.0278 5.36572 90.1558 5.36572 cv
89.686 5.36572 89.3179 5.32617 88.9331 5.12793 cv
88.8989 5.10547 88.8877 5.08252 88.8989 5.06006 cv
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 1 cmyk
f
94.5249 4.55615 mo
94.5249 4.58447 94.5366 4.60156 94.5649 4.60156 cv
96.0537 4.60156 li
96.0986 4.60156 96.1216 4.62402 96.1216 4.67529 cv
96.1216 5.25244 li
96.1216 5.30371 96.0986 5.32617 96.0537 5.32617 cv
93.7041 5.32617 li
93.6533 5.32617 93.6309 5.30371 93.6309 5.25244 cv
93.6309 1.3125 li
93.6309 1.26172 93.6533 1.23877 93.7041 1.23877 cv
94.4629 1.23877 li
94.5024 1.23877 94.5249 1.26172 94.5249 1.3125 cv
94.5249 4.55615 li
cp
f
99.3696 1.92383 mo
98.8262 1.92383 98.5317 2.36523 98.5317 3.27686 cv
98.5317 4.20508 98.8203 4.64111 99.3638 4.64111 cv
99.9014 4.64111 100.196 4.20508 100.196 3.28271 cv
100.196 2.35986 99.896 1.92383 99.3696 1.92383 cv
cp
99.3638 5.36572 mo
98.0049 5.36572 97.5977 4.62402 97.5977 3.28271 cv
97.5977 1.92969 98.0049 1.19922 99.3638 1.19922 cv
100.723 1.19922 101.13 1.93506 101.13 3.27686 cv
101.13 4.62988 100.723 5.36572 99.3638 5.36572 cv
cp
f
104.079 5.32617 mo
104.051 5.32617 104.034 5.30908 104.022 5.27539 cv
102.867 1.32959 li
102.851 1.27832 102.879 1.23877 102.924 1.23877 cv
103.75 1.23877 li
103.796 1.23877 103.801 1.25586 103.818 1.29541 cv
104.617 4.43164 li
105.415 1.29541 li
105.426 1.25586 105.449 1.23877 105.488 1.23877 cv
106.225 1.23877 li
106.275 1.23877 106.298 1.26709 106.287 1.31836 cv
105.126 5.27539 li
105.115 5.30908 105.092 5.32617 105.059 5.32617 cv
104.079 5.32617 li
cp
f
109.077 2.92041 mo
110.339 2.92041 li
110.391 2.92041 110.419 2.94287 110.419 2.98828 cv
110.419 3.57715 li
110.419 3.6167 110.391 3.63916 110.339 3.63916 cv
109.077 3.63916 li
109.077 4.55615 li
109.077 4.58447 109.088 4.60156 109.116 4.60156 cv
110.707 4.60156 li
110.758 4.60156 110.781 4.62402 110.781 4.66943 cv
110.781 5.25244 li
110.781 5.30371 110.758 5.32617 110.707 5.32617 cv
108.256 5.32617 li
108.205 5.32617 108.183 5.30371 108.183 5.25244 cv
108.183 1.3125 li
108.183 1.26172 108.205 1.23877 108.256 1.23877 cv
110.707 1.23877 li
110.758 1.23877 110.781 1.26172 110.781 1.3125 cv
110.781 1.89014 li
110.781 1.94092 110.758 1.96338 110.707 1.96338 cv
109.116 1.96338 li
109.088 1.96338 109.077 1.98047 109.077 2.00879 cv
109.077 2.92041 li
cp
f
115.021 3.99023 mo
115.021 1.3125 li
115.021 1.26172 115.037 1.23877 115.077 1.23877 cv
115.808 1.23877 li
115.853 1.23877 115.875 1.26172 115.875 1.3125 cv
115.875 5.25244 li
115.875 5.30371 115.853 5.32617 115.808 5.32617 cv
115.015 5.32617 li
114.964 5.32617 114.952 5.32031 114.936 5.28076 cv
113.622 2.57471 li
113.622 5.25244 li
113.622 5.30371 113.6 5.32617 113.555 5.32617 cv
112.841 5.32617 li
112.79 5.32617 112.768 5.30371 112.768 5.25244 cv
112.768 1.3125 li
112.768 1.26172 112.79 1.23877 112.841 1.23877 cv
113.622 1.23877 li
113.673 1.23877 113.685 1.24463 113.701 1.28418 cv
115.021 3.99023 li
cp
f
117.93 5.06006 mo
118.185 4.47705 li
118.201 4.4375 118.235 4.42041 118.28 4.4375 cv
118.519 4.54492 118.716 4.62402 119.106 4.62402 cv
119.446 4.62402 119.65 4.47705 119.65 4.22803 cv
119.65 3.99561 119.537 3.87695 118.988 3.6333 cv
118.28 3.3335 117.975 2.95996 117.975 2.354 cv
117.975 1.69189 118.473 1.19922 119.316 1.19922 cv
119.865 1.19922 120.104 1.23877 120.517 1.41992 cv
120.567 1.43701 120.567 1.47656 120.551 1.51611 cv
120.284 2.03711 li
120.268 2.07666 120.233 2.09961 120.183 2.07666 cv
119.962 1.98633 119.735 1.94092 119.469 1.94092 cv
119.106 1.94092 118.948 2.09961 118.948 2.33154 cv
118.948 2.55811 119.033 2.66553 119.639 2.90869 cv
120.347 3.20898 120.618 3.56006 120.618 4.13721 cv
120.618 4.92969 120.058 5.36572 119.187 5.36572 cv
118.716 5.36572 118.349 5.32617 117.963 5.12793 cv
117.93 5.10547 117.918 5.08252 117.93 5.06006 cv
cp
f
124.303 3.30518 mo
125.706 5.22412 li
125.734 5.26953 125.706 5.32617 125.661 5.32617 cv
124.693 5.32617 li
124.67 5.32617 124.653 5.31494 124.642 5.29785 cv
123.55 3.59375 li
123.55 5.25244 li
123.55 5.30371 123.527 5.32617 123.487 5.32617 cv
122.729 5.32617 li
122.678 5.32617 122.655 5.30371 122.655 5.25244 cv
122.655 1.3125 li
122.655 1.26172 122.678 1.23877 122.729 1.23877 cv
123.487 1.23877 li
123.527 1.23877 123.55 1.26172 123.55 1.3125 cv
123.55 3.10693 li
124.631 1.26709 li
124.642 1.25 124.659 1.23877 124.682 1.23877 cv
125.554 1.23877 li
125.616 1.23877 125.633 1.29541 125.604 1.34082 cv
124.303 3.30518 li
cp
f
128.791 1.01807 mo
128.757 1.03516 128.734 1.02393 128.717 .995605 cv
128.604 .757813 li
128.587 .734863 128.599 .712402 128.632 .689941 cv
129.714 .0102539 li
129.736 -.00634766 129.775 -.00634766 129.793 .0332031 cv
130.02 .497559 li
130.036 .525391 130.036 .55957 129.996 .57666 cv
128.791 1.01807 li
cp
129.476 3.74658 mo
129.022 2.17871 li
128.57 3.74658 li
129.476 3.74658 li
cp
128.366 4.46582 mo
128.14 5.27539 li
128.123 5.30908 128.1 5.32617 128.066 5.32617 cv
127.33 5.32617 li
127.291 5.32617 127.263 5.29199 127.279 5.25244 cv
128.524 1.26709 li
128.524 1.25 128.542 1.23877 128.57 1.23877 cv
129.572 1.23877 li
129.589 1.23877 129.605 1.25 129.617 1.27832 cv
130.852 5.25244 li
130.868 5.29199 130.84 5.32617 130.801 5.32617 cv
129.979 5.32617 li
129.945 5.32617 129.923 5.30908 129.906 5.27539 cv
129.68 4.46582 li
128.366 4.46582 li
cp
f
136.748 5.32617 mo
136.708 5.32617 136.686 5.30371 136.686 5.25244 cv
136.686 2.00879 li
136.686 1.98047 136.668 1.96338 136.64 1.96338 cv
135.694 1.96338 li
135.644 1.96338 135.621 1.94092 135.621 1.89014 cv
135.621 1.3125 li
135.621 1.26172 135.644 1.23877 135.694 1.23877 cv
138.582 1.23877 li
138.627 1.23877 138.649 1.26172 138.649 1.3125 cv
138.649 1.89014 li
138.649 1.94092 138.627 1.96338 138.582 1.96338 cv
137.619 1.96338 li
137.591 1.96338 137.58 1.98047 137.58 2.00879 cv
137.58 5.25244 li
137.58 5.30371 137.557 5.32617 137.506 5.32617 cv
136.748 5.32617 li
cp
f
141.445 2.92041 mo
142.707 2.92041 li
142.759 2.92041 142.787 2.94287 142.787 2.98828 cv
142.787 3.57715 li
142.787 3.6167 142.759 3.63916 142.707 3.63916 cv
141.445 3.63916 li
141.445 4.55615 li
141.445 4.58447 141.456 4.60156 141.484 4.60156 cv
143.075 4.60156 li
143.126 4.60156 143.149 4.62402 143.149 4.66943 cv
143.149 5.25244 li
143.149 5.30371 143.126 5.32617 143.075 5.32617 cv
140.624 5.32617 li
140.573 5.32617 140.551 5.30371 140.551 5.25244 cv
140.551 1.3125 li
140.551 1.26172 140.573 1.23877 140.624 1.23877 cv
143.075 1.23877 li
143.126 1.23877 143.149 1.26172 143.149 1.3125 cv
143.149 1.89014 li
143.149 1.94092 143.126 1.96338 143.075 1.96338 cv
141.484 1.96338 li
141.456 1.96338 141.445 1.98047 141.445 2.00879 cv
141.445 2.92041 li
cp
f
146.896 5.36572 mo
145.724 5.36572 145.021 4.56738 145.021 3.28271 cv
145.021 1.99756 145.724 1.19922 146.896 1.19922 cv
147.371 1.19922 147.677 1.25586 147.987 1.43164 cv
148.016 1.44824 148.027 1.47119 148.027 1.48779 cv
148.027 1.50488 148.021 1.52783 148.011 1.55029 cv
147.744 2.05957 li
147.728 2.08789 147.71 2.10498 147.693 2.10498 cv
147.677 2.10498 147.659 2.09961 147.643 2.09375 cv
147.416 1.98633 147.218 1.94678 146.969 1.94678 cv
146.499 1.94678 145.955 2.33691 145.955 3.28271 cv
145.955 4.2334 146.471 4.61279 146.975 4.61279 cv
147.161 4.61279 147.382 4.59033 147.648 4.45996 cv
147.688 4.44287 147.722 4.44873 147.738 4.48291 cv
148.016 5.00928 li
148.044 5.05469 148.033 5.09424 147.987 5.12256 cv
147.648 5.31494 147.348 5.36572 146.896 5.36572 cv
cp
f
150.902 3.63916 mo
150.874 3.63916 150.857 3.65625 150.857 3.68457 cv
150.857 5.25244 li
150.857 5.30371 150.834 5.32617 150.795 5.32617 cv
150.036 5.32617 li
149.985 5.32617 149.963 5.30371 149.963 5.25244 cv
149.963 1.3125 li
149.963 1.26172 149.985 1.23877 150.036 1.23877 cv
150.795 1.23877 li
150.834 1.23877 150.857 1.26172 150.857 1.3125 cv
150.857 2.875 li
150.857 2.90332 150.874 2.92041 150.902 2.92041 cv
152.131 2.92041 li
152.159 2.92041 152.176 2.90332 152.176 2.875 cv
152.176 1.3125 li
152.176 1.26172 152.199 1.23877 152.244 1.23877 cv
153.003 1.23877 li
153.048 1.23877 153.07 1.26172 153.07 1.3125 cv
153.07 5.25244 li
153.07 5.30371 153.048 5.32617 153.003 5.32617 cv
152.244 5.32617 li
152.199 5.32617 152.176 5.30371 152.176 5.25244 cv
152.176 3.68457 li
152.176 3.65625 152.159 3.63916 152.131 3.63916 cv
150.902 3.63916 li
cp
f
157.537 3.99023 mo
157.537 1.3125 li
157.537 1.26172 157.554 1.23877 157.594 1.23877 cv
158.324 1.23877 li
158.369 1.23877 158.392 1.26172 158.392 1.3125 cv
158.392 5.25244 li
158.392 5.30371 158.369 5.32617 158.324 5.32617 cv
157.531 5.32617 li
157.48 5.32617 157.469 5.32031 157.452 5.28076 cv
156.139 2.57471 li
156.139 5.25244 li
156.139 5.30371 156.116 5.32617 156.071 5.32617 cv
155.357 5.32617 li
155.307 5.32617 155.284 5.30371 155.284 5.25244 cv
155.284 1.3125 li
155.284 1.26172 155.307 1.23877 155.357 1.23877 cv
156.139 1.23877 li
156.189 1.23877 156.201 1.24463 156.218 1.28418 cv
157.537 3.99023 li
cp
f
161.431 1.23877 mo
161.471 1.23877 161.493 1.26172 161.493 1.3125 cv
161.493 5.25244 li
161.493 5.30371 161.471 5.32617 161.431 5.32617 cv
160.672 5.32617 li
160.621 5.32617 160.599 5.30371 160.599 5.25244 cv
160.599 1.3125 li
160.599 1.26172 160.621 1.23877 160.672 1.23877 cv
161.431 1.23877 li
cp
f
165.465 5.36572 mo
164.293 5.36572 163.591 4.56738 163.591 3.28271 cv
163.591 1.99756 164.293 1.19922 165.465 1.19922 cv
165.94 1.19922 166.246 1.25586 166.557 1.43164 cv
166.585 1.44824 166.597 1.47119 166.597 1.48779 cv
166.597 1.50488 166.591 1.52783 166.58 1.55029 cv
166.313 2.05957 li
166.297 2.08789 166.279 2.10498 166.263 2.10498 cv
166.246 2.10498 166.229 2.09961 166.212 2.09375 cv
165.985 1.98633 165.787 1.94678 165.538 1.94678 cv
165.068 1.94678 164.524 2.33691 164.524 3.28271 cv
164.524 4.2334 165.04 4.61279 165.544 4.61279 cv
165.73 4.61279 165.951 4.59033 166.218 4.45996 cv
166.257 4.44287 166.291 4.44873 166.308 4.48291 cv
166.585 5.00928 li
166.613 5.05469 166.603 5.09424 166.557 5.12256 cv
166.218 5.31494 165.917 5.36572 165.465 5.36572 cv
cp
f
170.18 3.30518 mo
171.583 5.22412 li
171.611 5.26953 171.583 5.32617 171.538 5.32617 cv
170.57 5.32617 li
170.547 5.32617 170.53 5.31494 170.519 5.29785 cv
169.427 3.59375 li
169.427 5.25244 li
169.427 5.30371 169.404 5.32617 169.364 5.32617 cv
168.605 5.32617 li
168.555 5.32617 168.532 5.30371 168.532 5.25244 cv
168.532 1.3125 li
168.532 1.26172 168.555 1.23877 168.605 1.23877 cv
169.364 1.23877 li
169.404 1.23877 169.427 1.26172 169.427 1.3125 cv
169.427 3.10693 li
170.508 1.26709 li
170.519 1.25 170.536 1.23877 170.559 1.23877 cv
171.431 1.23877 li
171.493 1.23877 171.51 1.29541 171.481 1.34082 cv
170.18 3.30518 li
cp
f
174.675 1.01807 mo
174.641 1.03516 174.618 1.02393 174.601 .995605 cv
174.487 .757813 li
174.471 .734863 174.482 .712402 174.516 .689941 cv
175.598 .0102539 li
175.62 -.00634766 175.659 -.00634766 175.677 .0332031 cv
175.903 .497559 li
175.92 .525391 175.92 .55957 175.88 .57666 cv
174.675 1.01807 li
cp
175.359 3.74658 mo
174.906 2.17871 li
174.454 3.74658 li
175.359 3.74658 li
cp
174.25 4.46582 mo
174.023 5.27539 li
174.007 5.30908 173.984 5.32617 173.95 5.32617 cv
173.214 5.32617 li
173.175 5.32617 173.146 5.29199 173.163 5.25244 cv
174.408 1.26709 li
174.408 1.25 174.426 1.23877 174.454 1.23877 cv
175.456 1.23877 li
175.473 1.23877 175.489 1.25 175.501 1.27832 cv
176.735 5.25244 li
176.752 5.29199 176.724 5.32617 176.685 5.32617 cv
175.863 5.32617 li
175.829 5.32617 175.807 5.30908 175.79 5.27539 cv
175.563 4.46582 li
174.25 4.46582 li
cp
f
92.1826 11.9292 mo
92.1826 12.7271 91.7354 13.231 90.6201 13.231 cv
89.5103 13.231 89.0635 12.7271 89.0635 11.9292 cv
89.0635 9.17773 li
89.0635 9.12695 89.0859 9.104 89.1367 9.104 cv
89.8955 9.104 li
89.9351 9.104 89.9575 9.12695 89.9575 9.17773 cv
89.9575 11.9063 li
89.9575 12.3081 90.1787 12.5063 90.6201 12.5063 cv
91.0674 12.5063 91.2881 12.3081 91.2881 11.9063 cv
91.2881 9.17773 li
91.2881 9.12695 91.3105 9.104 91.356 9.104 cv
92.1201 9.104 li
92.1597 9.104 92.1826 9.12695 92.1826 9.17773 cv
92.1826 11.9292 li
cp
f
96.6431 11.8555 mo
96.6431 9.17773 li
96.6431 9.12695 96.6602 9.104 96.6997 9.104 cv
97.4297 9.104 li
97.4751 9.104 97.498 9.12695 97.498 9.17773 cv
97.498 13.1177 li
97.498 13.1689 97.4751 13.1914 97.4297 13.1914 cv
96.6372 13.1914 li
96.5864 13.1914 96.5752 13.1855 96.5581 13.146 cv
95.2446 10.4399 li
95.2446 13.1177 li
95.2446 13.1689 95.2222 13.1914 95.1768 13.1914 cv
94.4634 13.1914 li
94.4126 13.1914 94.3901 13.1689 94.3901 13.1177 cv
94.3901 9.17773 li
94.3901 9.12695 94.4126 9.104 94.4634 9.104 cv
95.2446 9.104 li
95.2959 9.104 95.3071 9.10986 95.3242 9.14941 cv
96.6431 11.8555 li
cp
f
100.543 9.104 mo
100.583 9.104 100.605 9.12695 100.605 9.17773 cv
100.605 13.1177 li
100.605 13.1689 100.583 13.1914 100.543 13.1914 cv
99.7842 13.1914 li
99.7334 13.1914 99.7109 13.1689 99.7109 13.1177 cv
99.7109 9.17773 li
99.7109 9.12695 99.7334 9.104 99.7842 9.104 cv
100.543 9.104 li
cp
f
103.722 13.1914 mo
103.694 13.1914 103.677 13.1743 103.666 13.1406 cv
102.511 9.19482 li
102.494 9.14355 102.522 9.104 102.567 9.104 cv
103.394 9.104 li
103.439 9.104 103.444 9.12109 103.461 9.16064 cv
104.26 12.2969 li
105.058 9.16064 li
105.069 9.12109 105.092 9.104 105.132 9.104 cv
105.867 9.104 li
105.918 9.104 105.941 9.13232 105.93 9.18359 cv
104.769 13.1406 li
104.758 13.1743 104.735 13.1914 104.701 13.1914 cv
103.722 13.1914 li
cp
f
108.721 10.7856 mo
109.982 10.7856 li
110.034 10.7856 110.063 10.8081 110.063 10.8535 cv
110.063 11.4424 li
110.063 11.4819 110.034 11.5044 109.982 11.5044 cv
108.721 11.5044 li
108.721 12.4214 li
108.721 12.4497 108.731 12.4668 108.76 12.4668 cv
110.351 12.4668 li
110.401 12.4668 110.425 12.4893 110.425 12.5347 cv
110.425 13.1177 li
110.425 13.1689 110.401 13.1914 110.351 13.1914 cv
107.899 13.1914 li
107.849 13.1914 107.826 13.1689 107.826 13.1177 cv
107.826 9.17773 li
107.826 9.12695 107.849 9.104 107.899 9.104 cv
110.351 9.104 li
110.401 9.104 110.425 9.12695 110.425 9.17773 cv
110.425 9.75537 li
110.425 9.80615 110.401 9.82861 110.351 9.82861 cv
108.76 9.82861 li
108.731 9.82861 108.721 9.8457 108.721 9.87402 cv
108.721 10.7856 li
cp
f
113.305 10.9326 mo
113.649 10.9326 li
114.063 10.9326 114.317 10.7515 114.317 10.3608 cv
114.317 9.99316 114.103 9.82861 113.672 9.82861 cv
113.35 9.82861 li
113.321 9.82861 113.305 9.8457 113.305 9.87402 cv
113.305 10.9326 li
cp
113.305 11.5723 mo
113.305 13.1177 li
113.305 13.1689 113.281 13.1914 113.242 13.1914 cv
112.483 13.1914 li
112.433 13.1914 112.41 13.1689 112.41 13.1177 cv
112.41 9.17773 li
112.41 9.12695 112.433 9.104 112.483 9.104 cv
113.791 9.104 li
114.815 9.104 115.252 9.55713 115.252 10.3438 cv
115.252 10.9326 114.975 11.3403 114.431 11.4932 cv
115.461 13.084 li
115.501 13.146 115.467 13.1914 115.416 13.1914 cv
114.516 13.1914 li
114.487 13.1914 114.471 13.1802 114.465 13.1631 cv
113.542 11.5723 li
113.305 11.5723 li
cp
f
120.046 9.104 mo
120.092 9.104 120.114 9.12695 120.114 9.17773 cv
120.114 9.75537 li
120.114 9.78369 120.108 9.80615 120.092 9.82861 cv
118.291 12.4668 li
120.046 12.4668 li
120.092 12.4668 120.114 12.4893 120.114 12.5293 cv
120.114 13.1177 li
120.114 13.1689 120.092 13.1914 120.046 13.1914 cv
117.34 13.1914 li
117.289 13.1914 117.267 13.1689 117.267 13.1177 cv
117.267 12.5459 li
117.267 12.5293 117.277 12.501 117.295 12.4727 cv
119.084 9.82861 li
117.34 9.82861 li
117.289 9.82861 117.267 9.80615 117.267 9.76074 cv
117.267 9.17773 li
117.267 9.12695 117.289 9.104 117.34 9.104 cv
120.046 9.104 li
cp
f
122.932 9.104 mo
122.971 9.104 122.994 9.12695 122.994 9.17773 cv
122.994 13.1177 li
122.994 13.1689 122.971 13.1914 122.932 13.1914 cv
122.173 13.1914 li
122.122 13.1914 122.1 13.1689 122.1 13.1177 cv
122.1 9.17773 li
122.1 9.12695 122.122 9.104 122.173 9.104 cv
122.932 9.104 li
cp
f
126.032 13.1914 mo
125.992 13.1914 125.97 13.1689 125.97 13.1177 cv
125.97 9.87402 li
125.97 9.8457 125.952 9.82861 125.924 9.82861 cv
124.979 9.82861 li
124.928 9.82861 124.905 9.80615 124.905 9.75537 cv
124.905 9.17773 li
124.905 9.12695 124.928 9.104 124.979 9.104 cv
127.866 9.104 li
127.911 9.104 127.934 9.12695 127.934 9.17773 cv
127.934 9.75537 li
127.934 9.80615 127.911 9.82861 127.866 9.82861 cv
126.903 9.82861 li
126.875 9.82861 126.864 9.8457 126.864 9.87402 cv
126.864 13.1177 li
126.864 13.1689 126.841 13.1914 126.79 13.1914 cv
126.032 13.1914 li
cp
f
131.38 11.6118 mo
130.927 10.0439 li
130.475 11.6118 li
131.38 11.6118 li
cp
130.271 12.3311 mo
130.044 13.1406 li
130.027 13.1743 130.004 13.1914 129.971 13.1914 cv
129.234 13.1914 li
129.195 13.1914 129.167 13.1572 129.184 13.1177 cv
130.429 9.13232 li
130.429 9.11523 130.446 9.104 130.475 9.104 cv
131.477 9.104 li
131.493 9.104 131.51 9.11523 131.521 9.14355 cv
132.756 13.1177 li
132.772 13.1572 132.744 13.1914 132.705 13.1914 cv
131.884 13.1914 li
131.85 13.1914 131.827 13.1743 131.811 13.1406 cv
131.584 12.3311 li
130.271 12.3311 li
cp
f
138.736 13.1914 mo
138.708 13.1914 138.691 13.1743 138.68 13.1406 cv
137.525 9.19482 li
137.508 9.14355 137.536 9.104 137.582 9.104 cv
138.408 9.104 li
138.453 9.104 138.459 9.12109 138.477 9.16064 cv
139.274 12.2969 li
140.072 9.16064 li
140.084 9.12109 140.106 9.104 140.146 9.104 cv
140.882 9.104 li
140.933 9.104 140.956 9.13232 140.944 9.18359 cv
139.784 13.1406 li
139.772 13.1743 139.75 13.1914 139.716 13.1914 cv
138.736 13.1914 li
cp
f
146.919 11.4648 mo
146.919 12.4214 li
146.919 12.4497 146.93 12.4668 146.958 12.4668 cv
147.439 12.4668 li
147.751 12.4668 148.028 12.3481 148.028 11.9971 cv
148.028 11.6177 147.779 11.4648 147.23 11.4648 cv
146.919 11.4648 li
cp
146.964 9.82861 mo
146.936 9.82861 146.919 9.8457 146.919 9.87402 cv
146.919 10.8252 li
147.253 10.8252 li
147.723 10.8252 147.96 10.6836 147.96 10.2988 cv
147.96 9.93652 147.739 9.82861 147.354 9.82861 cv
146.964 9.82861 li
cp
147.258 9.104 mo
148.385 9.104 148.895 9.43262 148.895 10.208 cv
148.895 10.5703 148.656 10.9438 148.063 11.125 cv
148.702 11.3008 148.962 11.6743 148.962 12.1953 cv
148.962 12.9199 148.481 13.1914 147.298 13.1914 cv
146.098 13.1914 li
146.047 13.1914 146.024 13.1689 146.024 13.1177 cv
146.024 9.17773 li
146.024 9.12695 146.047 9.104 146.098 9.104 cv
147.258 9.104 li
cp
f
152.064 10.9326 mo
152.409 10.9326 li
152.822 10.9326 153.077 10.7515 153.077 10.3608 cv
153.077 9.99316 152.862 9.82861 152.432 9.82861 cv
152.109 9.82861 li
152.081 9.82861 152.064 9.8457 152.064 9.87402 cv
152.064 10.9326 li
cp
152.064 11.5723 mo
152.064 13.1177 li
152.064 13.1689 152.041 13.1914 152.002 13.1914 cv
151.243 13.1914 li
151.192 13.1914 151.17 13.1689 151.17 13.1177 cv
151.17 9.17773 li
151.17 9.12695 151.192 9.104 151.243 9.104 cv
152.551 9.104 li
153.575 9.104 154.012 9.55713 154.012 10.3438 cv
154.012 10.9326 153.734 11.3403 153.19 11.4932 cv
154.221 13.084 li
154.261 13.146 154.227 13.1914 154.176 13.1914 cv
153.275 13.1914 li
153.247 13.1914 153.23 13.1802 153.225 13.1631 cv
152.302 11.5723 li
152.064 11.5723 li
cp
f
158.149 11.6118 mo
157.696 10.0439 li
157.244 11.6118 li
158.149 11.6118 li
cp
157.04 12.3311 mo
156.813 13.1406 li
156.797 13.1743 156.773 13.1914 156.74 13.1914 cv
156.004 13.1914 li
155.965 13.1914 155.937 13.1572 155.953 13.1177 cv
157.198 9.13232 li
157.198 9.11523 157.216 9.104 157.244 9.104 cv
158.246 9.104 li
158.263 9.104 158.279 9.11523 158.291 9.14355 cv
159.525 13.1177 li
159.542 13.1572 159.514 13.1914 159.475 13.1914 cv
158.653 13.1914 li
158.619 13.1914 158.597 13.1743 158.58 13.1406 cv
158.354 12.3311 li
157.04 12.3311 li
cp
f
161.897 13.1914 mo
161.857 13.1914 161.835 13.1689 161.835 13.1177 cv
161.835 9.87402 li
161.835 9.8457 161.817 9.82861 161.789 9.82861 cv
160.844 9.82861 li
160.793 9.82861 160.771 9.80615 160.771 9.75537 cv
160.771 9.17773 li
160.771 9.12695 160.793 9.104 160.844 9.104 cv
163.731 9.104 li
163.776 9.104 163.799 9.12695 163.799 9.17773 cv
163.799 9.75537 li
163.799 9.80615 163.776 9.82861 163.731 9.82861 cv
162.769 9.82861 li
162.74 9.82861 162.729 9.8457 162.729 9.87402 cv
162.729 13.1177 li
162.729 13.1689 162.706 13.1914 162.655 13.1914 cv
161.897 13.1914 li
cp
f
166.532 9.104 mo
166.572 9.104 166.595 9.12695 166.595 9.17773 cv
166.595 13.1177 li
166.595 13.1689 166.572 13.1914 166.532 13.1914 cv
165.773 13.1914 li
165.723 13.1914 165.7 13.1689 165.7 13.1177 cv
165.7 9.17773 li
165.7 9.12695 165.723 9.104 165.773 9.104 cv
166.532 9.104 li
cp
f
168.642 12.9253 mo
168.896 12.3423 li
168.913 12.3027 168.947 12.2856 168.992 12.3027 cv
169.23 12.4102 169.428 12.4893 169.818 12.4893 cv
170.158 12.4893 170.362 12.3423 170.362 12.0933 cv
170.362 11.8608 170.249 11.7422 169.7 11.4985 cv
168.992 11.1987 168.687 10.8252 168.687 10.2192 cv
168.687 9.55713 169.185 9.06445 170.028 9.06445 cv
170.577 9.06445 170.815 9.104 171.229 9.28516 cv
171.279 9.30225 171.279 9.3418 171.263 9.38135 cv
170.996 9.90234 li
170.979 9.94189 170.945 9.96484 170.895 9.94189 cv
170.674 9.85156 170.447 9.80615 170.181 9.80615 cv
169.818 9.80615 169.66 9.96484 169.66 10.1968 cv
169.66 10.4233 169.745 10.5308 170.351 10.7739 cv
171.059 11.0742 171.33 11.4253 171.33 12.0024 cv
171.33 12.7949 170.77 13.231 169.898 13.231 cv
169.428 13.231 169.061 13.1914 168.675 12.9932 cv
168.642 12.9707 168.63 12.9478 168.642 12.9253 cv
cp
f
174.262 12.4214 mo
174.262 12.4497 174.272 12.4668 174.301 12.4668 cv
175.79 12.4668 li
175.835 12.4668 175.857 12.4893 175.857 12.5405 cv
175.857 13.1177 li
175.857 13.1689 175.835 13.1914 175.79 13.1914 cv
173.44 13.1914 li
173.39 13.1914 173.367 13.1689 173.367 13.1177 cv
173.367 9.17773 li
173.367 9.12695 173.39 9.104 173.44 9.104 cv
174.199 9.104 li
174.238 9.104 174.262 9.12695 174.262 9.17773 cv
174.262 12.4214 li
cp
f
179.621 11.6118 mo
179.168 10.0439 li
178.716 11.6118 li
179.621 11.6118 li
cp
178.512 12.3311 mo
178.285 13.1406 li
178.269 13.1743 178.246 13.1914 178.212 13.1914 cv
177.476 13.1914 li
177.437 13.1914 177.408 13.1572 177.425 13.1177 cv
178.67 9.13232 li
178.67 9.11523 178.688 9.104 178.716 9.104 cv
179.718 9.104 li
179.734 9.104 179.751 9.11523 179.763 9.14355 cv
180.997 13.1177 li
181.014 13.1572 180.985 13.1914 180.946 13.1914 cv
180.125 13.1914 li
180.091 13.1914 180.068 13.1743 180.052 13.1406 cv
179.825 12.3311 li
178.512 12.3311 li
cp
f
183.577 13.1914 mo
183.549 13.1914 183.532 13.1743 183.521 13.1406 cv
182.366 9.19482 li
182.349 9.14355 182.377 9.104 182.423 9.104 cv
183.249 9.104 li
183.294 9.104 183.3 9.12109 183.317 9.16064 cv
184.115 12.2969 li
184.913 9.16064 li
184.925 9.12109 184.947 9.104 184.987 9.104 cv
185.723 9.104 li
185.773 9.104 185.797 9.13232 185.785 9.18359 cv
184.625 13.1406 li
184.613 13.1743 184.591 13.1914 184.557 13.1914 cv
183.577 13.1914 li
cp
f
188.575 10.7856 mo
189.837 10.7856 li
189.889 10.7856 189.917 10.8081 189.917 10.8535 cv
189.917 11.4424 li
189.917 11.4819 189.889 11.5044 189.837 11.5044 cv
188.575 11.5044 li
188.575 12.4214 li
188.575 12.4497 188.586 12.4668 188.614 12.4668 cv
190.205 12.4668 li
190.256 12.4668 190.279 12.4893 190.279 12.5347 cv
190.279 13.1177 li
190.279 13.1689 190.256 13.1914 190.205 13.1914 cv
187.754 13.1914 li
187.703 13.1914 187.681 13.1689 187.681 13.1177 cv
187.681 9.17773 li
187.681 9.12695 187.703 9.104 187.754 9.104 cv
190.205 9.104 li
190.256 9.104 190.279 9.12695 190.279 9.17773 cv
190.279 9.75537 li
190.279 9.80615 190.256 9.82861 190.205 9.82861 cv
188.614 9.82861 li
188.586 9.82861 188.575 9.8457 188.575 9.87402 cv
188.575 10.7856 li
cp
f
89.6294 18.7754 mo
90.8975 18.7754 li
90.937 18.7754 90.9595 18.792 90.9595 18.832 cv
90.9595 19.1943 li
90.9595 19.2334 90.937 19.251 90.8975 19.251 cv
89.6294 19.251 li
89.6294 21 li
89.6294 21.04 89.6123 21.0566 89.5786 21.0566 cv
89.1201 21.0566 li
89.0801 21.0566 89.0635 21.04 89.0635 21 cv
89.0635 17.0264 li
89.0635 16.9863 89.0801 16.9697 89.1201 16.9697 cv
91.2598 16.9697 li
91.2993 16.9697 91.3218 16.9863 91.3218 17.0264 cv
91.3218 17.3828 li
91.3218 17.4219 91.2993 17.4453 91.2598 17.4453 cv
89.6748 17.4453 li
89.6465 17.4453 89.6294 17.4619 89.6294 17.4902 cv
89.6294 18.7754 li
cp
f
94.6543 19.6133 mo
94.0371 17.541 li
93.4199 19.6133 li
94.6543 19.6133 li
cp
93.2842 20.0889 mo
93.0181 21.0117 li
93.0068 21.04 92.9844 21.0566 92.9561 21.0566 cv
92.5088 21.0566 li
92.4688 21.0566 92.4521 21.0283 92.4688 20.9883 cv
93.7031 16.998 li
93.7031 16.9805 93.7144 16.9697 93.7427 16.9697 cv
94.3882 16.9697 li
94.4053 16.9697 94.4219 16.9805 94.4277 17.0029 cv
95.6504 20.9834 li
95.6675 21.0342 95.6504 21.0566 95.605 21.0566 cv
95.1128 21.0566 li
95.0845 21.0566 95.0615 21.04 95.0562 21.0117 cv
94.79 20.0889 li
93.2842 20.0889 li
cp
f
98.6499 18.9561 mo
100.247 20.9717 li
100.275 21.0117 100.247 21.0566 100.201 21.0566 cv
99.6235 21.0566 li
99.6064 21.0566 99.5898 21.0508 99.5786 21.0342 cv
98.1235 19.0977 li
98.1235 21 li
98.1235 21.04 98.1064 21.0566 98.0728 21.0566 cv
97.6143 21.0566 li
97.5742 21.0566 97.5576 21.04 97.5576 21 cv
97.5576 17.0264 li
97.5576 16.9863 97.5742 16.9697 97.6143 16.9697 cv
98.0728 16.9697 li
98.1064 16.9697 98.1235 16.9863 98.1235 17.0264 cv
98.1235 18.8662 li
99.5161 16.9922 li
99.5273 16.9746 99.5444 16.9697 99.5669 16.9697 cv
100.094 16.9697 li
100.139 16.9697 100.162 17.0205 100.133 17.0596 cv
98.6499 18.9561 li
cp
f
104.938 19.7881 mo
104.938 20.5811 104.655 21.0967 103.54 21.0967 cv
102.425 21.0967 102.142 20.5811 102.142 19.7881 cv
102.142 17.0264 li
102.142 16.9863 102.159 16.9697 102.198 16.9697 cv
102.657 16.9697 li
102.691 16.9697 102.708 16.9863 102.708 17.0264 cv
102.708 19.9131 li
102.708 20.4336 102.991 20.6211 103.54 20.6211 cv
104.083 20.6211 104.372 20.4287 104.372 19.9131 cv
104.372 17.0264 li
104.372 16.9863 104.389 16.9697 104.429 16.9697 cv
104.882 16.9697 li
104.921 16.9697 104.938 16.9863 104.938 17.0264 cv
104.938 19.7881 li
cp
f
107.717 20.5361 mo
107.717 20.5645 107.729 20.5811 107.757 20.5811 cv
109.325 20.5811 li
109.364 20.5811 109.382 20.6035 109.382 20.6436 cv
109.382 21 li
109.382 21.04 109.364 21.0566 109.325 21.0566 cv
107.208 21.0566 li
107.168 21.0566 107.151 21.04 107.151 21 cv
107.151 17.0264 li
107.151 16.9863 107.168 16.9697 107.208 16.9697 cv
107.666 16.9697 li
107.7 16.9697 107.717 16.9863 107.717 17.0264 cv
107.717 20.5361 li
cp
f
111.621 21.0566 mo
111.588 21.0566 111.57 21.04 111.57 21 cv
111.57 17.4902 li
111.57 17.4619 111.554 17.4453 111.525 17.4453 cv
110.546 17.4453 li
110.506 17.4453 110.489 17.4219 110.489 17.3828 cv
110.489 17.0264 li
110.489 16.9863 110.506 16.9697 110.546 16.9697 cv
113.161 16.9697 li
113.201 16.9697 113.218 16.9863 113.218 17.0264 cv
113.218 17.3828 li
113.218 17.4219 113.201 17.4453 113.161 17.4453 cv
112.176 17.4453 li
112.147 17.4453 112.137 17.4619 112.137 17.4902 cv
112.137 21 li
112.137 21.04 112.119 21.0566 112.08 21.0566 cv
111.621 21.0566 li
cp
f
116.652 19.6133 mo
116.035 17.541 li
115.419 19.6133 li
116.652 19.6133 li
cp
115.283 20.0889 mo
115.017 21.0117 li
115.005 21.04 114.982 21.0566 114.954 21.0566 cv
114.507 21.0566 li
114.468 21.0566 114.45 21.0283 114.468 20.9883 cv
115.701 16.998 li
115.701 16.9805 115.713 16.9697 115.741 16.9697 cv
116.387 16.9697 li
116.403 16.9697 116.421 16.9805 116.426 17.0029 cv
117.649 20.9834 li
117.666 21.0342 117.649 21.0566 117.604 21.0566 cv
117.111 21.0566 li
117.083 21.0566 117.061 21.04 117.055 21.0117 cv
116.788 20.0889 li
115.283 20.0889 li
cp
f
122.876 16.9697 mo
122.91 16.9697 122.927 16.9863 122.927 17.0264 cv
122.927 21 li
122.927 21.04 122.91 21.0566 122.876 21.0566 cv
122.418 21.0566 li
122.378 21.0566 122.361 21.04 122.361 21 cv
122.361 17.0264 li
122.361 16.9863 122.378 16.9697 122.418 16.9697 cv
122.876 16.9697 li
cp
f
127.374 20.1172 mo
127.374 17.0264 li
127.374 16.9863 127.391 16.9697 127.425 16.9697 cv
127.872 16.9697 li
127.911 16.9697 127.929 16.9863 127.929 17.0264 cv
127.929 21 li
127.929 21.04 127.911 21.0566 127.872 21.0566 cv
127.391 21.0566 li
127.34 21.0566 127.328 21.0508 127.312 21.0117 cv
125.692 17.9092 li
125.692 21 li
125.692 21.04 125.675 21.0566 125.636 21.0566 cv
125.194 21.0566 li
125.154 21.0566 125.138 21.04 125.138 21 cv
125.138 17.0264 li
125.138 16.9863 125.154 16.9697 125.194 16.9697 cv
125.67 16.9697 li
125.721 16.9697 125.731 16.9746 125.749 17.0146 cv
127.374 20.1172 li
cp
f
130.701 18.7754 mo
131.97 18.7754 li
132.01 18.7754 132.032 18.792 132.032 18.832 cv
132.032 19.1943 li
132.032 19.2334 132.01 19.251 131.97 19.251 cv
130.701 19.251 li
130.701 21 li
130.701 21.04 130.685 21.0566 130.65 21.0566 cv
130.192 21.0566 li
130.152 21.0566 130.136 21.04 130.136 21 cv
130.136 17.0264 li
130.136 16.9863 130.152 16.9697 130.192 16.9697 cv
132.332 16.9697 li
132.372 16.9697 132.395 16.9863 132.395 17.0264 cv
132.395 17.3828 li
132.395 17.4219 132.372 17.4453 132.332 17.4453 cv
130.747 17.4453 li
130.719 17.4453 130.701 17.4619 130.701 17.4902 cv
130.701 18.7754 li
cp
f
135.693 17.4053 mo
135.02 17.4053 134.669 17.9316 134.669 19.0127 cv
134.669 20.0947 135.02 20.6211 135.693 20.6211 cv
136.355 20.6211 136.712 20.0947 136.712 19.0127 cv
136.712 17.9316 136.355 17.4053 135.693 17.4053 cv
cp
135.693 21.0967 mo
134.453 21.0967 134.074 20.2637 134.074 19.0127 cv
134.074 17.7451 134.442 16.9297 135.693 16.9297 cv
136.928 16.9297 137.307 17.7451 137.307 19.0127 cv
137.307 20.2637 136.928 21.0967 135.693 21.0967 cv
cp
f
139.915 18.8945 mo
140.425 18.8945 li
140.969 18.8945 141.252 18.6904 141.252 18.1641 cv
141.252 17.6426 140.979 17.4453 140.437 17.4453 cv
139.961 17.4453 li
139.933 17.4453 139.915 17.4619 139.915 17.4902 cv
139.915 18.8945 li
cp
139.915 19.3359 mo
139.915 21 li
139.915 21.04 139.898 21.0566 139.864 21.0566 cv
139.406 21.0566 li
139.366 21.0566 139.35 21.04 139.35 21 cv
139.35 17.0264 li
139.35 16.9863 139.366 16.9697 139.406 16.9697 cv
140.487 16.9697 li
141.376 16.9697 141.852 17.3428 141.852 18.1523 cv
141.852 18.8145 141.506 19.166 140.957 19.2852 cv
141.942 20.9658 li
141.971 21.0166 141.948 21.0566 141.902 21.0566 cv
141.37 21.0566 li
141.342 21.0566 141.325 21.0449 141.319 21.0283 cv
140.374 19.3359 li
139.915 19.3359 li
cp
f
145.496 21.0566 mo
145.468 21.0566 145.451 21.0449 145.445 21.0225 cv
144.5 17.9258 li
144.5 21 li
144.5 21.04 144.482 21.0566 144.443 21.0566 cv
144.024 21.0566 li
143.984 21.0566 143.968 21.04 143.968 21 cv
143.968 17.0264 li
143.968 16.9863 143.984 16.9697 144.024 16.9697 cv
144.636 16.9697 li
144.664 16.9697 144.687 16.9805 144.692 17.0029 cv
145.751 20.377 li
146.815 17.0029 li
146.826 16.9805 146.849 16.9697 146.877 16.9697 cv
147.438 16.9697 li
147.472 16.9697 147.488 16.9863 147.488 17.0264 cv
147.488 21 li
147.488 21.04 147.472 21.0566 147.438 21.0566 cv
147.014 21.0566 li
146.974 21.0566 146.957 21.04 146.957 21 cv
146.957 17.9258 li
146.017 21.0225 li
146.011 21.0449 145.994 21.0566 145.966 21.0566 cv
145.496 21.0566 li
cp
f
151.599 19.6133 mo
150.981 17.541 li
150.365 19.6133 li
151.599 19.6133 li
cp
150.229 20.0889 mo
149.963 21.0117 li
149.951 21.04 149.929 21.0566 149.9 21.0566 cv
149.453 21.0566 li
149.414 21.0566 149.396 21.0283 149.414 20.9883 cv
150.647 16.998 li
150.647 16.9805 150.659 16.9697 150.688 16.9697 cv
151.333 16.9697 li
151.35 16.9697 151.367 16.9805 151.372 17.0029 cv
152.596 20.9834 li
152.612 21.0342 152.596 21.0566 152.55 21.0566 cv
152.058 21.0566 li
152.029 21.0566 152.007 21.04 152.001 21.0117 cv
151.734 20.0889 li
150.229 20.0889 li
cp
f
154.978 21.0566 mo
154.944 21.0566 154.927 21.04 154.927 21 cv
154.927 17.4902 li
154.927 17.4619 154.91 17.4453 154.882 17.4453 cv
153.902 17.4453 li
153.862 17.4453 153.846 17.4219 153.846 17.3828 cv
153.846 17.0264 li
153.846 16.9863 153.862 16.9697 153.902 16.9697 cv
156.518 16.9697 li
156.558 16.9697 156.574 16.9863 156.574 17.0264 cv
156.574 17.3828 li
156.574 17.4219 156.558 17.4453 156.518 17.4453 cv
155.532 17.4453 li
155.504 17.4453 155.493 17.4619 155.493 17.4902 cv
155.493 21 li
155.493 21.04 155.476 21.0566 155.437 21.0566 cv
154.978 21.0566 li
cp
f
158.99 16.9697 mo
159.024 16.9697 159.041 16.9863 159.041 17.0264 cv
159.041 21 li
159.041 21.04 159.024 21.0566 158.99 21.0566 cv
158.532 21.0566 li
158.492 21.0566 158.476 21.04 158.476 21 cv
158.476 17.0264 li
158.476 16.9863 158.492 16.9697 158.532 16.9697 cv
158.99 16.9697 li
cp
f
162.345 18.9561 mo
163.94 20.9717 li
163.969 21.0117 163.94 21.0566 163.896 21.0566 cv
163.318 21.0566 li
163.301 21.0566 163.284 21.0508 163.272 21.0342 cv
161.817 19.0977 li
161.817 21 li
161.817 21.04 161.801 21.0566 161.767 21.0566 cv
161.309 21.0566 li
161.269 21.0566 161.252 21.04 161.252 21 cv
161.252 17.0264 li
161.252 16.9863 161.269 16.9697 161.309 16.9697 cv
161.767 16.9697 li
161.801 16.9697 161.817 16.9863 161.817 17.0264 cv
161.817 18.8662 li
163.211 16.9922 li
163.222 16.9746 163.238 16.9697 163.262 16.9697 cv
163.788 16.9697 li
163.833 16.9697 163.855 17.0205 163.827 17.0596 cv
162.345 18.9561 li
cp
f
167.257 19.3242 mo
167.257 20.9941 li
167.257 21.0342 167.239 21.0566 167.2 21.0566 cv
166.747 21.0566 li
166.707 21.0566 166.69 21.0342 166.69 20.9941 cv
166.69 19.3242 li
165.519 17.0596 li
165.49 17.0088 165.513 16.9697 165.564 16.9697 cv
166.079 16.9697 li
166.107 16.9697 166.124 16.9805 166.136 17.0029 cv
167.008 18.7979 li
167.885 17.0029 li
167.891 16.9805 167.907 16.9697 167.936 16.9697 cv
168.417 16.9697 li
168.463 16.9697 168.485 17.0088 168.468 17.0488 cv
167.257 19.3242 li
cp
f
90.9429 27.4785 mo
90.3257 25.4063 li
89.7085 27.4785 li
90.9429 27.4785 li
cp
89.5728 27.9541 mo
89.3066 28.877 li
89.2954 28.9053 89.2729 28.9219 89.2446 28.9219 cv
88.7974 28.9219 li
88.7578 28.9219 88.7407 28.8936 88.7578 28.8535 cv
89.9917 24.8633 li
89.9917 24.8457 90.0029 24.835 90.0313 24.835 cv
90.6768 24.835 li
90.6938 24.835 90.7104 24.8457 90.7163 24.8682 cv
91.939 28.8486 li
91.9561 28.8994 91.939 28.9219 91.8936 28.9219 cv
91.4014 28.9219 li
91.373 28.9219 91.3501 28.9053 91.3447 28.877 cv
91.0786 27.9541 li
89.5728 27.9541 li
cp
f
97.1719 24.835 mo
97.2056 24.835 97.2227 24.8516 97.2227 24.8916 cv
97.2227 28.8652 li
97.2227 28.9053 97.2056 28.9219 97.1719 28.9219 cv
96.7129 28.9219 li
96.6733 28.9219 96.6567 28.9053 96.6567 28.8652 cv
96.6567 24.8916 li
96.6567 24.8516 96.6733 24.835 96.7129 24.835 cv
97.1719 24.835 li
cp
f
101.669 27.9824 mo
101.669 24.8916 li
101.669 24.8516 101.687 24.835 101.72 24.835 cv
102.167 24.835 li
102.207 24.835 102.224 24.8516 102.224 24.8916 cv
102.224 28.8652 li
102.224 28.9053 102.207 28.9219 102.167 28.9219 cv
101.687 28.9219 li
101.636 28.9219 101.624 28.916 101.607 28.877 cv
99.9883 25.7744 li
99.9883 28.8652 li
99.9883 28.9053 99.9712 28.9219 99.9316 28.9219 cv
99.4902 28.9219 li
99.4502 28.9219 99.4336 28.9053 99.4336 28.8652 cv
99.4336 24.8916 li
99.4336 24.8516 99.4502 24.835 99.4902 24.835 cv
99.9653 24.835 li
100.017 24.835 100.028 24.8398 100.045 24.8799 cv
101.669 27.9824 li
cp
f
104.997 26.6406 mo
106.265 26.6406 li
106.305 26.6406 106.327 26.6572 106.327 26.6973 cv
106.327 27.0596 li
106.327 27.0986 106.305 27.1162 106.265 27.1162 cv
104.997 27.1162 li
104.997 28.8652 li
104.997 28.9053 104.98 28.9219 104.946 28.9219 cv
104.487 28.9219 li
104.448 28.9219 104.431 28.9053 104.431 28.8652 cv
104.431 24.8916 li
104.431 24.8516 104.448 24.835 104.487 24.835 cv
106.627 24.835 li
106.667 24.835 106.689 24.8516 106.689 24.8916 cv
106.689 25.248 li
106.689 25.2871 106.667 25.3105 106.627 25.3105 cv
105.042 25.3105 li
105.014 25.3105 104.997 25.3271 104.997 25.3555 cv
104.997 26.6406 li
cp
f
109.989 25.2705 mo
109.315 25.2705 108.965 25.7969 108.965 26.8779 cv
108.965 27.96 109.315 28.4863 109.989 28.4863 cv
110.651 28.4863 111.008 27.96 111.008 26.8779 cv
111.008 25.7969 110.651 25.2705 109.989 25.2705 cv
cp
109.989 28.9619 mo
108.749 28.9619 108.37 28.1289 108.37 26.8779 cv
108.37 25.6104 108.738 24.7949 109.989 24.7949 cv
111.223 24.7949 111.603 25.6104 111.603 26.8779 cv
111.603 28.1289 111.223 28.9619 109.989 28.9619 cv
cp
f
114.211 26.7598 mo
114.721 26.7598 li
115.265 26.7598 115.548 26.5557 115.548 26.0293 cv
115.548 25.5078 115.275 25.3105 114.732 25.3105 cv
114.257 25.3105 li
114.229 25.3105 114.211 25.3271 114.211 25.3555 cv
114.211 26.7598 li
cp
114.211 27.2012 mo
114.211 28.8652 li
114.211 28.9053 114.194 28.9219 114.16 28.9219 cv
113.702 28.9219 li
113.662 28.9219 113.646 28.9053 113.646 28.8652 cv
113.646 24.8916 li
113.646 24.8516 113.662 24.835 113.702 24.835 cv
114.783 24.835 li
115.672 24.835 116.147 25.208 116.147 26.0176 cv
116.147 26.6797 115.802 27.0313 115.253 27.1504 cv
116.238 28.8311 li
116.267 28.8818 116.244 28.9219 116.198 28.9219 cv
115.666 28.9219 li
115.638 28.9219 115.621 28.9102 115.615 28.8936 cv
114.67 27.2012 li
114.211 27.2012 li
cp
f
119.792 28.9219 mo
119.764 28.9219 119.747 28.9102 119.741 28.8877 cv
118.796 25.791 li
118.796 28.8652 li
118.796 28.9053 118.778 28.9219 118.739 28.9219 cv
118.32 28.9219 li
118.28 28.9219 118.264 28.9053 118.264 28.8652 cv
118.264 24.8916 li
118.264 24.8516 118.28 24.835 118.32 24.835 cv
118.932 24.835 li
118.96 24.835 118.982 24.8457 118.988 24.8682 cv
120.047 28.2422 li
121.111 24.8682 li
121.122 24.8457 121.145 24.835 121.173 24.835 cv
121.733 24.835 li
121.768 24.835 121.784 24.8516 121.784 24.8916 cv
121.784 28.8652 li
121.784 28.9053 121.768 28.9219 121.733 28.9219 cv
121.309 28.9219 li
121.27 28.9219 121.253 28.9053 121.253 28.8652 cv
121.253 25.791 li
120.313 28.8877 li
120.307 28.9102 120.29 28.9219 120.262 28.9219 cv
119.792 28.9219 li
cp
f
125.877 27.4785 mo
125.26 25.4063 li
124.644 27.4785 li
125.877 27.4785 li
cp
124.508 27.9541 mo
124.241 28.877 li
124.229 28.9053 124.207 28.9219 124.179 28.9219 cv
123.731 28.9219 li
123.692 28.9219 123.675 28.8936 123.692 28.8535 cv
124.926 24.8633 li
124.926 24.8457 124.938 24.835 124.966 24.835 cv
125.611 24.835 li
125.628 24.835 125.646 24.8457 125.65 24.8682 cv
126.874 28.8486 li
126.891 28.8994 126.874 28.9219 126.828 28.9219 cv
126.336 28.9219 li
126.308 28.9219 126.285 28.9053 126.279 28.877 cv
126.013 27.9541 li
124.508 27.9541 li
cp
f
129.403 24.0137 mo
129.364 23.9854 129.353 23.9629 129.381 23.9346 cv
129.563 23.6914 li
129.585 23.6631 129.613 23.6572 129.642 23.6797 cv
130.207 24.1494 li
130.23 24.1719 130.253 24.1719 130.275 24.1494 cv
130.842 23.6797 li
130.87 23.6572 130.898 23.6631 130.921 23.6914 cv
131.102 23.9346 li
131.13 23.9629 131.119 23.9854 131.079 24.0137 cv
130.281 24.5518 li
130.253 24.5684 130.23 24.5684 130.202 24.5518 cv
129.403 24.0137 li
cp
130.332 28.9619 mo
129.177 28.9619 128.662 28.1123 128.662 26.873 cv
128.662 25.6494 129.177 24.7949 130.332 24.7949 cv
130.717 24.7949 131 24.8457 131.317 25.0215 cv
131.346 25.0439 131.346 25.0781 131.328 25.1182 cv
131.158 25.4287 li
131.142 25.4688 131.107 25.4688 131.079 25.4521 cv
130.836 25.333 130.683 25.2822 130.366 25.2822 cv
129.731 25.2822 129.262 25.791 129.262 26.873 cv
129.262 27.9707 129.721 28.4746 130.366 28.4746 cv
130.649 28.4746 130.83 28.4346 131.085 28.2988 cv
131.119 28.2822 131.142 28.2881 131.158 28.3164 cv
131.334 28.6387 li
131.351 28.6729 131.346 28.7012 131.317 28.7295 cv
130.988 28.9102 130.723 28.9619 130.332 28.9619 cv
cp
f
135.511 27.9824 mo
135.511 24.8916 li
135.511 24.8516 135.527 24.835 135.562 24.835 cv
136.009 24.835 li
136.048 24.835 136.065 24.8516 136.065 24.8916 cv
136.065 28.8652 li
136.065 28.9053 136.048 28.9219 136.009 28.9219 cv
135.527 28.9219 li
135.477 28.9219 135.465 28.916 135.448 28.877 cv
133.829 25.7744 li
133.829 28.8652 li
133.829 28.9053 133.812 28.9219 133.772 28.9219 cv
133.331 28.9219 li
133.291 28.9219 133.274 28.9053 133.274 28.8652 cv
133.274 24.8916 li
133.274 24.8516 133.291 24.835 133.331 24.835 cv
133.807 24.835 li
133.857 24.835 133.868 24.8398 133.886 24.8799 cv
135.511 27.9824 li
cp
f
139.411 24.5234 mo
139.383 24.54 139.354 24.5176 139.337 24.501 cv
139.264 24.3535 li
139.258 24.3311 139.264 24.2969 139.292 24.2803 cv
140.294 23.6914 li
140.334 23.6738 140.356 23.6855 140.367 23.7139 cv
140.521 24.0029 li
140.537 24.042 140.526 24.0645 140.492 24.082 cv
139.411 24.5234 li
cp
139.717 27.1895 mo
139.717 28.8594 li
139.717 28.8994 139.699 28.9219 139.66 28.9219 cv
139.207 28.9219 li
139.168 28.9219 139.15 28.8994 139.15 28.8594 cv
139.15 27.1895 li
137.979 24.9248 li
137.95 24.874 137.973 24.835 138.024 24.835 cv
138.539 24.835 li
138.567 24.835 138.584 24.8457 138.596 24.8682 cv
139.468 26.6631 li
140.345 24.8682 li
140.351 24.8457 140.367 24.835 140.396 24.835 cv
140.877 24.835 li
140.923 24.835 140.945 24.874 140.928 24.9141 cv
139.717 27.1895 li
cp
f
144.147 28.9619 mo
142.992 28.9619 142.478 28.1123 142.478 26.873 cv
142.478 25.6494 142.992 24.7949 144.147 24.7949 cv
144.532 24.7949 144.815 24.8457 145.133 25.0215 cv
145.161 25.0439 145.161 25.0781 145.144 25.1182 cv
144.974 25.4287 li
144.957 25.4688 144.923 25.4688 144.895 25.4521 cv
144.651 25.333 144.498 25.2822 144.182 25.2822 cv
143.547 25.2822 143.077 25.791 143.077 26.873 cv
143.077 27.9707 143.536 28.4746 144.182 28.4746 cv
144.465 28.4746 144.646 28.4346 144.9 28.2988 cv
144.935 28.2822 144.957 28.2881 144.974 28.3164 cv
145.149 28.6387 li
145.166 28.6729 145.161 28.7012 145.133 28.7295 cv
144.804 28.9102 144.538 28.9619 144.147 28.9619 cv
cp
f
147.701 27.1162 mo
147.673 27.1162 147.655 27.1328 147.655 27.1611 cv
147.655 28.8652 li
147.655 28.9053 147.639 28.9219 147.604 28.9219 cv
147.146 28.9219 li
147.106 28.9219 147.09 28.9053 147.09 28.8652 cv
147.09 24.8916 li
147.09 24.8516 147.106 24.835 147.146 24.835 cv
147.604 24.835 li
147.639 24.835 147.655 24.8516 147.655 24.8916 cv
147.655 26.5947 li
147.655 26.623 147.673 26.6406 147.701 26.6406 cv
149.264 26.6406 li
149.292 26.6406 149.309 26.623 149.309 26.5947 cv
149.309 24.8916 li
149.309 24.8516 149.326 24.835 149.365 24.835 cv
149.818 24.835 li
149.857 24.835 149.875 24.8516 149.875 24.8916 cv
149.875 28.8652 li
149.875 28.9053 149.857 28.9219 149.818 28.9219 cv
149.365 28.9219 li
149.326 28.9219 149.309 28.9053 149.309 28.8652 cv
149.309 27.1611 li
149.309 27.1328 149.292 27.1162 149.264 27.1162 cv
147.701 27.1162 li
cp
f
155.726 28.9219 mo
155.692 28.9219 155.675 28.9053 155.675 28.8652 cv
155.675 25.3555 li
155.675 25.3271 155.658 25.3105 155.63 25.3105 cv
154.65 25.3105 li
154.61 25.3105 154.594 25.2871 154.594 25.248 cv
154.594 24.8916 li
154.594 24.8516 154.61 24.835 154.65 24.835 cv
157.266 24.835 li
157.306 24.835 157.322 24.8516 157.322 24.8916 cv
157.322 25.248 li
157.322 25.2871 157.306 25.3105 157.266 25.3105 cv
156.28 25.3105 li
156.252 25.3105 156.241 25.3271 156.241 25.3555 cv
156.241 28.8652 li
156.241 28.9053 156.224 28.9219 156.185 28.9219 cv
155.726 28.9219 li
cp
f
159.782 26.6406 mo
161.107 26.6406 li
161.147 26.6406 161.17 26.6572 161.17 26.6973 cv
161.17 27.0596 li
161.17 27.0986 161.147 27.1162 161.107 27.1162 cv
159.782 27.1162 li
159.782 28.4014 li
159.782 28.4297 159.794 28.4463 159.822 28.4463 cv
161.47 28.4463 li
161.51 28.4463 161.532 28.4629 161.532 28.5029 cv
161.532 28.8652 li
161.532 28.9053 161.51 28.9219 161.47 28.9219 cv
159.273 28.9219 li
159.233 28.9219 159.217 28.9053 159.217 28.8652 cv
159.217 24.8916 li
159.217 24.8516 159.233 24.835 159.273 24.835 cv
161.47 24.835 li
161.51 24.835 161.532 24.8516 161.532 24.8916 cv
161.532 25.248 li
161.532 25.2871 161.51 25.3105 161.47 25.3105 cv
159.822 25.3105 li
159.794 25.3105 159.782 25.3271 159.782 25.3555 cv
159.782 26.6406 li
cp
f
165.074 28.9619 mo
163.919 28.9619 163.404 28.1123 163.404 26.873 cv
163.404 25.6494 163.919 24.7949 165.074 24.7949 cv
165.459 24.7949 165.742 24.8457 166.06 25.0215 cv
166.088 25.0439 166.088 25.0781 166.07 25.1182 cv
165.9 25.4287 li
165.884 25.4688 165.85 25.4688 165.821 25.4521 cv
165.578 25.333 165.425 25.2822 165.108 25.2822 cv
164.474 25.2822 164.004 25.791 164.004 26.873 cv
164.004 27.9707 164.463 28.4746 165.108 28.4746 cv
165.392 28.4746 165.572 28.4346 165.827 28.2988 cv
165.861 28.2822 165.884 28.2881 165.9 28.3164 cv
166.076 28.6387 li
166.093 28.6729 166.088 28.7012 166.06 28.7295 cv
165.73 28.9102 165.465 28.9619 165.074 28.9619 cv
cp
f
168.628 27.1162 mo
168.6 27.1162 168.582 27.1328 168.582 27.1611 cv
168.582 28.8652 li
168.582 28.9053 168.565 28.9219 168.531 28.9219 cv
168.073 28.9219 li
168.033 28.9219 168.017 28.9053 168.017 28.8652 cv
168.017 24.8916 li
168.017 24.8516 168.033 24.835 168.073 24.835 cv
168.531 24.835 li
168.565 24.835 168.582 24.8516 168.582 24.8916 cv
168.582 26.5947 li
168.582 26.623 168.6 26.6406 168.628 26.6406 cv
170.19 26.6406 li
170.219 26.6406 170.235 26.623 170.235 26.5947 cv
170.235 24.8916 li
170.235 24.8516 170.253 24.835 170.292 24.835 cv
170.745 24.835 li
170.784 24.835 170.802 24.8516 170.802 24.8916 cv
170.802 28.8652 li
170.802 28.9053 170.784 28.9219 170.745 28.9219 cv
170.292 28.9219 li
170.253 28.9219 170.235 28.9053 170.235 28.8652 cv
170.235 27.1611 li
170.235 27.1328 170.219 27.1162 170.19 27.1162 cv
168.628 27.1162 li
cp
f
175.252 27.9824 mo
175.252 24.8916 li
175.252 24.8516 175.269 24.835 175.303 24.835 cv
175.75 24.835 li
175.789 24.835 175.807 24.8516 175.807 24.8916 cv
175.807 28.8652 li
175.807 28.9053 175.789 28.9219 175.75 28.9219 cv
175.269 28.9219 li
175.218 28.9219 175.206 28.916 175.189 28.877 cv
173.57 25.7744 li
173.57 28.8652 li
173.57 28.9053 173.553 28.9219 173.514 28.9219 cv
173.072 28.9219 li
173.032 28.9219 173.016 28.9053 173.016 28.8652 cv
173.016 24.8916 li
173.016 24.8516 173.032 24.835 173.072 24.835 cv
173.548 24.835 li
173.599 24.835 173.609 24.8398 173.627 24.8799 cv
175.252 27.9824 li
cp
f
179.463 25.2705 mo
178.789 25.2705 178.438 25.7969 178.438 26.8779 cv
178.438 27.96 178.789 28.4863 179.463 28.4863 cv
180.125 28.4863 180.481 27.96 180.481 26.8779 cv
180.481 25.7969 180.125 25.2705 179.463 25.2705 cv
cp
179.463 28.9619 mo
178.223 28.9619 177.844 28.1289 177.844 26.8779 cv
177.844 25.6104 178.212 24.7949 179.463 24.7949 cv
180.697 24.7949 181.076 25.6104 181.076 26.8779 cv
181.076 28.1289 180.697 28.9619 179.463 28.9619 cv
cp
f
183.685 28.4014 mo
183.685 28.4297 183.696 28.4463 183.725 28.4463 cv
185.293 28.4463 li
185.332 28.4463 185.35 28.4688 185.35 28.5088 cv
185.35 28.8652 li
185.35 28.9053 185.332 28.9219 185.293 28.9219 cv
183.176 28.9219 li
183.136 28.9219 183.119 28.9053 183.119 28.8652 cv
183.119 24.8916 li
183.119 24.8516 183.136 24.835 183.176 24.835 cv
183.634 24.835 li
183.668 24.835 183.685 24.8516 183.685 24.8916 cv
183.685 28.4014 li
cp
f
188.155 24.5234 mo
188.127 24.54 188.099 24.5176 188.082 24.501 cv
188.008 24.3535 li
188.003 24.3311 188.008 24.2969 188.036 24.2803 cv
189.038 23.6914 li
189.078 23.6738 189.101 23.6855 189.112 23.7139 cv
189.265 24.0029 li
189.282 24.042 189.271 24.0645 189.236 24.082 cv
188.155 24.5234 li
cp
188.444 25.2705 mo
187.771 25.2705 187.42 25.7969 187.42 26.8779 cv
187.42 27.96 187.771 28.4863 188.444 28.4863 cv
189.106 28.4863 189.463 27.96 189.463 26.8779 cv
189.463 25.7969 189.106 25.2705 188.444 25.2705 cv
cp
188.444 28.9619 mo
187.204 28.9619 186.825 28.1289 186.825 26.8779 cv
186.825 25.6104 187.193 24.7949 188.444 24.7949 cv
189.678 24.7949 190.058 25.6104 190.058 26.8779 cv
190.058 28.1289 189.678 28.9619 188.444 28.9619 cv
cp
f
194.189 27.2861 mo
193.51 27.2861 li
193.471 27.2861 193.453 27.2686 193.453 27.2295 cv
193.453 26.8779 li
193.453 26.8389 193.471 26.8213 193.51 26.8213 cv
194.659 26.8213 li
194.699 26.8213 194.716 26.8389 194.716 26.8779 cv
194.716 28.6445 li
194.716 28.6846 194.704 28.707 194.682 28.7178 cv
194.365 28.8818 194.036 28.9619 193.606 28.9619 cv
192.451 28.9619 191.931 28.1006 191.931 26.873 cv
191.931 25.6494 192.451 24.7949 193.606 24.7949 cv
193.985 24.7949 194.274 24.8457 194.591 25.0215 cv
194.619 25.0439 194.619 25.0781 194.603 25.1182 cv
194.438 25.4287 li
194.416 25.4688 194.388 25.4746 194.354 25.4521 cv
194.11 25.333 193.957 25.2822 193.641 25.2822 cv
193.006 25.2822 192.53 25.791 192.53 26.873 cv
192.53 27.9707 192.995 28.4912 193.623 28.4912 cv
193.9 28.4912 194.036 28.4404 194.189 28.3779 cv
194.189 27.2861 li
cp
f
197.273 24.835 mo
197.308 24.835 197.324 24.8516 197.324 24.8916 cv
197.324 28.8652 li
197.324 28.9053 197.308 28.9219 197.273 28.9219 cv
196.815 28.9219 li
196.775 28.9219 196.759 28.9053 196.759 28.8652 cv
196.759 24.8916 li
196.759 24.8516 196.775 24.835 196.815 24.835 cv
197.273 24.835 li
cp
f
200.051 24.835 mo
200.085 24.835 200.102 24.8516 200.102 24.8916 cv
200.102 28.8652 li
200.102 28.9053 200.085 28.9219 200.051 28.9219 cv
199.593 28.9219 li
199.553 28.9219 199.536 28.9053 199.536 28.8652 cv
199.536 24.8916 li
199.536 24.8516 199.553 24.835 199.593 24.835 cv
200.051 24.835 li
cp
199.553 24.5234 mo
199.524 24.54 199.496 24.5176 199.479 24.501 cv
199.405 24.3535 li
199.4 24.3311 199.405 24.2969 199.434 24.2803 cv
200.436 23.6914 li
200.476 23.6738 200.498 23.6855 200.51 23.7139 cv
200.662 24.0029 li
200.68 24.042 200.668 24.0645 200.634 24.082 cv
199.553 24.5234 li
cp
f
1.5332 12.7002 mo
2.37793 12.7002 3.06641 12.0142 3.06641 11.167 cv
3.06641 10.3174 2.37793 9.63721 1.5332 9.63721 cv
.685059 9.63721 0 10.3174 0 11.167 cv
0 12.0142 .685059 12.7002 1.5332 12.7002 cv
.9 0 0 .2 cmyk
f
1.5332 21.1221 mo
2.37793 21.1221 3.06641 20.4375 3.06641 19.5908 cv
3.06641 18.7451 2.37793 18.0557 1.5332 18.0557 cv
.685059 18.0557 0 18.7451 0 19.5908 cv
0 20.4375 .685059 21.1221 1.5332 21.1221 cv
f
9.95703 12.7002 mo
10.8042 12.7002 11.4893 12.0142 11.4893 11.167 cv
11.4893 10.3174 10.8042 9.63721 9.95703 9.63721 cv
9.10986 9.63721 8.42285 10.3174 8.42285 11.167 cv
8.42285 12.0142 9.10986 12.7002 9.95703 12.7002 cv
f
9.95703 21.1221 mo
10.8042 21.1221 11.4893 20.4375 11.4893 19.5908 cv
11.4893 18.7451 10.8042 18.0557 9.95703 18.0557 cv
9.10986 18.0557 8.42285 18.7451 8.42285 19.5908 cv
8.42285 20.4375 9.10986 21.1221 9.95703 21.1221 cv
f
18.3774 12.7002 mo
19.2275 12.7002 19.9126 12.0142 19.9126 11.167 cv
19.9126 10.3174 19.2275 9.63721 18.3774 9.63721 cv
17.5303 9.63721 16.8467 10.3174 16.8467 11.167 cv
16.8467 12.0142 17.5303 12.7002 18.3774 12.7002 cv
f
1.5332 4.27637 mo
2.37793 4.27637 3.06641 3.59033 3.06641 2.74316 cv
3.06641 1.89551 2.37793 1.2124 1.5332 1.2124 cv
.685059 1.2124 0 1.89551 0 2.74316 cv
0 3.59033 .685059 4.27637 1.5332 4.27637 cv
f
9.95703 4.27637 mo
10.8042 4.27637 11.4893 3.59033 11.4893 2.74316 cv
11.4893 1.89551 10.8042 1.2124 9.95703 1.2124 cv
9.10986 1.2124 8.42285 1.89551 8.42285 2.74316 cv
8.42285 3.59033 9.10986 4.27637 9.95703 4.27637 cv
f
18.3774 4.27637 mo
19.2275 4.27637 19.9126 3.59033 19.9126 2.74316 cv
19.9126 1.89551 19.2275 1.2124 18.3774 1.2124 cv
17.5303 1.2124 16.8467 1.89551 16.8467 2.74316 cv
16.8467 3.59033 17.5303 4.27637 18.3774 4.27637 cv
f
18.3774 21.1221 mo
19.2275 21.1221 19.9126 20.4375 19.9126 19.5908 cv
19.9126 18.7451 19.2275 18.0557 18.3774 18.0557 cv
17.5303 18.0557 16.8467 18.7451 16.8467 19.5908 cv
16.8467 20.4375 17.5303 21.1221 18.3774 21.1221 cv
f
26.8027 12.7002 mo
27.6489 12.7002 28.3359 12.0142 28.3359 11.167 cv
28.3359 10.3174 27.6489 9.63721 26.8027 9.63721 cv
25.9546 9.63721 25.271 10.3174 25.271 11.167 cv
25.271 12.0142 25.9546 12.7002 26.8027 12.7002 cv
f
26.8027 21.1221 mo
27.6489 21.1221 28.3359 20.4375 28.3359 19.5908 cv
28.3359 18.7451 27.6489 18.0557 26.8027 18.0557 cv
25.9546 18.0557 25.271 18.7451 25.271 19.5908 cv
25.271 20.4375 25.9546 21.1221 26.8027 21.1221 cv
f
26.8027 4.27637 mo
27.6489 4.27637 28.3359 3.59033 28.3359 2.74121 cv
28.3359 1.89844 27.6489 1.21045 26.8027 1.21045 cv
25.9546 1.21045 25.271 1.89844 25.271 2.74121 cv
25.271 3.59033 25.9546 4.27637 26.8027 4.27637 cv
f
37.1094 13.9072 mo
37.1094 13.8501 37.1436 13.8174 37.1992 13.8174 cv
40.3735 13.8174 li
40.4521 13.8174 40.4985 13.771 40.4985 13.6924 cv
40.4985 12.978 li
40.4985 12.8994 40.4521 12.8652 40.3735 12.8652 cv
36.0884 12.8652 li
36.0093 12.8652 35.9756 12.8994 35.9756 12.978 cv
35.9756 20.9346 li
35.9756 21.0127 36.0093 21.0479 36.0884 21.0479 cv
37.0063 21.0479 li
37.0752 21.0479 37.1094 21.0127 37.1094 20.9346 cv
37.1094 17.4326 li
39.6475 17.4326 li
39.7275 17.4326 39.7725 17.3984 39.7725 17.3193 cv
39.7725 16.5938 li
39.7725 16.5146 39.7275 16.4805 39.6475 16.4805 cv
37.1094 16.4805 li
37.1094 13.9072 li
cp
44.3052 12.8652 mo
44.2266 12.8652 44.1924 12.8994 44.1924 12.978 cv
44.1924 20.9346 li
44.1924 21.0127 44.2266 21.0479 44.3052 21.0479 cv
45.2231 21.0479 li
45.2915 21.0479 45.3262 21.0127 45.3262 20.9346 cv
45.3262 12.978 li
45.3262 12.8994 45.2915 12.8652 45.2231 12.8652 cv
44.3052 12.8652 li
cp
49.8594 12.8652 mo
49.7793 12.8652 49.7466 12.8994 49.7466 12.978 cv
49.7466 20.9346 li
49.7466 21.0127 49.7793 21.0479 49.8594 21.0479 cv
50.7773 21.0479 li
50.8442 21.0479 50.8794 21.0127 50.8794 20.9346 cv
50.8794 12.978 li
50.8794 12.8994 50.8442 12.8652 50.7773 12.8652 cv
49.8594 12.8652 li
cp
57.8594 21.0479 mo
57.9395 21.0479 57.9722 21.0127 57.9722 20.9346 cv
57.9722 13.9072 li
57.9722 13.8501 57.9966 13.8174 58.0522 13.8174 cv
60.0254 13.8174 li
60.1045 13.8174 60.1372 13.771 60.1372 13.6924 cv
60.1372 12.978 li
60.1372 12.8994 60.1045 12.8652 60.0254 12.8652 cv
54.7896 12.8652 li
54.7095 12.8652 54.6743 12.8994 54.6743 12.978 cv
54.6743 13.6924 li
54.6743 13.771 54.7095 13.8174 54.7896 13.8174 cv
56.7495 13.8174 li
56.8062 13.8174 56.8394 13.8501 56.8394 13.9072 cv
56.8394 20.9346 li
56.8394 21.0127 56.8735 21.0479 56.9414 21.0479 cv
57.8594 21.0479 li
cp
0 0 0 1 cmyk
f
35.7153 9.11816 mo
36.4854 9.51416 37.2222 9.59424 38.1636 9.59424 cv
39.9082 9.59424 41.0303 8.72217 41.0303 7.13525 cv
41.0303 5.97803 40.4863 5.27637 39.0693 4.67529 cv
37.8574 4.18701 37.6875 3.97217 37.6875 3.51807 cv
37.6875 3.05518 38.0044 2.7373 38.7295 2.7373 cv
39.2622 2.7373 39.7153 2.82715 40.1582 3.00928 cv
40.2593 3.05518 40.3281 3.00928 40.3613 2.93018 cv
40.8945 1.88818 li
40.9282 1.80713 40.9282 1.72803 40.8262 1.69434 cv
39.9995 1.33203 39.5234 1.25342 38.4233 1.25342 cv
36.7354 1.25342 35.7373 2.23828 35.7373 3.56396 cv
35.7373 4.77734 36.3506 5.52539 37.7666 6.12598 cv
38.8652 6.61328 39.0923 6.8501 39.0923 7.31494 cv
39.0923 7.81396 38.6846 8.10938 38.0044 8.10938 cv
37.2222 8.10938 36.8262 7.9502 36.3506 7.73535 cv
36.2583 7.70117 36.1914 7.73535 36.1572 7.81396 cv
35.6475 8.98096 li
35.6245 9.02734 35.6475 9.07227 35.7153 9.11816 cv
48.2603 9.51416 mo
48.3633 9.51416 48.4082 9.47021 48.4082 9.36719 cv
48.4082 2.87305 li
48.4082 2.81641 48.4302 2.78223 48.4873 2.78223 cv
50.4146 2.78223 li
50.5054 2.78223 50.5503 2.7373 50.5503 2.63623 cv
50.5503 1.479 li
50.5503 1.37695 50.5054 1.33203 50.4146 1.33203 cv
44.6343 1.33203 li
44.5322 1.33203 44.4863 1.37695 44.4863 1.479 cv
44.4863 2.63623 li
44.4863 2.7373 44.5322 2.78223 44.6343 2.78223 cv
46.5273 2.78223 li
46.5845 2.78223 46.6172 2.81641 46.6172 2.87305 cv
46.6172 9.36719 li
46.6172 9.47021 46.6636 9.51416 46.7422 9.51416 cv
48.2603 9.51416 li
cp
60.5913 1.479 mo
60.5913 1.37695 60.5474 1.33203 60.4663 1.33203 cv
58.9375 1.33203 li
58.8452 1.33203 58.8003 1.37695 58.8003 1.479 cv
58.8003 6.94238 li
58.8003 7.74707 58.3594 8.14307 57.4644 8.14307 cv
56.5806 8.14307 56.1372 7.74707 56.1372 6.94238 cv
56.1372 1.479 li
56.1372 1.37695 56.0913 1.33203 56.0122 1.33203 cv
54.4941 1.33203 li
54.3926 1.33203 54.3462 1.37695 54.3462 1.479 cv
54.3462 6.9873 li
54.3462 8.58496 55.2422 9.59424 57.4644 9.59424 cv
59.6963 9.59424 60.5913 8.58496 60.5913 6.9873 cv
60.5913 1.479 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 14.0%%AI8_CreatorVersion: 14.0.0%%For: (Juraj Blako) ()%%Title: (STU-FIIT-nfh.eps)%%CreationDate: 9.10.2012 16:59%%Canvassize: 16383%AI9_DataStream%Gb!Q;Bg_G`dcgW3r!-&\*O67m&Qo2C.LN[9ZAHY;J90k@&+=GO]k$A\,_Y:7RJ/m$#GKVGWiiM)Y-.3XG.Vh%e[.9*%W\n*-(Qk%%s3K&nPG9.9GBnGj?g&tmUJ*3Ks)MA'"]^sESH&g5($;Ft"(!J$\uSDP\u^apDL\q4cc.b\O`]ac[&;4)\D8/cgtBka9,N]d_G$K,%QVNtV;m;?q>.N1&gq-]`3diaIAGI&nAm5O1F3u'$!?CkT(LKqLj&N9i"$lasb6`F+J.H*@oY'*g/cjW*2/GnaqRJpjP]Tg^KTh#f%$StP]E-^,M_)abV2rLL.s*7u?qh*j:.CPS\g%=)JOX&06PI<FPTHO;i"[&Fj$"oJ0o*Hmt.lI0eq7+-)95NY+<&D`WR:quLU9V*-%koIPQ<'S=>q/CrGio"%*$e%r_oLM;pKr):u>^8hNGQ4jTs6lcT]%nB%Qa=XiAm9-)`=1(MbPL_cJ:f]!;&'#J:[V<E^=\qcQ^Ck-%b63:eHIhDCP>4Sm?Pp6W;PO6mob1D?[)G=\#pa+@?9r`\ST,MLkg=/B:L@'5gs5fG`p<_'*9(*:L_FGR(WT7&b`>Z/1I9!M%$(r#%%a[m9_+i+F(]aaEJ]V!oF5/Vq"LmB00UsIWHm2%6UHAMoiY[C\o1TjV8kC#r<(Vp$c8begm0^mjrt=mP\,h*rb@Q/Q2$f"Ur`Y"C%;;ph%7aUo7dQD@W!@);*mUR_Y*70uR@PoaEQgLT4Mpdirh#E]spLad9Qid:i(4Pg:r(JBoB0Iu8Z7PpsZLB<d_P\rCT*bXI)o'A`%YSPR&?T\j7nN<nlo7A+&9I+#:6itq2J:I(U6itq3,[`5!%=Z/tq)kaDcbh^5H2&YWLNN_#4r"3lLMmP%HnG^"*DA2b(Xn!kihu9?%q)QVZh!c!.Jo-+3YSM&=gf"%Y[Kq?!3j;'B'=M--"F_/q$%B`uYXS$p6Ge,eOC=(*-Yta>$VOot+AU-TN$$W&m=Lt7NZc+m\UPa`%R)bSPQqQo^^PQ0TWQ2AUg+[\@\_K\q%K$afK'e2_&/+CsghQ`qpDEf9CVf_d4cHq'hhCHMTC<Y5*U\FPM(+3+n.XB)m=V%@(U934%^1.!OUFZM/E`mkP5/[#$Y/=G1D_b[=b;&[OE_I:hM]p:BKknd0?ldl\=YaFOi7kclpaL#$r.MJ^I)GYdT&=hO-`dDSkA\V-/aEo/%*6*N*>F&]#<b,osP[d;$Z68Iego$P.Qo`H6N#2'p;D.^"gbqhfX<hAsd..#.3W=d_a-qj])>?/R%>H!uIoq/"D9)*)gp4AgRO.Ps%Q$k4>ZJ;MO#N&Qn8ChmjQXqeMr;\:03=4SD\KTEOdjsItE:KDS9qd(+0=HbFoT*GM'D4$X#=gWG:]64O3S`"1/lDZ.J$BjiXo?<>%ic4lX*g^leV17/LI\Qh\s)L-t>Q'K[3S];i/lDZ.J&NW2Xo?<>.-2PZkHOF5-gk(6>Q0?VK(^p(Sr3pZ$?.[LJA3*!RfIr5dVnn>%%f_=A+MWP;.ZR+d4dprZn:.qhq-R/O;bH&R?NhUq83#WZD#Jj>&fjZ$Ru%0IYY>:i_`35:(#i*c/^@54BNAjuGb.VX<.Y'(0haS@%"#.OZ=96dbJo<uWJ=t?c>8B=%oV(`Y68flri%OkKP_G4WY:.:R$KJ?KK!+$g'eg'k?5EKkon>B$4<'W\_bU<B)h'<QNep9dS.(1N%0Rm1g/+FTC#AlgkK4mNrUBs1Gq?Puqhs^r3kf(%T-@d&oJn=Fgga]/^Qm8h0pc2e0L4ss_Es"VHFlg'R>f*UoQl-rD&nPXS!9Fi;%nG=]=iuH!l@A1.5ob7=YcXFFq"iqK6M^W*Jjg(tMDp(pa)13BQ_f+RUq&-&,DEikCndogJ[Y1"(L9^kbW:F&9#Km0`MqeA&Fog](%N6m5;q&OmIjIapUos^Z*CRVN2AH5U:C4Rr3EF?P3lq8?jF'(As)N&.Mhc)YpG:5H_[ji2E;[KN-OONt`Q4p>?n3?hFLgpn5]cluH%Pq?,?ED>(YZKu,^Z5bm[:o_<\&4[>e-WSWHIMZOa5]\t\00g$gbGcWK-BoVf+9!i''P"hB,aQ94$1!@?]+C=>+A'(n[0B2CdW&EV%+Q[WjOM"u3J2T9C/H^`^1!27(Qc$:DCRQ!BeB7_AlNHW#/B(f7J3Bcp,CtB=^*UrN.OjA+Jis<Q&e^/[/'rQ599=N,&g`>9\.+-/%NH%U>WbWL'GQIK.Ja?"WLSY/IYkEoW>GjC]fkq3_cH0Q5P&OM9<Gd4JMT`4,8<Dl;FWamVZOdo=>AWnB>E:ul/0t73Peh:U;TW5N%fN,lP&;!#^@-Nl#JgCQJJ4B]84jD+>c14,(dJ%I/.e8h*_,N_O;VW?*[iqqXWK&*^=gFXA;M6L>'[&7`m4u-3=C5TE`=e28L?1ds%*(sjoNllg$Nq\-spQEK]PiK#7A&fn<<Jr5?LWhW$oZo"uWBOCkKH(#c*6HW]bAi">Km[mbm]BVqN>E8Kiu$o]2QfX]BsD4T;ZGu,%<g%M-[er>g%Ju/[^n/[u]cpZ^XJ):'&k&o=E?D7:O_%@S<7M&nj#:*[q*#4q,AR8<pG$g]BF3h4P'+c$b7XpM!(4RZ8MV"3r'FR2%HQ!_;L9J`Ai[0S!.rV`GH\%DS(0k_rMb>a@/CANZc`"TiX/JW)fjCcWkTs$eRd*s>?\l(eWb%&7eF1?N%k*K1:u'$(&&rJU\,:%D%@rD`8U/M_<j4ODs;nf"Sp&8tha0@,d]6,n3[>.Zt0QPsA-h15S]E4-dibUKeS:8^&hJ@,]krTh.%-\4k\"0.?GNj0pV#p<oI5P:'%_sQF<B*h*G\&H&p56NX7TCUmaD\r7W1NB/'N_>;Z^\[!DS,fUS[&6(M@p>IA#$i1WVesh<aq`"JiEtM7)t6CPXd7W?g0T4iF6!8,%[npJlT3?KLCbr_M(In<jB22\`^7C8:Coi0;5#S%H`MaL%s6ma#6SD,OVjKd9R%t(89NcB2?\\g72TGe=r\m3j\&[Of5]"c]LKu,-%#1"#Xpt7QWok2^@NJEFK.SiH(XXu/\h/U4/B<gf!XIqjsHjuu:+Ge,&W79*>F1>-/XFI_BI0=We/YJPT"^n\@$mTK_66U-6R(uMU%g;WX/\A)uN.b!).;tRtq"HAnr!';A`m7H1QF@>E3aW.ZSH:g29*V+Nma<@`h:sPt'i5ZT-ncOdKG&klDkNb4km"*T_HW9I5kD3Nh%F67F2JDgT[FdQN%BmV^D^=tnK+nYL90brH]cmH[Rec9$VN7l;.>'o$0)Ma-IFW>!d>`bb8@r:2*eod?2R,M))*98"VW*RRq,fuF_%l00Z_:,7*s`MgX+,"5H*&XInPk5Ruk!0FA1"Lpk#]_$sWJQ>2<%Jh.F)Km:mg>X4Pqrt\<1[F]C+.bL+s-enEi,K$)7<-s_/c/r&%$GrfG;/H9I!HA,77'5nOE82-(;d>)t7P4^SPc+"\q$.fFpsaXO?*sTGMi0Ba9m$FVGWV@oJ$m<I\LoF?R+.T,9uPR-8f!k&s%Bm)%N*P6EA&bkCW8Fr!)7aAK5MN?d&FD$AD6s`X#B6AT:a7m-O0!c&mba3AZm@)9[=?isN;Ic$Iq,\]Dc65g?a`rT<rEP%1i-KB[91^$%s&i"gccKU9d=tC+*:n]<fbMPW>V?(/s$`a]s.H3HYJ:*q8)sWR)D&nGmf.H7bf%C**`T]=\&[V_rU(1$hfa*7WVN/D_$ibdq&$NE%?%3B3bATJeOt-HD>:&aIgsDuaFrL#9^S!;p'Bt7kr6(C+q2[JS)9L-8(<u'eQG=N>p:lo<1SUF@XhXI70_?TZ=.cV5DBJ6Prf<-=%@"eAPP;)5SgHFI%m7TrY:HFM_;XD5[F:jecb;:$4_A)P&.!mDE`a_$#n^&'g5b5\hl%RaTIW)`b37Y^V0FHC$%_D_+$m^0kdnV27%K%</Vd\b^3kcBX>7=XQ$VeCH7b!m[0A1nVA[^b\Jg1&C]Kj0\1['QO72Tfu4gq5,s']lkW,qC>e7W,YU1^3L.fkTakhus?ip]k88%mO]*V6bn]TZ4AANUNrse@Sob+F:dk_J+;p=D_IE)EVOGd>pJ!Xhd@nX)n2m0*7/I!%RZ>l'\h*U]FBOpqZi3Glo>m"J(s)@(2P<W%ZB9K+Qd?Z-+YaQ.l8os`Ik@51hJh09%*-9I+,/)TaE:Xc[\naXHdHufAokKrop263AOau"4hXN_g5D)RVT!qkeCA;pLC9h\&37H"%0J)`b.KRd.(&c9]3jYmK9^/h]Ra`UQoCa/;_.#B,NSA2$d\\SFncNJHAAs!Z$X3F/Ir,J\b$er*8VchB674(/Og5\b\=C&?k?01o%K<IjH<(e>k83mJ88<i[]S5lMQ]-cF,rmb?)PpV]c9f]s&m@VSX55VB6c=(O3@JrN:4IcLC^mXB#J1M-0`tn!P8A5,SHT[hlSP()-%p1c4GibTkNW&-ra*a)]8SJq@*hd$<"m^1%%Bid$k5hNY(Z.JHH9;=:`1L"T8e"f*"B.>R)_^T?dCk3@(/5.[)CDeK23t(pXEYd3M%6^Hj\QJRfVeQ=A-\KnV16`>?N9c'9QSH4VIlAo;gdN<bMN679AdMOrK]*`lb/u_,>a;F+QCh<_8/Cs*0H%7DL0O_*OXX#9:;GP;F%j(]@sehS"Bhosa_@O0-27.gj2o=5^X@486`dF[XAjV>n'-)*/;qKg(".*aPZ[E&ZI\'Y-Vbj%2MJ"-ZS(b'I\6dWTO3[p:*MQVsP%o1C8O7dNF+cmU=TCJER0XJ;V/*T1$.:Vb^cKSdD39H8^;M3mN*7G&aC>)R9Fgm;GdXS8%bjf$UTh#1_8.C`,s]!,WmW3ZUO\*Wc)%9''G9$8:>sh1du+JKd39j#UI"-CL(q2-kr`@ni:,elf(8EiW:e9T/DMs&X\dTgalYB*_MdK%re>g)m]POkQU/G;`a$KcZ.5@i>gc%D4+qpNX,4mhsF`Wm&RS=YSJ5/VYu5*P``BQ2%OKB3$TJp3cKI)-QH*Qc+C:k'c%QZ7hp?ND<;qOf<#cim"p65X(g1O5sVj4e#D[b%Wh[pEX\Dj+4!>#f2a7E9LRqGS/_t'-R.JRL=hf+-%*umZ9Tl(tm`fB=)#uT3B4"#/`>E*L^rbdNQ2)N4Q,*h$Ccq-\O[q:&Y/+Hr%a7@#tgmPliMlH2'WP7(fG2AY]+:#qcgI0;5[XmK,;r42-An0^0VAo\Jn[5`*F"(=sBImb$;cLfC3+]258mNDqg,Oi4^:kB]jeceM%\nZ"CL#ZXG^DIHXmIc=7^*;jrNYFFXJqtlh,&CDc^$#lkPI?24JQ6\1;<M#K%HP;7"*\;_kCOJF_O?A&hLTt>;Yss9_rFFDIU7@'%!MJEg0W*_`n_`%LVS3h7*g!U"r!>XK\38a9G=_BXHj)@pp8;khbFSpsJJtMLg7NQF!M-Y=/enZu1WH"8X9t11HKA>Fd$XGc:m'`/%b@2GXeO3m0dj?FF:<bk;EFH[geY<0A6s'^6PnbNPUTUP8GrO8#%0^ZR*?B0nV:nCMKk_QL$*%jl-E/nF`\_O;/c(0(2[=h9kV;cF%kMk*0C8L@>5FXnWZEP)Pi-Y-`>/s5E*9hh`;/_WE"OX11^lIr:IMfM!C='lB?^#:GR`]MeM_l>j2umCU8XaiV(?V!HH\+ULh8u:O%Kc*i?cBd@91:Dq3L+l5_Q)d"*"PG3/J7mLm64;5%jFSMn%%mWic'LC.TT-6^brX-Sr.p.[6ukY?I\*\)0/)A566BAjplN+t4add8%*mZu^mAJkWH[6XRA]3$X4#r\>XoqhQlcB[liPc,\//S-BA>WL%?ZR%*lC6rt,HeU4Tu^KZh)*.m;q.Q2;]#Y:PK_]MfUk_=kDRQY%_F,C3bZWIBb*B,q\O$%oRRqMtH@C+1mM<ZJcX72^[J(+!`<q2Y)1*ea$U=)?mNiRk:1i$Fp9MF1%]&p\Pu-C6*cjPUc_JB`pnFoP%L;6PnM6GRLh<S:ROUj[D,:2Y%h_V6on=E3(_NR5.k["SP;X_ff7a)K/>IUZMfDB&/2pRASP$bcgAc=db6>P6DH!9F[e_a'c_XiTB%!0S/oO28jFHoq9Y>kTdU\PW4e,[1d":GE;SmG?"E:Af>=h-r<hkKSKtXg;!Xc(5,[2o3g*-LYXUq>SO/I^hH<53mCH,PZ*m."512%0kQl3Zt&+bj>/go\E`1qmL)f]%(r^Jeb\M`Uu.M!]D@7P/=\l9B<p!hB+d2=5)[?+Ds,#?/@,%[ZXWZl%ZHRX!jPt>>!)en`B=+O%,>7]m_gJ6hqNno[pP+:ugc/?(i"eFVh3n1PlM.V$9LK\i?S5^]j)ch:qZru=HETo;F8V'6VPe=YTJZ+%L0aAm5Os"saJX,tjPrUj%BKl'g'`EK.?&5jdVh-Gg,!mhCI.2][TILF1eN(5%d.]e/84h]:O2VI/SduT$0ehaX\HJZ(6j;$'@ZW$D%*g.YO6<LKhTsFOl:H\;%!:Mf^Q*>d2\LWAaGEi0^H[ZJUof5teFl`r^`9K[=EP_/ur(f9+./X2T?]iKLZ/,,DjS2LA/l?[S27'df>cmKq+9#l$hie.t43'KC%>*t^2I.*oaU&todmO<K5'Rh*-q;Di+3W#8T#=AF5:BLfu5@^tqhFtm)YQ%?Ig"WOA+r#F<$Kd>lBIs%RpQtL@?/X_9rJMVZk2YjQ%=^u`AD-SYolV5iJQJdDN&Po,o##tnsF.6Mtgr5VOHbb$+/ddj4Q=5m]Ucq^D!D%u1(s'r7+8W_"EgH&o\Ke?>>^S2*LeFBm,bM6>%V/5IT7M:mlbg/HVmoLg*V,E9h`cq!9_LuUU_6<8?IDL7kpZ90cqb](E%1B23!X3h?5mpUEp7R(NJ5T*:6.:jBq8%8p&Nf;:n$B88%k#("@[IX)Y"8f#r$jA^!UFo,sqN\_2SS_X+!l2[K'89]aH"9;pW_(\j4ib9edM*RV.<3u*P-_4r^=r?U-q%F05e?S*Ek'YCJQ?p.%KOQ)CbOM:\#@qejFSR)9O;9%4F+<Ujfph'Bdt_)7nbmP25Z@dlJ9`k/]4$BA;!^&ds7Pa[YJ$Rjpd"Kk>>&>^b>[O([Bjdf"cEme%A_D_="I8]c.qAkI:XHn,(-:7FA%(Xi0!t:HZhKI2EVsGh8g0+i%KlciqL!HTV/dgLHmkd_[$S#a0DGH(aV-@o&B:093if"Lr:a&/%Blm.%,^Yl_!?eRQ?[Ejo%%LTU^4=2j*_1;DCAaO&IpV65VhsbQ-<8?H6']b$?j3R.3Vm=;b19W':48!L"$6\o-5j(X4N5!&l=]0<%F`EnC`aY5,0m0mObto/DU^0/13N>F?ZM<2)o6CCbHV/prG(qQC#<DD\^d?Ug9.s>YK=q-A&,>9[eF5QJgG/g=#6UG'T\dXNq"@Y%%<M[cYN("m#<[-KF/<bZ,"@9]k`mq"hOJou@6/iFi5QerVRu&7SU3sL4/sCgZ<Zs$`D*<dkP4_AH.>]t`*brma"nD<:nhpY$2(ubc%CR/KW6LXloaBVEp&M1`qI.?"5:d207B)rcb7i?O<[N2(-"pGCp.`om9KM'd%dk[OPm(i;DT3,E]j?UrT1mkYh:7%Uhi,:A=l)Eem%'FWPH-A#YL(,)g?fd^!$esV455V,CK_JM`3OP)q,)-/Y+.Zt78bn:*nNp0aWhN@:V+LKW08rB,8RarU8n1`:g1t!2J\$Wi+Gm>MP%l@9O;WZil;HjqP*.AR7"&+18/Hs9WiPS_:/-epOY`fuKbhna%eaR:C/W(WrK,*!g@L:D[0Xo&Vc#W;doeFTP[rVY?g6Y.`X4T,KR%oY25`^dr"6@&t>IL!T)JUu:g!_'heG43=upg4rFRk>E..*fleCr:$JH.<\4rVg'U7gkk7#Aj2b/h2]8qRa-GoR!(fK#V?HO^'j<(%eLl8gl56FeD,J?A#ELg+s'FNr'IoC**8-uiX.R(t(2br$&$Z4!fPtLiCU"#hg`^r1NE`C/V_HRaN?%b#_'JY]?L.k8OW5HR6H$O!%c?0>F^;!cNI4OM1?*+_h@jE_o/Ug>dh+/mp9MOL$2DGtZ?e@MG"7X6[f0Zgbp&/)1dKM`Zi2oLVp6hH'R$p99C!XnXNN%cqodLLl%Jka-]B$K-*A#.CHio@7FQMR9=*_H@Ydo?mgYpuAF;#c$i/C6dgSkkX/$C)V"!=4(Dgg0'mT=]0Z09J=i?'XW@!M@HD#SR"k?O7N$%Iq!8[D.$rV)(2[R4"\Jo`mmQP[TNXj%^ZlWVb2cuU]U-Dc1?BQ!D9mW5BoWR5<QePpA`_NmGA[O,Bk6.f3J^f27h^ME*8VOFV9PH%)0_hZ>;_hEUcd;HPd9t%-32mDr6jEuMd%OWF=!`NC;\p6bSkI?-N203kW&V@k"5],>:mD[hnu+t@A*M.d<,F_6u$)!U**#e1&/hL%QueVj5S8/hfpdpLfM,G93AR3?;T6,L![T1@]_dbDicG@2P&VirE@b8/PK7N%eu`9?mV8..j*RBQ8;+.;h:]E0q?*7'b7>YD=Gb))%;^s\/F_Xlu*ZgX`[s_,/=jfn_mR(K-\.t,?18=R"jHA,U(C7hpF`I*]B6SXd/!7Rl@,K7NjW(bP;09%QE,#1,ocoqcX+Z]B%IQ/;%bbDXM0piQ6Y0)@R(Z^+WH3Ei/?uHBAVgC^Cq-;g]V/.L/q3Yb8mfKE/mm):,#/A(eP&nK$Y6?W&Tu*)Ys26\$/hsM<)V7s\<s-[<%p+h$h'TIVs%^S`V=Z,DVXh=i\:j^#XE;#P=/quKI.YM,Zs%rX<lQFoKjV)%j>[ZWY[?m^_q8sOS8^_V1%FBO\F)@>I4OZIKNTZRr%?D0;L"D-Q`*eAV5"]`X1O7?TlR^pjT*!j@-ZcDZNZN#4(QhXO_7<7GX4UlqmVo\7E\1u!mB)K?pqJa1NiWlX1DskNDN*+tpg]=J!%T==nL&smR])&,/pQ_Duc5o0>4c/#5d\iKh_;XEq"?It4n\7R;2(Al(3gJ/.O->1]`I//ZU!;2Z>]SS^XrZ:+P(Qd"Ma-kFGo<`Hs%)8>7-%o;0NS\I)(hDYK;ckgoj4dI&74cshdn:5O#.9sSfrQs6-7ob(^:=Y>[O#Kg0l9ah3oXXGppluf=:P+9NYKr,s)b'L`-S]S$%J4q5KcG!'=hZcV30SnR=M?,sA71O7?YNDtB8*8c@\Pt7a5o1&:r3@f&).,#M#_t6t4>,pi[?Qh>.,uh8csHa"I3jZ?]5-?Q"g^PS%\a27iR\jCJi,G=%cX,M1.R!Q:2r1fE?'VbqLMqk*BZZa[fru<`^!OPM7d4_P._M)p9>:__qiNJSRM6bq^fYXUN?+Dpri)-saZj%o%A4'P6&7)KTD>q3RSXfL%]L)u>'aF#QS3,M>!Q:WA_E^=94F]!]Q;`KW26&^R;C?o5]*_p<cWP^AF:nb/c/!!0l-#KW%)ICD6?bNW%c4ef:&NY9./64N=\N/o"99c9c))7@X6(=Cd`nl&$Ks/F-V"iAFT'H*=p^oXu0^aEQB4p,2I_[\?YUJoPqY@!$%u@g,,bu]6cEftA%Or.bgNGL.cO5.`UiTk@^7V$<b,\kNC69b91&Fu7*IJMro^<@oJUTAI#XT'[>d(!m"WPXgk#$BmFUJ16`5KLe+@LL.$f<H#-T-*_@%OJ:I<h3MM/:CAIK)IH8Akuann`g>SLZY-,0=C<P8$Q,bU"4H^\RX+[CX9dHmrb>F=htKI*jNZ#,E6c9iK0L!GH"lM3;:j\V;['j!%!Mc9ArLS#i]DqCMZb"JFlmUbo$K[>fU(HYs`K]i0h#t%Yr0s22VPEJJEd%Y@YL*aMPg3qqY]H<R\8%!oiN",RaWC+4+Z/\/nbu[3%$a*)k4T8Fu^1Lj,5[Y75e/\8Ag<PnDs12T<oo\AicoHou5V.)`KTi=++iQi>hh=t^h$5Q%K#]Uum_d47!IH/<07/b!EqooV`)EA%%qLDLu<C!)Tb,[Y+hs61j`Nr(m'pX6R[rdW6e*Mui-C(/EPI`0S6/Ys#6?&&j"CLqGP:L7?TunB4'_FF%<!a05+YXAC1$M6-:5drl%'OVE)I0RpdA7P:J!VF3L/N_.)H&]'/c<'";+M>L:U'Aa*!"29E`i7.IVJ=$jpPYHt/&?FE$'_qSbu2c>E!M']P:CaJ`FpDnT)Zru%K/;`<nQ:lFc^?Lk30_(6_"lO('u:nElFc<"Z-3NC8k9>X4Bu-Iq,bpLga>Hr.8ae.)1o@Nql&:p4TEo*i)LX>L@%a@6_uo@#;8C(%nUp2<h1r$Da)J;<b21IEb<k^l[jQMpUQn/'3PHUeVoA'9rsiWr/l=%:n&p#ij0sDC72+dhYK?#XR(!%aW\7o@!F,_b>n!LR#$<F(%MR1?4i78PA%/^B6eOs6O26<;JbX0qfZbrp'Ia"V-JrfQ?ot]kTH3[IF2h+b"I%gWfOC#RF<9"7c-#D#?pWiLAB.,^$iGgV!3OEfQ%Tf%l"^ddnT9^HIibf3;6-!^9V$/V`06_80j(2*U,kleBhhFD$Ms%\Xl$#T6%\$*3*X),F)*tUd@1:Su]m5"2(B%5McW\<X3n'#-p%&8rs)_anG\DZ5tte:GA?(PL!4#^LjKk\ZVm*_gqm+5f9>)Ml]a"8n;2Fg`@8J:8C2V^*$'SAjp]W0N?t_FMrrjE9GcL8/HIa,PC.%rh9/e&<C,XbPCVYh@Z8d*G&,mlpmaI8KB7<`VS2:5:3a5Mj^pG-?)%VG6*R-rcWjXIi3elpM6A6+%ID17_&D]=nnSK$C*+WM#D=2%DIcT*<VtKCXO13G*H"\0IpNs[q4go.oetm[^]#FE"o3Y%PgG\k;6`oSBp*=rAB,J6UnW#N37#O'$>Al.+QP[-X7p3Ti/Q&Y5!j"'%1YM):)bHpoYN<bI\l!d"H('>6=m"4I*j0PTd9-dJn#LB:gVSU*7\OP#_4cl34.Cg,A`;M@MM*$:a#C]bBkOYHCmtXg#;\YU+L/sR%"82aTY9,:1^h5S[CNh<%.@.6ZCnhk`W4Yc^1-\dco#[XRA-ogEq$;_R3OQq+WLGm['1L-fGuBWRIi.FIK$T]e2BKMan4nb3/P&qX%LWGGGEp#t7?4f.q\Sh,L;MNAkK4i717RPV[&JuMaY@m7CfajI`7Z'EJTpV2VM]YaP9jhp,cN_oaq<%)1O(;\!_ODuj_7)Or't_+3%R_/:hL9^")>l`0gp!Mtb0^`9U*[&`U0?):ZI$!A0fauR._iN^ugF+WNr,8E[E=V-N?8/o^d9:o)'`U2?QVMRC??dPU*ts7'^d6Fq%0]l'Q5d5J.mn>B6\/aZRF[J@3gq=^9hF\8!TNumNcA;10io%IY)2<,0)(g"M`MdMh24.aDj&#0;J@-@?GtFZr$Ci?I<)4HS8J^'Q%5Jc^Y_Gq75^$cA/L:>$bl\eZ_P@:pac7X%YpO)P2f`>sS$^-DR6qss&=4@6B5&g+@!5TTlX65\en$]Y?72)dgnN)a3=r.GG*GR-_%h/jNbC7`^H'$]G%8Rh/pk/`(Y15sD35I-:;mLmtC5A=]TST`mp!G/p=S<90smuOPM2p-NM\,Y`#YK"cEI,*%?)6UO[K5/8o7<0eK%)Do[ZUWdI1PYI9%ACSG4j=gV//SAT4kBrq^l0UcDCek9Ofa-mBos$r'&ZiAW%Hj:%HYTfe&lo\CJ6.XmCkHC3D-P22)_#as)arGf%)_s_B_a?bIm?f^Z)mCi74\D+h=k`9pUNSt;[=ZbgZcb#Bit^:q4VM7]3G;^44i`EA6Wn6<Y='u**Z6\0_sQ&6;u]QqZS>a26h`nG%6\aNo"S/m5&#Bb@pA38"n7u\`1\.U17^tS72@Odpf4O':S27YiEe"-s%L=ilX:pFK]L\2not'c&\h-`S\m`mRrJYY6h.<1gDN_\G%qoFQ[e)4cMOA_mjF1g=s3/,8;,5g.Hap/Qtf`YFF^LuQ)@?lGD=2JcTS9<OYHpcdDfQ*I%(/3Ve>,O$@^3?bm-ZFf%oAqp7B@C!l%p@f8nNJF[/b][TJOm2;"mrlGHd_6&Shpn7!p[`-O6=i.DD=3jUf`"7NFLQ"c7rL)?M/"GWRQ&k+VbqO&;(Gcl@rdPb-]H0tF-kbc%.7's[7eE948o*k[?IlI7">;NRbs`]``XO+.gSTCb:43&Id3s(?[[^O-g&BQhm:d++%Ju)`>J1CaAh_66[H"R%nI=iH'4-3nr9cYC%>YsTM]!Kl]pNM,P>dXN_:tnnrkmYAT_qAA3@Pq"N54p;i">#<N_5A($T@q@I#D7^Df^:qH3tQ-8DU9G"iB\OgU7`/B;dQ!rjuShb%#bp't%ah6uD<JG-#9I."T$P4qL<#"eWr!7I]:9X518YB_A"*OH[fY((^/XaBKl]*l_#qs"[X$RALNDba,e7q_"SC@Z%AKcA;:u*G%`oC>u'hTD6)T9H_S*c3pX@cJEXa#9EJRc`:]"EgCfaJlM:N]2fp>uGjWghb-gT.=0YY6(e<5%1N3N/cVc!N<Lb*8qc`8Tdg/WLl2%*6+]K#q5Ne^=#hQ5-oV;=N*qVFA@fYc&l_/VH&0ZKG<(;.C[VIh+bkL`t.*/8EN-O2<M^%$=3n<:7sPrhJ)%0)Lnjq6[[B][W0)@%_IBLE^up.4GMm&X2OXY`!LT$#QRp=_onL`l.S:a<#,\Z`$20)Eb+)4U[Pm5HY@#Z5!!"b3RfVI6<IX'qR)ouY/AXS4qABZG4EMcH%,]Fb0>^S2-pl461G=bh\E2S(N&'igc`\LWj8sDg,j88F+>c^UL:RT#o4oap?Z/p%..,qd]\6X[X.-:$U]HgaumicrJq%\&V<lqp'%Gl:T\KrAdAMOZnX&c/FVn%7Tqbi0NP<u>on\"@@m(MDe+$U8o&4*=@&9RTNu>Q)4P/W/fa:,Y)H\]RkaMfcV%H411f([dtF^:d?s%(ZDnJS7g0[Zp,M!8m'`0]0JR@^BaP6]NK;qK>MF^E<8,.<iNYA`Nqu8+:2@P&[%.`Ti/=T$d/e;@l?BEHD`U:I&hi6hl0$O^lGT"%l&t?H2&u9^@2+_Qi[$5VHhIPjQH%kMkCOK6S+qI2G%Zc@'`3\500d=.83]jeWXcKJXbr>b<_@7>Ua_X3>gRB9(hntYj,TM&?Ua7!%X(W<@i-!*DC%U07p,j.NO`JcDPX,&J%?V\<4l5-]M;A&HN7pl1NQ6VW;Z><SX(SbN83a*%nOleLMR$t3[&$U=F4gja))D!SVp.k*%CEAOs^$OEmgd=V`/9Zp)5(*Wur6AR'5d\8u?4FYikL]M05g%@&7-PpBQm.NMDi^26;H8l7g:$crl@(EQ.WkKcLM%'Y0!arI):C:u%f^/9VB&(teOa#c@SVfm-`RQ@'p3A;thi3^q6DBiJOTI)f?9P8PLhF^u\`\0/GV@qn[e**mS@M.PLUn'qLRTas=#VICjc;S'60?ao%V65WaR+G(U;Z@Y^mf`YZ/E=;G87Q^r>Mn"H/GC\=I1COF8GRRSoRN&>haW3pV(W^dqHAgr+a(:28*/VsCik'F,IDcmf7%^QMDR,(%jg-:)?[Ym:fj>kt:r[ScY(YX]]map7LpZ$M3&=!Lo2`TJ)'O^"T6ng]&"]]/+bPiUa/f'0du,.hIAkRM;l%Z9UbkP3*H$M<<iCd6%Rk[3TiHt?Er6-''ID"e=NK=42%+2Leg#\t8KASZRrO1Z@7XB,;pj"?br.[c"Qf1#Z'TOj4D4T/XVb^nq"fc_>RkdHZS+2?=fgT5&%'^cumBT#(uhLr`8ZKq%8Wa_dkULd#t1`,0:nWe_t")CMMH[OuQ=A;sa.sn2WU;!b%rqd?8kpYNBNARQ_oh?,DANX[F=c5*f/d>Ct%&8=[($F!&*U)J3g*V0=tRTZ_[_REYL,JER^K0&_;ZGN^K,CNoGY;GV=2$7LQo.,=pTT-%B_Bp:\<DS)E;IQCl.Ln+Z'%5iH=PM8E%1Zpqr+f+HnZW]dg+Vrkaj4?`,o3-c;WAOn;,YjDlQ?SYq.C3WW`GB2@%(OuTn^C__f];4-p$Kokq5WgS;3u3PV9)Y3RVjcna$rij%%gYIf4*OSQ:Q6o!\MN>W_?g[DYDLM$q0O_)AO]In@dNg%*7[2PHG@*t`p*+gbkUSK;ci,TZ$9pPFEpot]K0@95HRcN%X0cALosFC%o<"KUHK?l,>5>0E@h0a#Vt$5m=rp8'TE3*5e;;V?U%P>]Bs[bA9Ue.=GouUVa,KGc_Qdk$s*,^tF!bglK<78nGVaepSJ?V!IB:ci%l-2@.Oae.K@_h(#e'E\Q6l;,cPM]MVe;kP5I=ABip[&N@f77B"r`;P"fACKE503HEi+`(F3Bmkj">c)2T5K>Dd;@e9m4[c'g[fK3%AGF[QGh7<3\o'-ZSr2NQld"I$1O!.YHlcUDcK$TrmrB*:FNk)Jg"']mHM8*^T<:AA?GAS`qF"-23!PtHqtujPIp7=_4nkf8b)C8!%N)Vi855@LqM^j5-o#fH5Ai)@iB,3+Ljc"?d$ho^bi55ee=13DaQhT%>K&:<^rg@ta.P9Qd4cNqG[Ij92"K8;4&3^hMj>oKtJEc:H%$;G]j/En[]TKS;DcT=>Ki>iZLF=3fjS)P%?3Nn.4aj/"e*.lY[/2[B.'0Ot4SD91HEM#YBq;0>X*XNo3;l#Y>j)7YRo#G.(1hG!:%.U!;0k77rr-!/S9BrN@A.nEh,>nC]0jl9]sod1n8NO91D-]rHB'9^%QR<o!Ln+?6S71-8hNLMjV=ri6h[*=SmEmN(o8<8E)V9qme%=u:FW5mh4f@.)Ar6eXFe$GGsBPr*>.njlH:6@YeF`nmAG'RLYM[U,QjHBesA?NZulhkZ:B=nQU]]05TJFPinVdI"Kf7QkbA)S$/i%!Sa\XbKm3sSa(g9KAJk2[^a0%&&./!s*';:,BHo5psSOmi:1qdqRE2Sn-t6c_0I=C]I3BOFpcHgk;=p?h7h296BebJgtQW.UIG63%0(RgO\DbK5K#"PtF%Ob#5gO4sp?-l-=Gb!><3qod(Z!"7Y`,Ts/HrG9b-f]*\VemA-$B;[VQQY22u8'ATUBIaPhdf@-j7s=[S/B:%i-VG+"$]T?aL1R`Hq7VgM-B,!dZF[A(C/=mjsQ2@+=O7gJBD7Pk0I(0S!f:#m`@K"62N:u9%Bkg%QE'-o[/+;)"jQUJ*b-Aj*FZ(%"g94tJb($5A*Y]Le=QK<R:X/59(aWHb>uim!;9eQljgK6EEAPsI<g:6lq3Qn<slu=adUWE'2Nm(cC=>eU.Y"5SF8#1q<kIrQHo+b%#H)ms;gcd78H_ZO[AM"'hUibh7Cr9.-n-9@@g85KVijtjW0P?2gSH2ZaL2?4a"&$L?/o3&cCc[WB%pQ@IAT_K:X1H?XdZ+-`A"@M%N]4<@'^Lhu+]Q54C9"B[APCQ&h^N<*Yo.s"cF(R.L'F&JR,V<nXKaI:)J\?'lIWnN>$mieVKD(i(U6Dc-h#'BYGCp3Cm;Y4KI05\%Ekh`Y55]-tQn^"^Fda.`]#2baHIk?\rn>^\CTTseg_Q,H-@Ha_#4[Ju=7k!E/3<-[;0P?&8_]s.6aD:lLi"7RmA"IN<&PrXZbX,3%/gSQ\?PCSL?RGN1\2%r40]t=__Xq-.=\DAJicAClJ@D#BV6..@H:lO+X*Fi3JSC=oW0,&*8S_=_@EIKbZ@>C7eb7j`Z0h_R4"b;\%_=g;UP*@r3(b8U4Cq+QehtOAn8Jt+omIm3P9.(V1f#hLeo4rYkP=oQ's$UFs@V&-f#?]=$/m?`cE8(Q)C#38eQY&r3!Afr8m2N$N%FU-ilf$a!.0s*n!RU]6+9+j'.p[fHR:0bt=<JoOXa""2>c4B/BVDhTe_P&iq@tV(dHgPdU3S;?c6<QMdha8n!A`eE+X)'Lf`iHZ9%4h84EX1XR,inJOprj34*7e/._\5TD%m"Q*Gg6,d@7_qc*Ciklk'Mh4)p65tWfjk9Q&>JnNGN-^k[?h2^kK(H&nehp7\Yg4Ph4,H<%Bdt9DboW%o,[)J.-UZYF_K%^@-:*Va]Y[n,_L._!#ag>eR?HWMDai09#!e;*6KNYK%qGZ*qbFVkn!gcS,'eBLc#SS6VAGPuY@&lP%U%.3c=<I.KpneQH<'VV!M/WP<?`[b.AomO89BqF!HF=uhNm0^h=P?bpdqOk"97kBFm_PtbBehluQT>;*G)X.=fpHo#N\4W%(#1?,%@MMN9Ie&=Q25^BM>(hPl8]!a/VFe%POR/7t^WVeQI@(.fnCe=i5g+(.#[OPAb<(A9-<F/r0m[rO9k"`Y)g&Kn&YjD`LsiOUM-nO\%@nbR-YdD>c@N]:Q)SdB"G`>ae$+m0n1h^0/\2B]&]$_>,/$3Bs_em;ZQMM_LGJ#0hA:G$:A%j:taV37pDI1^#K<05K[adX1]K:YX%<:j\Y%W\/RF.oLV]lM_<1jdVlZSi`_Ya4p=DU@.[!6cqnMf-2^NA9##6HAq!BB%*$m_lOQLD4)2qd\?RcK>XMpMYR_4k6\-c<BP@%Opm<=hWkh/p`@kkH#6R2DS-;XMqHDn/7[9$<X=Z<f-][C*QtPXPZ?4K(.0.J`jZhGFs=I#2<pViK!Voj+t.C+Qp"lA[t1mI\4=d;%%=i.o#e(^?2=#m.7'9>Y;bC/8W"fNDNiX1=Fq2/M>0Rh2bh)X6S;=(t9i_npVo*@.5?BD)hnYsD\$p$_&JC`U#I%m"Oaa^l^'AQV%b^@f.*\2*1+@0DZrgm"/9G-P[qs&XZaJ/'pqp"L[RSiDQ_:d_?2%R%eMVtj8Qd.?cJ(]c'nSspc[VdrCG".nFTJ]At`]f:>>=t]9%^]ZXaf59fY]CE_WSu\aodttI1-$dk.7RgF8^i*jt!O-F"/CJrF1]';lIeSJ$RD1l!SAW%LK*&M%"RK9YNH"NMgfDptF-A>K]sg6L%.#+>OqTA\)39HZ>lB3*h-6Q]#7fBF._OqUTd#NjAqtTn(+as5VA)Vkm4ugI60RtTqD"D<GJD$>SRZ<)jR0<T!GK_?DHDl>!s![TN%I7VP#'RSWU^Xk`5`koDYYt$&=h?]"V]b-:,dEm1jPV#T+kaL1;1t7M=E(bFP*=F/ECO9E3g5Z;?s(!r%Wad?cGtQnI@Hn4#\irfc%UDd/WXgF*j^raFtO4&c\/)+S7ba(TLn8n]0kbb;1V6/9gD!JI`PLs'-cA8'.lFGI1.8U0b+'X[F9s"9Tm<!Z;N0P)MZ46KT%8:2_%@HlHe=>Gj`Rgr,_KuG=^AETEWI/d?aQem[d2O"Tn`,e^!la`/6/T5n7l;p3W&H/obl4!m)Zn9383G'Y1Cpl*lm7A_JRdISM^eA!l%HoPT?q%cL(gn?4>7)T:,<afDEj\eQY.0cS/%!Y^\!C$'j(@V2nbSC'TWPcriW[ebo[>Zm)*:C`*crk#.X^qq.QpYMW6&0*Vqrc=/%B@'dm$Z;.qB:V>dbnf(tLX%r5cJ^r\%\7_HSM",ck8ZPK$p'1@0KF7+)0BP9`rU5EXQuSHVZZ#,=_H*D;7M$pkc?T(,_'WO%\7c1%Z?_2XgrS6Yg]MJd$'b8AMBoN!Ds^NZZuPuUj0b"&7<j6-m]<O]DV,P95LKr7<82"<\bR.Nc""K:Cb%]OBA'BT2"THq"q0&hU1i0R%/:[ouDBJFW2eUFhDdRaQ^=[&/DD>c[8`lG%)o>tu,d!ug_<C*K8TXTAc#\tCCX(_-m1QA+fF!4QheY*i8+A9KF*R/P@5?5R9s\rt%Q!H<fPMNT-+h%gfb2^[Z&S!iSc$7o25>0^tm'bAD&?W>CN3QL:-)[UZV]cV9P0JNtr@NS7[pXbICFPo^Yn;)!EeDS+Rl7<qoOPYS%JXH'j1hRZ.Ff8]:A@bcuWKbG92hc8Cgg2[<b9m-AIHYKgi%VAV-L$eS&r:^8Yo:U+'Dmcp^sHBkdlakdV6rCi9cfr"d06uQg%@t7%4,h9E=)-+)4>e_(]XT^?ahj<$MSK=gbkJn'?"^5<&gs1B^i,@U2mkhbi-:/B^5Y--k/*e5iK\rDVh^BcFlgM'1M%M5g/2EWNkK:s%[;<f:o;.PN)_"ps>rebkr5Q[_ND@[h6KaEs3.Vp22^U4NWbr`a[)eT_>734eWkgF7Hu.1)@tSqX02?=W@N9P<HY]<\MohR4)%fR1%q<2oB&24R:E7RA$?IbW*i<bo%[porNYDejpH-B4B2XC?SG*jp;lGVPD)8s&mS(M02\Wj4W4Aej8Z0+V4mu'qClUP9!b)4.U6^G8H%Ei.0)S$9lc<(ZeJ//.(QXH%QqPYhtXjGs>)gigRNMEb^qVkr"J\lu#bGoRcZZHFWo.ZRO4j:"+S,-WLPcBKS[4u,fEgF=CW5n^fc%-t\`QB.kI8Bm7.JUc8aFoOiAQcrUT\7#!irbW!c1lpPA:kfV<P]@=!"6tDN>^(&PGajiQe)=:]3FN(S9dgREUlL#/ZBkZ6kA.5aI%'>M.s&179h/L,DIr4Hkj1+%!iaI#[`m;435!8d4R,h_$,M9K]dd6)^;g:V@ZNjCjO*$Qd#U.JSX(pGgD^eqVa@=gP=Bgt0s[3MuJ%1ph>]p7(,bj3,)EC[8jWoJ,1Q"g`$]9mLm9m:A-0Tj"_5?dCd::*&@G1PIc+&4+E\k(couP&,';*l*0id;<(mAR=[C=a6T\CcpVH%&G^9i5Knkdptkgc]:;*oI6O1k0'G[c_sOj!eTO.3L)m9!b(i>BH#F/IPRhDO,,jc*^g6QjoXggXjhJ^q_\nt+$@s3W+3qkT!=-]$%,Pm,LdWaVs3.nc/ag)D8V!PZXVookiX9H]=Sk.ZL_re\0SNW*N]-MRKrT=+Dp!<utg^1M'Nn)E_gFKoJNc+F#%5j#-L>_Ef@um=b%c^Tpg^i-Yp:!8'SI_W4bqj(u1Y`oAkfW5a+1eO_%raVJ_Fc_Q\gSJD0LL(2Y@'2L:G0EnpMf6p'Um()VEPV#FW8[@G+K#5b3*'d-%Dt](Hm%K.Z'VL,+Soo\ER'3D,T;H22bo-Z4*\k"c1c,ipg1cPNK`PHf$^PXOV6))o6q6J%+YlsQILhg.$@j-L,PCHu!#_d.;=kD;%WU6JHTJ[F1)6!V]??VOR(UJ7aa@9nQVbc&ZUtS$;R[b!0n*<=J@W?)H[[W66M)n4HE(pe*h@1K60<QUt_O9,_K;QLOIr+/**c3-G%8;/kcQc#];m1m+;SI2j^]Q2V'38GH?/b'oSKenZ;*'=t]/3[ZeIKmef4/P8eI^2E%PBMSsFsk/mrNYO<*N0/UcK+K"p"=sU!ltq?%p)rohI$i2GHcY]"M[S6ToR&W-CC/$jlN5<$>Dpmk=DT6AlU\<1&O^`j@!IbW5^3"S3(%\O>sEEsB'ejV.opm,*pT07106&b+6Tct%7U\\Hh"b49lEP<`^T&)&!qjS/lncG0Dl"ANl,a</DaKNTUlPl8-Ucp",+e^?OR..360;XmKH7F_-muVI5<RQ=n<G=(/=k#"5+<k1%4dfoQ_4176M[V[hXgSO6rYStArGIqf[NWP+cC,u3f4pd!KpQNbb]9t9g'g&KZ<Jp'&4j2X@-FV)"fX]=%:5,V2Tr>bHkmTC7m]:R%MNe`'WL=,kGTWQI].&,r-+gRdP2/lXF/5YEitiHpg3nA:gYm;0%-bG/HZ(AEVFZ7Y.i+V+[T?8oJHbU'kr-/=s#abk*h0'Loru0o%CJpf(AC^t'5]X:aW^A.Io/!:g7+GG'a'_0W>OAuY\E-c[_#h&7IG-QQJrL47p/67_Ff0!@F6T%a;;uA<Y0;aFDqIj#^!B'6]cQMe%3MUr^%*qo+lR'.oUMt"(T'`$W3HM^0%HiO_p[qZq,.CufhgmDB1Mrc+]l,h'l>@k]j';bqR;QLbV<0>:h=$E2Y:m4VkN*Y"GI;Vq%h53a3p=XQ"`aQ=!VDFYGW):&lA^_OYdM\YfZVNKM;,#>%?hV^@1WlQK,P,o5ASfhdp,cp9l.D`VXZfQ>SIqf[-\Q<,9kQ;^[l5LL%P>,\s:.'u*#Kio"b,*RhN#Wt0c7$u44W!MtflT]gG'3M)W,+MQF06"?9kT\`VqjF\Lho,I5o]Lr6*og78CF,H]RMi1;?&Z3>IgXi%ZK[>EcYthm?J0GdTJkXU]L+TJ\Slc7Cq?`.[W=@_3[f6=g7bk;G3.A"flT\>/B>T5l&5V8h!0N(dhr1**'B_9BXMAf&,b;;F@Nf_%qUt36flT^JA(m316Y+X`jjND6Qi48TN0p<L/aFP4F>bnb%ZjCtPY5Y/+5d&2^^G'H6k_iArF1Bg/r%UR0pdph#'Y.@974$^/[0G=%kkjY(8@%k?G.Om&d^ua(Vi<XiC4oRFP!2\>dY;7?:BV"t2*o&8le.Z(FcpR/!aE.WD'_tI,iRQ"QT"F!mIJA4,DDD:Z/AR<Y4cTc%\[4.:K=0maQ$,\PfOet4R3P0Uo8E%FaB:=5k"^9KPs(I]qePWD/^0K>ojPJagf\0.fh8-IFXFWkrab8f]0.*T[/q?&2n?oI20X3f%MHAP>pL>+=[(,>F:9ILOlC'dppMHCJ^nssPp7`Ea2JVhak?Q7^#KsH`8D`#lIbhY*#rF6uh)gs9?EpmS"3@CGGLSU7DSpT#S)pt#%mH6]!,2L8P^CFHcL?=sblt3([`pa5d6rl#OrTPW]c4+"!7]tnfeL%-qSakB0B'VT6>qN_,KaR\4;"_`nL8l>92cSVqDQ"!`Rqi\L%b-rPcdC8jJ#_HN3*4Wo"*Ltr?4O#D`_:_ll&JUf'2Tlfk]X%tHgRMA]E<Eg:YuWlZR*_A[l+-I8D?!R##V<aGb/6%0q&qH3f$85D%lnW/6:Z&?cV2b@Y/Y!+1XnhTNW'QjNP,8[EERR)#c)k5pMjs8IG(UqX.h@rNq(OU!ACsBG(F*-#%;jC<4S/%-:?:#&.GedH)St)Z%T@;jBX0j10GAWWET#<36imB32FX"_h/%j7'nuj>pG^_S`VV"kc]l(>Yo.,gh\D'Raf5A+QrSHgVDRd%B`mGfNLWFio":fNPh?NYX%I8eugnrh5b\D+SpL.?TojX&TjBQEDXmP`kp)I/>3D8+uSm]#>fPKH0(];4g4k-J.dM7)`GeqRF3L],0Fp//jaA7/m[Wl]WN5[s-8%Y>KK?[c^n(386p/N6[4ZE"7t3$_bW\SZM!`S)Ka,$V,*:+jP`t9k/M)._je)UZ^?2d8+,j5Rj@ZNb]7$^6p&oUN$BP,Vc\ph-<T7%MJZ$s>0@2X2f0r=`H:,=[.e/`67\[EKrOGb0ssF*gjSpB,u!s<S&D,X.D0Q.!(S-T%J*V\+jNUfgJ)1`jV[-t+e<*KZ/ieA`Y+c$%iNoLnM"Y+jS)]raqDLL9_=5ZpHpYGZ7bEH0Okg`kbVB&:NB7?++Xk7dj=WX?gA[(kM[Php$grN#@qU@I4Bkt7Rk<@#jU"ksXCnRR%=&jUHLsQJHiKMa7qKYrNT\VRrYAk/$G.7o5_K2LA;A:q?1>fUakJH&&4r:36D4L:04Rfl$>4SKQP3sC"k'[)APRlqr_rS1+Mi7#k%Ou6.%2#2*AZgOqu&mk4bmnUE*UeTDeCmjJc/WPKj`"XXH1ide080)Sq%i^o_VFUJsFj42?5p4]iM2@.$?pV^`oG?>':Z'\YPMEnt%YA%a?\GE!1POJRm&;*no'B7:t>oK=&G!0\8?`c*`-B'8UX3^a62&`>_:TOH_Sf,tj&Q8G]\+n5(P:;-`ilu8\"DPNM\\(b"oF<#j%7c\'TRM#YbS!8So>jHguH=s,JUqP>7m^K2JLn(Z'lUf!)PrEYCA]5Bbj0cLk/E=YdUX@A%gLL;V/uQ>#luZi`s-V?hr*%IM.kik*%,j$OI^NN2c)%[QOD7(+u/?oN8YlejFH7bM%XO>*rD+'P%*rQj2)dR)u1WsQB]<,'K$"3Un-[3m/gU'=Hg';CdSn:%Bgi[O2@@Jj<%Rn1tbVLcJ6B"IqH=t#tYPmV1G-f.a./G<dh0Kn`KA$tGK4Bl%&IL["bAK#3%feZ\O7D$a0(,8p5DVRNQN@Vm&5>X8d8+?S[4J6D,%qo?`@M?c,M&bNW]P4b.(>43;2f'aV2*o[`7Qih"\?Ync("TgL;V.D#<VV<rU@:oA;g%J:n]$5CM9SZakC6!*T*,IDJ/=>jn_lF)e%Y-6;.le;9@/#/1HigA9(1?`6Sbm&dJk#3)greTf4]N;BU*4JQdM_@$HR:87?lpH9JJ_I_?k?)SAhDEV^RABNR(XIBaoUH"&hDe*T%g-2>r;?=3!hCt3nGKuJ!.c=Y3Voc:7S3MZ:-4CDnh7139Y_Wb"[+Vi&^c#Nu]+)e=hX=shOj"t/`ZC:QS11\MFQ%B2:t:n<Z2j:S%!:"cMmuSZ(A*PM8WaQ*@A(n2i*'i0R]4V00qp-euOP$8<6Pc>;%`d;7fT'*b3`.W&@BT'O2=$raDUcQDgGK@8dj5biJ87/GVX2su%7Qk4@]L*I-3D%q,M/L!>e$IUTSbKMaV0lM'aL:]:I+m>\ri&QdN1pZ7^Q`[.NGOB[PRl*&4br![l(rc@-#pO9n92=+cR9-Epe1E6%mmfRoV0mITYMA/95#"uW&ln&M9Sg8sg.Df4\^g-[B1'L^r=5"4Fg/3Gp:JpPgGF=fdgj!,%I`trNX?Zb=RC46T2$kY\,,K<2O+2I%5O580ktHKJHi6Wa8@m?tltiV;n+F"5aa;q2B>$*SLg9=iYFgeJXomJFLGQKb_R[haZKJoMekKA`^N-f1rN'r1gZ\nRK7!Qu)e?TK%Fo-Oa%(jXX<:_-uos<LpAo\ZoQ909=O%bau#d80MHi:#N3jd%NJ:%6rDtVlU"=hlIrN)p.-G,q[^=U\Ef9CT^hqn+t*?aP$rk3d3%:f-U&i*JY6"VkK:pKmUj=XVK5A>JX8YFk?:ML;IsmWO>Un+BoB#"RP8-gt!f3B]gBf?`0<3HSc_Y4qc1Y1"dO"J-q,J$5L;L21Wq%lL+ECC%AaaDY73qkA&%arN$kbhoN7p]mc9YeqB36LjT*%=,48pO)L(X4LFkQm@X,\I&l/ufc8$+qH5H`S+!fAmTr+n:EJ]3mshO5%orW[ua\(<p5JuGDbe8JVlco93"M<OVB76i<*r#2AYt;ju5/+]@dnt#U432ht)s>X-:2a7Lf5I.ZpiI9`^O,q1OtAN"qC*:LHf"(d%LmR)&I_0-eD=?VSb1N$SqH:?hDnf\oIuo$U%[$Lsq-H:4H*@,%l_d"QGrPS;p\Ja9kK;^h^YP+4Q!=2DpEPm&8mCI@=l&@UEQZs8%p\L<11!'l,)o[!5f?\c<dooFZa*[d/dc7i3*4):/Pk<\Yb.[9:gMU?.lb.`c_mOZgh`eXWaa<uf-,O(HaLg\C5AS;9=\7E??9db/%=ER$gmp86E>Q#!.Z(:=UZZ:Z%%s*PRrTsA7qq^S9m7I8YI[8Zp>MSOW4ZI9!ij=-;TCq+bGtN%T1;#M-<&k>Ln[Pg;j$S$n'RPu[%7I[f_KQb`mVPuU\DnO]!/aD[>(VJA&hOJ?1hE)lJ?H=fN(P8;:!BC<5:'S?'4,@96R*5Bl>Id'4cZPVW-;NVoeV,D,Mlb)d&FUed%GOguH]T-U!HslJm)4@V\SoR&en6`i"]H"I7QTeJO\;qUmJ+1RDqVuS34dss&T)SIHjDa_`l>J12l;\(WdHAbuV-d"DDViON%s<2)%q5Sr%%EH^kjEgLG.f$`Z<^,I=H&hmZ:25?dYBf%PZP;5<Y=B;['A(X55E!%NPOC<b9==X.8-H*/l/.[r($`M[=qJZ2ABj4c03u2W%h!I(?f&\ZO5[C07U%'O-V;p5<<P#m>(<,6$86gS@4UY'TV?7e*OtnW<^W"!6r8n`;M$p/n;8n;m93_n.NhKM1p'hIoe1W5b1qd!,%?A*,p37"1?eLMd44bB9\n%CH^`\^csDOphm=j0S8)qX+E-",5'gsX_cpr%[II]AsWcc.thX^8U0I+Bss\]!_i+&J+f5rZIl6a>q@%%hOYLYW*7J6S<BR%O;o=E8H5@j]9mr;k?s\:\Rs)>D;Ku'Q;6q9iFP(Oq/?`Nro[5N8]YT\_i09AEb`M&mQfI.l-2p.(d49Ho2j%%feWSQ'1bO;08.9cI4tVLF^.BfATH+J,$&KdWfettHJpf$TFc4K"E4,,OtM2/;\"##fT+=_F/HqEkVkdrSjjm#<UL$i8Gb=Ka7p=X%,9d9J"p=#`CrBX:O2;1(Ctk"6BJMtEU7;bm"<>V/^s?NkrC!PAh>`(Y%"dL?&GnccNBKk05)#<k[6f:iA-SI.W_3J:=%GZ1eFZ[b%i$TW-h&YSXgc8%jC=59,;4)_b3<)kt:rJ"5alU#0i5UOU8scPJD5Ae6.QcFqHKc[0<??i"32Ln`Jn5O.8;Q,!0O\Z^Qh`*5Ikhja%kJOF;^'ijKSN.-Tl*q*5j3%`?(,*<Bjt;TCFnn.QF%;p6j6:IW(B'K5G$eQi1ejYfcU&ap>p$?0Bd8G*1-Rn$Yb_qtYu&/u35pjB%mU@m/qoG:)%k"/Db3>:<L8gZUl=QReCd\NXE>Yno!LA`c02dA`RE2:qgeB^#hXfa;=H;pbe6S4_5JJu,afN(p<ZW>I<C(,BX56BZ%_IHF03i5_;LHaZAQ?/qmE_0aE.!0C&kSoWE_RR]YV5r2YV"RL0f5=1;QpDF<LggptQOJQB&k:P(9PY%`n`\f[l<])@l$H=hmY)fq%N;5U%r@!`:5k3g4%,93-g@@Rj\Srf?Z?4FUDSk<[p-:Jpb%cNEEn1XoPY6RGWN/^'0u#tSVm'pfD@I&8m_3"!p0l6.Sd^09_1rp;%m,f%g&coPk__3\c_(b4s0DP@OJ57C^F5Nc6e5=qXY4Y1AE.X]:5INH:UH403hbN*Wl<!8!?u&SZ2tUNbJ1'k0@^YFO@OZ,p^RE8G%_dEnW6uS5f.N`oT7gD37&SO1PUe+-/@>q`0:e6$?6sTj4ds5Km]PqZL-oX>Y$?Yb^egKf[3qcCqIu^fti2b.Ea;Dh"ZBY!tcFHE2%/HbFZZ*;TOVDf"]GAmp!8Ph0?!tNK+9j$\%HP-?h9$)-sDNn@`=NCM-8p;g7Ed^]?+&S]EpIj`9ghCfQZ2YI=Aau&P.@kYB'k0!f%AZhkRTn')DJ`-I&0NZOp,kpAIjsStE,dXJ3I&A[0ELQDESlsUK5_fBMgprW#%&/*["sOl"+:nNVGUh)jMa51t'6ocoPfi;@S6)SW%:lB(pa=ruT#N.$IEnS@6>kT^<L:>W^C2cGihGdIX5\`+<HR$0NG`2]ESD\Z/ptFuNZ/f#HRl@,j+fr\h,BM//re`r3k\h\I"eXHJ%a]uT2)*#0'LZEnmA%*]I#QSI*6_m6;\J`aE3.fXBCX3R]W>p8*bp#T(:kY3_IRSWN8A1RXq_sc:`g-1/8<c@'\\a"1OpT@j:A,`W%0-gpIVg+0[F.!1LF:0mMU;s1U">6E(!R`bJp0-XNSjOH!E02,7AJY'sg=rk7f-,hS&lRu$%+HRK'22MI^6E2Yj\f7>E4`X!l`%`(%$TS4dqGIsmS?JZkT_oipqJ")'#`"B"5b@N=gF\K1a!>LG9#_u!!'bn8.0,a'@KQ`o.!KkRi#+rHOO)`?6<^"cU&er(FYduQFUqNi%"0(@lfWNIa'DRPDT\_U0d7d#Q'IjF)7ts>1TH2bn"<:maWchV42R`O0m=mD$T3W#J!"qs)IMN,_:'-/,Qq;tK]uGnD+Li!d8])Hs%-6:NWV_hG;^!TU2W$'aE0c_W-I)P@WQ&Z&(Sd_N%OaV>(%aO[1&K`!1gOgQ7h9cMHii#i%"dHoVr3%=A9@PKRIXP*WiJ.o)V`&NR%Kho!douOmF`iN>IHo](/BOo=>A&'A>=?t)`eD\u:.I\DO,-mcNK))QU5U<J=h2Lnr-F1=rC1OCc&u`L4!G:N%M2^-<q!uBeZ[i<8%*MF2JASrB'VT9>e"pHmmPnab!5p0Q-K01?I;'CLXe(Y1oNWt$1HP-_RV=EBgH.\RNE(%,k>[9P.PLVtX@kcL;;eGl(dRoMj?MDm!%;%0&ap&#uZjK>CQUnOX/!^?eOg)*9$K$m%"bRLB#bgHlY<GO%enO90\O#0]<\C$NKGa,J4AtBC.PgOOl3!15g/"@=:_t%S06mshB%E<*F@`jNU$g-T>E[cf*A8dMF0+<OPb8oUgt#.HFqf*M1[Sf\MGBJL]rqh7*TDog!?Y^K.)mNtIg(iW)t$I3>$A-\P.*&W:N%L)D-%=\CaK"Y'`bmRYtq"X%aPV!0Uq`M>>-#[X8h(-*dL:a5<O;FKp3'!gnbQJT,e,+rW)5>E5o?j/[Q%gNsh?\j>Ddi]LFpb"=7&Bbs(%53b<j%M/Kj>5,($W*Hq!`*?L&j.83RZH4i8ZB3cP%LM7"HEKNT7@1EG^;F6&Iu+]Ap!q0gpsQ4Z(hJ>#AX.OJI:T-]nFHl8Mc,0P%j'rl[74]KI;NU5t%o'lM6p?5/Hj?l;mr4Tf8BW`Z8$o?RKATem)i$]ncR(@6rZXXEF\sO$-iqg69)1qlj($<R:l17<"JMHAd>8PA%)Z<'D>NF>/W#Q87_8o+,'SjXR"P6RDRr8+P.Ak%.cKfpNM1ILX?oXZD;c5=IZ.R(dCG;60E`_rYTn3psGjp"3O&<`'b*bT[21SY.%dF=8BPDD%5Y),@l0dleR)PGa&M)`mU$EffR8NWF&m7gP*c$A7N(KaM;2lX`[dRhps04"M>]crW5SqjP-,Jf.q>2^qgUHiB6XB;iR%\:?NXi@A2u*6s;D8ca,a%&9SrKr%I.%:;\b!@7cc_L-#G!3_m9r[7)h;mC#'j1)TTcHpquc:)6gaSfl/(N7:O?oW95*G:C'p6);B%e)!b0qu'"a?d$<f]:/Ai94uZjak$'MQgna_hjsH::3;"WoJ<@<e,rUp98e"qfr?+EQ,6Us1b'U)T=528e8q)2I>WU[5.5hK=8[Ts%\cV+nb2p6\8[sB06h'=2/*mVEP''jqqPiB[;:c5:*LX$TZ+2h5k?n#+9.KQ_b[QVaePi*7p_95dV9_6Vi;D^e;b8OgnT*nL/BhG1%LSFS;6D4K`d:*t3/CmmHWsR6D9\^cj])^=e[,C,h'n#d)!ob;o>i&<S#e'1/I[mr8=geN<IJVpn%EE0aBR9F8$?X/l(n>OYbH,A]%C4DY.UHqh@T+B2`8c*&hL?%cpo4K%CLF_Cu<"$h.U`9K&e?Z.YPbE9:!#X'8^K.t.Z3@(U!D]PT15;&1M1DlMCIPh/$G*5k86s^M%BX(6[O9&J57uZW*R[,%X>!lKCFHn'"M*PE?U0+pd`!j!X<<cPJpIO()M,^nb"u_#?:oZu1UK+n%TOeH1I@Vq*cR&a&"0HJp',#h!%4ohVd-0M"G),ce%<dmV?C=P#<";![I^s@?7#-_h2d=XZU0Nau$e$(YQSqMO_U=1FR8Ur*_T?6-8D-4Z,AH&\1iVUcIo>5?^*']Gs%,)Kg!T%?(/VVb"B0)@fi7uZ@dgq,pi;M8(/c]e0@oCVB*ruJ/aZ]4>D&SVoBHhDjg8]L'eh'Ze/Bs?l!9(m2$)H8c!/HqA#pXgpJ%-b]?F\+\2OZAq4nZiS0'pVN5)'`T&,;X+mCPIe1YLa%80I*tkJ$p^%jctdWc7i)62ZX3R3I?Hg]W#<"n'sS5Khn2c$J4B]:*gC!*%;Ho`k@q+JPG-_m5%:i$g1J)@<""Xj;1jUq[N2IIqdjo)jCXCXs>s[@:_naKdkfjO%G[Om`B*aub2G#"fAW<n>V+U.4OR.:7?Ie^L%`aB<>_;c=91Z:)afn[W:0@)<J#sOqnGeKU:A6eS$mm@Hr6jK<WcA;t%Q=9-<%>2b&>'j[RcAG[mqZ5)rJ@ldHID?(^Br*=#o8seX%dadu85UO#cq6n*dMKo1t>ZjQ`]rG6V.b^k,(jP+(>"(bf-#h)i(;dJe\#cA;V0ii@iJC(h15u+cN^Ve_>@KCkm's(-E&;o`n=!2Y%XVj\\7a[Ws?SOUaB9/8lUBfV4&KE<hKoZ?K*#<Z>!r8#f]XuL#`@+nR3_EbD9Ga6>m_t;2\5a)>s!Sf5JTuL@AJGbD0<o'pM(Ws2%@K.)"c9gm^fddMV>R7'CNc]P).L"kl6Pu0(03TnF(M+1l/N'%'ZN4MA768onh0MAB9YLt7Wu5T"Cp9?/kK!$<Wu5S"Ir.%FX^sKI%G#gEIcb\j0nJejb<!l/i-nOWj'Ac8,XBof[-KpJ6%hL::("nVk!Yd_X=Q"/qnh7ZeR0hi6L'd(204Q?M/F]8C/@`e$cH$/0DaBUT%kIZFBcpg+/$[[,l;7EnK$.rM:1Q_d32kXFlPE&]$@U[LD$Z*M^VSDE9^HDiSJ:NbGTRO/H&^md_gXDf:)s>t"ND\EgCo#Vl\'8MQ%p7VMb/Q)BP'l=D1=9LA]&bOc'DCaNQqAo!P60rMuJjC%]FsS>g77n':Rt8r5TEc(;d@G+9cKeJrs4\@!=qH#e'a11ePS0YH('JK,%Q)\F=h:I9eA.\[DWa:UY;C/NG(\+R!i&qZ0h'Ek0]mq[PZYELYNn(t(5c,YjHcgUZ9ZYk()BZ49+Jr@:,1O?O+KUU@]j!:[X_<eT%)/):>S$fBBSR7"`4eb597p-9$7W3G!&_ScaR,IZpkXK)p?_LrG7M;sa,$X^EA&l,GL.c0fe.J+Bm)l/b"uP]Le,RVn7n_5d9=m>+%cX-8`Zk'i5)e796cp%*qCcU(Eh4T2[mFaaf%5qlAH@%QUa_Mj&&%t,1MHf@(B\V:5/^L8Qp/,ULB%u/2D&]5.VJM#lh3S#cD9@Tk%%J$soIr81Cl@!AN[f&qR9JpE,?DU,l*<0EZ8rZlF1lQo4?DU,ld.m/B`N'&4ZjPPBS+3Mts.gZJ%Q@W\C)*X0EWO;@G(Ys(J%;#c%$IMnW58[.rm6?$H5s+W:..BIr)+ur'-LPE=;=Ge;9<0(g(Y*ZV5%bU(6s>_S\1A'#bMd9k(B6@XYit>_g:SsrP>5Al"mV[>]mq$$%"_rZ[5.G@X!Yi'_PVW^HHhuL%Eqi_ogT?*kn;eQR6jn8=#Q2(5?[b8fhbMIBm<j>[S3?Z4]n<2\0ZW[&-Q<N$>_7,o:_=eIH!$;=%);8647>Z6t'ufC(',JMgL-l.7GT7O<@WA56(VE.k.6<@E`-IAc_?,I('<iSpO#!YaVmr['J6tofCn.HAKP<'):oI5!pb3_dnOmU/%8$b=X6a9l)(.;:0A)cKF%Mluld0+beVDo?g@Sto-/d<eX!ffo-6pWq/74%NS,1&pteOd\-:lkr-iok?Ok+l@O16r/s+?sI'K..l@%Ugk)D$<Y(g%`(fV'.eG5'_,E0'u^aO6ikL#\,\BF*X;)SG[b[.G#6,sUcnlLI$@)h//(In@k@UR,qtPX35m9\0GlF2Lr(?r@1oLK%__MK4a2`0A-?ppl;??2@gl"Q@Nf1m`9POSCMt,4g\0r,Q7qp2X-qg7c(rsX85I5_G(.<_V9B=&P%eUB#;4'3t*C]oHLXJg20JQ%+%-SC7-SkEHL7&.8Bin,ZF_Do^h"dh>R;PcDg?>bK$ESTq$:SA+hS7Z?[O>Vl(-$c5[8@h*r8HkomFWFg!J()e5HMc35n4p15q=J?r%cSWTC).X9ZnL0=FPUKs"#bHflK(-aY(lo%;9O'#s6ipu?Bsg\N(%D].^'4qS"@oC5;8BID$'&6n<'2MFOc+b$3(^oQB.@dkOrV8#%Q;5LI<E+R7>'U@ia+d(c8eaP/(^_lfJEBJ2W("KU8?X2HMW2aVV#h&QOe?/U;&/[>F=-OHb]F#m>(D]Yf=Iun75*+TbS%94MQiQ`%d"IP@$;`P+.+(1u5n*\QZ2Da5EEVL:.+f"YG[rm)"$M\H-'Or'dh%MXnG=2.!-#.N/%pOm!$*e%\l9M%V>Ab.H)I2:WL5J7*jj''%<5_-#/="$.<#!spBJMOiF(t_AJQr>BS`4Up=>!>nP/%X+T`>hCQ[n%'&e%Wm%`]EPKH_52r)AOr25mVg$6.UDX(d`mgSg$=Mke'W%nqs5=:e<JZk7pRD^Nln$^eiCf+:;Zj'X.QP,_HK2$.MOG/:j$%QGhcr^nH=]Fi"3?i`.-k"]7<M$9E^]`8W<skVTYD/GU28!&b0"%6s32*bOJ\eBSd]_!d!#P,f$@9i:(.LAeI]fW@5p["=,$hV[6U9"K$HJ6R!?NU(!qC&W@D<b@k4?1Jp^[OjqD/i1%Nn8BE.J;=%%#%-=V:O2aS1:"pK+#kR$0(!/F#BSR:]rZ-p*<!urNmW?)<#+OI;#n,R\qCn[RQ.SA'-[2(7MGVmuk4O7aM(^aDJV$IKHT[d%:8LslI%F9O:=C7HbcoWtS2LON=Thm-N3$d].\InO8t*XZ9Ua,pH0"!%Fq5n5$A-nb=@pal]1qm:+3a9"73PMjMNnc1ul+^7_B7NFkSQ3Im]%!ALb#Y[#-naC12m'E"^V@T4NZU]Ek4;?mc-#hsV.Xs/9LC/np^qGa.gRNTAB1f=NO'Z^B4;A9X3_%9WF^Qj5lY%9bZeJ%"*e>+?,%FD>aoHO*30eD_SfoDh@_dcFDYPZ`^?8g)t3YP;E#>d_p!AU<1=_fg\R%Yqs\#GNPGcs:BUA_dQXpfe-Ej=Tq^YA=3SgfsAI^.rHn%HlCp*oZo@.clt0Tf9W]1:bn1VlgFiY0aYYBPpc>dO$VJAP98/_)LZ`HFK&\cF;"pD3^dJ:+<=refZ0B2*Fhch:caT@K,jJ7NBreq%QIaXHW&hf<dN4tZ[_9Z6X\CW`5h%cFZuM`mWH%^BYQ\$erZ@%G!0DQi"?>MK4&#\ZC]X`-E_FLKlZ>Jq?8W&74$\D`0\'lG!H=N?%+)NE6'C0c-a6/$Ho*Yb%fk7^^S[Yp/;q\UZ[[dSt3^S%s.$%PP2g^'tW?L64fm8U:VQ5=:Ae._,l5nJr#<61r]UQ%U*B)?!ofd1o%-$QZrjDL8+h9@!+2h8W34_2/UR(8]G(Ai"C!<#6nI5`*1mUcdRh(1U4V&<AggMaWjGZn"Mj7L*YSQ!5D4K`>Sh,NS4Fr&Hm-+C2h%aEA>L=@0QhXk6)ZhT[*PDD_uJ2[a$GDe,%<5ZDoEB.J0(HffMF!(@%XH5$EAqcVe$L)B/6D%>8Z'B%WuJ:'Ed&SYBlZOlC=SThF(%jD6u'ZP@A:Odk#TgKrG3hoZuII@7ARMu2!bn!8L4b_N1s"s[^-[L?)([QV0dj]Nj5=TGa3pT<fZ4T!9%(,MmqC0t=Wr.>)O\(erp%;0a6sPbNo%0Kjn1c,S@nD#pl?jOWiIaM$cZ:I]4SO-Q`\YV#1C?,thF;[D@MU;?t(:!JbJ<</Cc;,rD?lfR=ML"]&YjrNM,oB);+%<QY5K^bg1!WMp2%9c\=c<dN;qWM=m@WM9jkR<LCl-f@X65\Jc_8o_#ShV0B\o,1b_D2bBh6Y(E.LCjMT-Jef=iVY<\42*c;@GWhW%2K%CkU4Hg2rUMl!aF6-6=t9F*WXcrFrRfGe2[b04[<&YSJ=#=qmMJSBkbH/oA>]WnHdOf8l?95aIJ,3\J7CT("Pp;k/VUaVODkfI%fIIg@@'@U?WnlBJ@O%P8[tk$!X[MpaXiI:OA<$[OTDfls\nf_hTKHgi74=MXi+cKm20fNKUs45K2lGH7RHt,SFTM/0n:A`Y;A-gZ%5)Jj.q\d[TYH*Q4GDrlXr":@AY'M+2EcpQGE6Wk)qYVKbb!,h&[YcL-l25rK`FJ!946oihW9--Pm'?h.9noXKk:5<B(=(=rB!"%>%FWiPQe'Gu2!+;F9T)a;_0BTs+o:d9&"O/t8Xu3nO1E`04*s#@-RiamUgLGW,WttofVTc-j.H`r<Juj[*7HF_rN,kn,[]QQQgH0=e%Y-l/a(b4eL!)e0h$'amNAh!mH-QKGZam08T%d!cc<`cVFE<$Dgbh0q6SY`-\'An"'#J0*SkVMFk7?29fYUNL+MPMjO86'9KNOe1o%k7m;RY1M-;#1OU:C]JOB,YWaSidbLm8;MF5k^#1_DW6[UnR)k!l_85@J4gCqN9^UOVKa()NBrZKpb[H-1dt6D\Xicq1iQb]Uj>&p%AA-[hd[TWTe+EcUNKLB1NbsaR7U.STR-Q&kE4lgWY*Yf^Y*Z*?>qaSdpUp\@c5/sgqZ:0UFKO==LI5eY\bkJf1t3o:hA7<siNfWs%+@>fc#6X+:+ioATO9gUIMf>t:PKdh1h&kL#+P31L]Xq_s1^UBX*Dk$*Jo%YQh3\[Y29d=\*_djI5^_[!%(Zb`,]Y:\;'IoTS8M"E%X#fE?81l8e82n8'q>2FH^q;>hK:GnUa(Mf7?'"N*FA'Bj!T1/GhE"oe<gnP\D$P1H62)`Ah;^pe^'F#WVQ#T>^MgX,ah<%OId=P>%G_P\0J^>N)3&MABq]9]>bN3X@NC-c']%55^I>S$Tp5OK;ql$HlC/Y?tODas8@UGB]m;N]-!!'tsP-$\]knF$8'VOjo]+$1hGAkJ:%4h14!joNcqcF0%8.48W/=o>%qN(q'<T_5tjR\^W^&p*7Rd8NN_4Ib!"-UN/n9tIMe5\h:L?&G9@CTFN1?H]pUqifiZYi3Z&+Ou_^%BNn37+Z&B`A#Q$\Coe_a5!-Zq\&k;h>Bc.AFd8JG-!E0]9NS?rA@sq6=2V83SHnoD"NV7CH^&"t?H';?0*SN5oeVJ7R\A@W.gAV0%"pC/?Os*\8!61QZ''3",l,[:F;lE4eGKl-,.JrPfBG+]&18%U/"K<jY\utBh(i6>uUNNO[UBC%OG;8;.i$pLTH0/Ha&'hu&d?UEJ%E*mfV,R/co4aM35:.bKuK(?SH.*h#h:j'&J7,1ATH?"JP7ns'H_[7@-iX^i,#F_2A8cX6gV0!@VmPmVpL*2bd'D=`MFm$9>p>rgS%*r%,>`LoeQNuNjj<55#dNdTls9ahhp'S!dA,[,Z:%\KPDrrXH2,\.><cWr\a]A2EiM6j&BjfrA#[--JMIIHm&lTb`m+VFoDau#mZ%9_FiQ%N@p^2[eUfphtPdb_,-IIfOf1@*\d,cR)OqJ+!4FLtY=[[VbloS(;XMr8*LC*V7e1Ogf1@%Iq^<DZ275R:RHaL60IX1!Vi)%i4W2b'(`Pq`2:,1o<YD[GB`qZgrrEfqoAFS7AF]@4/f?ai0Qd"TMsNH95/9Ufgg]?a`Kk&5sa!;)"e*^%s%-`#;/8FH6T1j=HEq.%gB1'^'4gJ`\X1eUHI^.4GJ;H'BTCOVMAlT>YgY9`,>77e[]soN0S$Mg!cn/lW2TY2osfE0VqT8lpESk#NWQU!kH[fhg4opE&M=sp%+b4%:JUPUNZO[odqbW)^6e+@'@%1''%o6\17k5O7J;Wc=eNa6[c8[c^d"AHuU2D)CVt`41@W`%j5h2V7[h'(G9=.oZ#LHbQ>CQmf%7c/#**qo:j$N4S((XObP!(^]3\V1;=A!6YCR`m$u$ZX&O=2briZ+s#?&?!k,Zk*7pn&m:N0[F!pC*<Y_o2N116eZ5t!c#;d<!s:'%eRM`>&S'=dM+I#2'+k[kNQ:eJ*$>o7h.In$SIQeY!X3^ip`Td5]'0cXINro^<>/KuLK2Qd)#=9SCq7W[h!Gp+C]JXakbf!X3qKpG%:*B[2mDY0#)?;YH09k(;XCpiS=)U"cHCQEWH!L)rBE4pD!_W,SOK,LWlfp"#:A#@hbB5&@5bDa<M6I)bfE98p#V`[?nm_Uii3U&+%!K`-hjn6!Kf-^_P14M.MPj>,D#QWJ*S3jlJ[]c37YF^<qG##:R)0TY'fLqplaDh^*Hq,YeS/JVd\_<H72_S],c>GI'C$LPXmbnDT%YPf:E36-Jg3>#hCcgWUL(Co,j^7."(2aUc@E>!,\+\9gNGU7`fU@)VXV-(p$GA3)QJS=bEG%.;37!cBp*[*O"eUL;`3CqKk0.EB]%A_`jhFQ(7SB\pI=aR/Y'P]9I'?rG7dk7e0LK9&-m#fbsd`VYF1:9ec2<X,0p/0)Ok:mQ/0P][o/0a5]g6OE^Yi]qrbkf4BNKUH+l%9Hh/Ja.",K!"]B#*`K/>iM^il!=5`!S4Wc`o2-8F9V,-%UfB9HrKIAF$u8))?pN!d!*jU93Q4'u^+pY2W^-gm@@e+'lbG6+=4%:q%)1uL8'LuD'E8X*%7b"aIjDV3-b+HM5<#h!G5/%2N#_o@R?t^:O18'10V/^V[?u.ot<NF`iTU.tIVKmROQR.5;!EIAtLPiU1[aQs%%]X7b%=WYtkNM%e6K`E2-dbbWG_S8*(hBj]Y858rC5g0Xg[*8iSX&6'XNY,mCg$X`S6d1YjE2V#U^e'mn<;tp+<7&A@>0pU0p0P]Q%jUenl+KaW'Mrf2J5bUYqa>^^EoTGm9l[$YB!9M$1!aL`i*WDCRGGjIt]Bh<b#&qTJn"Oh-Zp".S`-QR8qY1DT!p(VmFC<O"4d[rG%&ir8?RAK"=nZfK'%T*<7dK[RX5o#q7<!P>mC?mL5p-B)PbdGbX_J+jAQ;Ona\^s2jM(".=BZe+?B$jcQ=`d/p9DEXWL0_:dUhmu=%UF`!n"8&pirV/L`B\;,p3NjDf^BD,dDA[n-W9F`Ci,FKsc]E+f#mVE_EoR(H.Xa)P`[Nc2!n>22#r)'77/U[gHXVT6T3=2Ds.)6Y%BguW\%O@%^0B`AbcE>>'!1`fb\9HL&O!P1ah4WUnm1oi+]G)j)$?R8o<.MDkNW[pN4rW-s[n?f,OBfPpcQoSe(a.EJRYKZ"39jW0%i$@fnTg^kG)C@TuEm/uDd%3qQj5Qgd"OlgP';s\XTGC91'oT9R&(jKuNidi2Y#;iOln$7k_?Ua^3>1;@N#o7.ROEmnNdCNA]D.t+%qU3W?kT+f#'KF=1NXU4_FLKn`89rrcA18]fY)n'Z95(;4?;Cj);*e8G'cR(T<?(En%5d9;crh7<qukuIScF1s:-Dh'VLXKV!,^]3%'bQ5.Kc>5Do!8GjU7^7g56-O;<&tN"113X"/J2#$;<=J[NdV5BYVq#'8um^I]ob(kZKhQ\=;<*UR_XaA5dZD_pj2OFr-B1=1[eic%B##*l5aNN$^RiePP;NUS?.VWu3+/K]dW<Jt%LM<22?kGB[.YkD:P4.E*pu-(RbGSjTWL73C>U0I/3tc<"5j5I$F\nYJAcba1IiKq%/QJ?,q,%lN?;f%RM:E.M.j<&`,F\2.MHR%:,*>Etj*PWRpB$_f0t_U>A`+E-.TV05m5i;7b6p:3/[Dck'"fjr!R0;FfJaF1Nf+%Z%lF*7`)`mPZ9a6ITXZk=[@bW<nVesKF1Y[kF8[Y[*<%MnA`X7P7FEtVb%tWAf`ZM:o^GMZ,#>kuE"EGf%9S)rJX5<2`&]k"ZRC@MM%$+4!P)<0P3@GT2=9s`e8B?p4<%8B3bo.t0&c3=>t2S=1ukOWF0JuC'M?G?VhY'^5<R9q]V))*'B;!J%89(*NL5>!>XW/,c5eUpKZ%g0=?*jMT@&?<(ZX!nQ.r>=]Eu+dnK]=N;7Y*^fN-S3aL]V9hA=MbjuFg.6oRi0-<t2/5!0!DQ^Q&/sm3_khHU;$1pli?@XL^=Qkf%=;0R71bm%2eJ0!kb0BAA3(3V!+B:s-2`-HESI4V0N024bRpES&iHHF7Z,H-Ihn.Wfj]V;nV[,pR&J_AZ9u1#P,hS"'iThZ>MCnBG%_#ck%F:oq9"R?W(N?R\A&^F-Tjik.lhL+E72'N1]O="HY&D8Cd1>%el(C%N"#.Zd?4X!Z_'!785$:VLERr]JaGHOeg1uaV'pHbFf%iE,JI%92c\;@JB68s$@/kltA*DIP+9?Orn:5/57G39>.dZj?.Ek7Hl>Jh@Lm(UDFYX-blQbbmt$=a!4e^09\MeY:'&!igCb+J&Q9%WHab9=N^`Le8*5`i,-tkA]-H2;-IG[?ZTptpoTZS[''M[D&CF0#!h9%-=YhWVLD'Loc3(%>QHm[T[/^pV.j4@D[4Lm)s#E%@$@T^%/6fC2'A?HUUK?#o/@5KI:ZDK*E5L!D,H0:p8:9Ns,!i^'eTp$QK+*?FD.t_u*N3<,,SDm"47<o[>g#KFLThal1N2P5r?iJS!.$#a%T5n4u9mae*hRu7%YKm9pHNiL^7T]Yq(/-`PBulgmA3QVc8QfM]o3]0pJ,!W5oLi]g8S8&jS:#D^^qFI[!4^8OjaBGE8hKC[OO.am%$gN7U>7\J8@+umA8^(D"E_+@M],Y_:7sg5\5(e='aDgUcJJJaWaSX>H1$6(#qZ,ioRF5s(n@U@RZTT"*8!M]hAQ>DDp&Mm+h59TF%!:DQrpHqaVPg*)K4q<k$pjB@eDS9+AmY?#V4em/_,.7>A+rp>_85g%pLFJr=[i![!PY:J"3Wpt<9!m"=rEa-J_RLWBU12A00<=n=%7=b8=:!"UE$%l(N7Y#$_Z$HPig'.fC\F`TRqnFub!mSYIe]akXGbC)7n,2MP&%dJq;c=1R3ld=585;/+CmFV]G[pTnkH@;5dLuLO%+h=uIWt#-O[c"1r"#VP>#l^Knm6m5k"50+X`=S7Qgc9B[\W6mYV2j&dD[`213\AX#hN-6i<RRW:n[VSmXeLN*:2\U/.T#u,(_XRr%!-@Yqp7b2`PMDF:kP(A.Ha:@\g:M#0\%9;VEBhV5[W(ej-KG]1,6#TO/3N="L'@AB\Q`uuFOW)O8nBA?5e5H",XW0Z=>\&!Pl97#%O7F=%95'+`.2T*`#8hfNRtC_\iXX?IB1Rce'2A_)FjgU<c#-.L!ZYK@=n3e*#3Zh$r>YsMT>RATdN:aBY_A_0<-7Jo8q)flPA.a%%pN$=<CS[R)5]=">"$lW11ULk"(Zm,n99&Wb!+Z5"T0pbtZ(L'4C6^s7cga1+@el$KUn;/4b;@nsEU'M$\qqe/nl1:/_oh'$847hF%TWg)<[&?C$1MQk5i3ppdr<qgmqsg(22`)*Kk2U^Tdf8K(q`haJY%)0r(tl%o0lhRemAhG(@bP'g%YVIMZmlJP@''5Ki;'`u2)qtR%T1V>c)1`52)73Lhm`0u@8t_-49im(f`!"H^'Fhk,iB+IOma6^@(>]j7D$p=P]&o/!drjM^@?ESO1j7U1.(>[(g]4MJn:f1]Dkn%b%!:bYt1?':+k5_ZQB-l7^$$dfNoj+4NppXRB,277u##)Y^Fu@R-l2(D8=%Cn*ApW]%<.5-!TdSOFWnA"PF#%,*_'.Np1F*V:J9`)V%$3=Plc\I2!ep0K-m=6If2*NOgg/VWIb@TFl#F(+9+]7;df1/rmSHEqVoCM.\S6^b?o/"S(OG!qE?$S]G.q_D!iH1iarHZB_1._F#%*kk]@R+h?RdL&[r9+72Aj:KWNJlKfc1HXYOY`&cK;;ObQ#<FMr4A=4-,(BpI?su7:@A$L`nah-d+`44kcDFe,gsl/LM(]7=]iZ"W%+ldR6AKU&ln?>MQ]3n%5P?'E!W]/cGgCTC%S.&lc=0[l'2A]*<aA<lbW*L0u1Gg)Xbq@T#/Vg,,kU$6-+eSO=NTa[XcKoY]\8KP:%kJ2kk7um9?ahlKj/Rb=/h7mr#dKN4(-'j8f+:T73_GlmR3i]<a#Y__S;V<,'C$oP7il`7+OBPHDh/2#1f!H3t?QJp'T[DKsUH^2G%B28cZB^m%Qh*1?dkJ!b0$!^tTE2kQi=4*.R+MEDW_8W<lTZ'e[+@#,?BOf;k!'rLFCf;dt:c`6=WB5lq/&VfZTUrkg$")4-7[026%RLLs#+Y.*Q''8+9<!8=HfLUg?E$7Wtd0TLFW;%o#[<oe:'AnA@N4#CZ2'>eU=U$/;TlIC(ni1OQE7sLbdU9\@&@bR>q"Vj=e:%KG%8*AGY&2$rdmIn@1'BguW)W9ED=@BfpT;EH\T>OX:o:)SW+[`OA>I`(/dG[9>Z6"eu*dC;H0L3'Yg1N4-=dr\'/3$%WN\AAKr"p%m%7>-XJo992r+[0I#PTQQf_m9iW2OuEufp&*PV#1K1jl]$Q8m0-/r4pZ7=nr@\"t^8/oH[+\/I_*RqMJ'nTA;f`D2I#t$eFCVXBo+L%>_IsCbXtTqD7rZ\SDK^/KK5#43H)A,fP[a*kjp$Nj$VOEqkhidC50\)h3VCLG,B+P.@%R&n:j)2/HUnujpQ^MQn\M\APa*)5c(kY%3$KKSUP2ChCGaG^>r5,)1$;@sL?rC3!4pk\^Mgeg'3kbrmHE"-lN9EfO^7o<d'0SFXk0u%Y28ZhpVh<`Z]5I[pCG#R=DtaK_05K@%;Pq99m:iD1=1`?R\Z8_OkbQB=L]u/(bP2&MS<OZ*LA#n'\!o"e4:ofn/N8.`^s3/&f*ak1p%0/p(.slnnf$tj[Kq/<!C^gb:`=)?%A6m*UQ;\IS%&]FW&(=+#U@(JC)?[3GCNCD4jLHb$ZQ2<@`ftilH7(9j1%Z@tH&^_BpP!;QEa@Q_K^IAW:'X7X'\*Dd8SG7m!oTN3%LUAjE@;Q<>=PEq@1RTA%0l'p;`3i#A,HNJY:o92mGr3Zfblpc@O)<6d%ol=c#I8JJTLD]j!5sQ]FcQP2C1G?WblbiZ`.UQG>^7_;%Gh\ic%R>D*L[qidh.+7NYsGbf0dJ96dESA"<TaXK#3H2P:,isDFLhuJ=2'>s1\lPD[%M3H_Q5gWP9I]r9SSMt1E?V4QfPH`\D@Jf%QYpZqYfoiaEMc_.hF=aZV*Qbg#0*o6!j&B9Oh3s`FEh7Z^+ja%B$`8'DdO.9]A&S^Y?ZU=7hZ&P-%reICVN5ZCqX:t2r$Ybn70kd%%!87V^kY,1JQiTo]bJ$`MRt-*3!$#V,O_*9\8BAD3Y'hi&OmU&h+Cd!GMpBqW^)r*6-?J:;_:3aH@I:K-Qn\(Ht2ABk&Cbs+=,^(%k;f(%!Cg'M>.F[VH8Y(!1-Xa"0gBaL*2(RQ"E7NBa6-=nV%MGBepY*e.FRB"g+drcMJ-dGF[3ItQU5G5aY1WcFJlt'7kd"%f-L<p%.1>^QMNe8m0&41<^O&R(I4dh(ESpW*80X51#iu7R&gB`0Gq<bWq(AQM/9oqcXS:bUh-fI[?/:rLD"7/N#iDJPI@=FJd-`rDVnP=Q%5Huh9]skeI5pH*iaVfcEQV*kn:4>-2q+tFL8O^bb0$%StqBX=i&MKrn`'SVjRB?6hY-.#ncT!t4Z!q)/-L6WilLjtjYM+fA,_DL&%R]TZEL>YXUfq^!t>4R.+p+iCar#94&]S#\j?8i)eh3a%LE,s93h=jm[_RuA&eFWtrjG%*Z8UOc1)Fca:?U?*!X[*";YH8?%YaGB7%!"q)J_TVoQm#l!$Lp-uTrX<9/Q]Po1,Fl[).d'B2:#oGbh;HVD*CSP2:k-TmhPr;:hTCp_3ZX>j,7m>q%04Hf&2aL([1d<5JOXo[%;a<nC_4M1i[%fdOVXfXL3\$O4IXE2Y?dXZ'd.D]V5@='^W^B9%LBDie7GPfmg+D=ngDjGJDB#0I\%MO+HJ5ng;),k%dZ5)78J@m$%!O*UbWHoK%N,4qSJ/R%#R/f0JI+Bj_-O;*XOq-\B!jUME!'8pq1KElW+^^eQ9!I^g0*M's="J5pdc39%.kgV-H3.E8I\[PF+sC_W%eG>t)Fc@h[<Xau;@9*e29V.leb_'d7;YQ6uj5N^AC24kkLjnV./;/hW(-mA.Z)u,R*Vb`>'s$Ln?A`Q!-i2?o,e4hDX3V#)c-nt?%X#GW0$P?gt;d">.?Nfok`S0]Eic[lkH[rZKC*^U&RmSaiKM3FV3$i1%Z_07[_l\]e\,,(D/)ts(9d#2g;c[7F\K*0Z:\!lQ;@)_t%,Tj(!kt"Psi#HaX/\K[K&h=LndTM9p#XH[he%@6ADM[[iR[8OS5m#hRVMa1JJD%A#`up][6-@:lm(AA$;aR<P-9r1Tmd_'tfhlXX%"@RbJL`eXj",]hjh<:]c9Y@WPAB^O<=D+fJQHCLsApOIOE]O9lA4e7<4PFib4SD#^T81^YL)j1"ghagM3u0Db`Krp!n-gCb'eijG%[m]XsX+ifM85ibGqK0%$!DG9-km-aOO9X$m#u?AkrZ[p?*^+IZ4n`dQ95+pk!0BTEdT=&_q4K5e5feUK0]JT5'>BjrE"egl@X[%#%1n.Wh1fE/k_3tHL78JB@oI))4%KLuM)r?VjabG;/B3pb<h0a2MKahB#1g\jgQht%J@D]d/pO3JVmrjiMZtge;k\UUVRfrMnFGM7F%6/$g`)[u;;M6HT>:$oKk!4mDT3P\h2WY")Le037C"BdC:E;%a1Vd]>F*PO`?fA\BV_tD/ZKM\KO=f"c`cH8cXCkO:oR\,JW\m9!j%YODsT=ZT/6JImZ(/<Y[FF\4T<CK7]3XMl_']4dG$+k,,cI29tJ5Ba)P7RNmbbBKdkAStd?f".gjP,nm!0@\#p96*^la%Sm!R`3j9%A?"hKm0$n:(rX9aaI$ds;[c\e$ZG;Z((5'7Xk<Dbg?iV3*<DP-n.+1u=j5Xiigf^2[:f=ME>(Y+&#E(l5eRdUJ/lP<:QYYO.2(]*%7=s$e8;,Nk8<pe_0jEio770VuM5WsA`ef*Lm/RYmb(ni3n,["(DR[>+S"F+R=@qfii3IN^A5/0.g'NP]]Q02.l2'\kM$f(%/q>O)%o0G>:T;_t(9bWWC1dTd=PGgUG)Xq^SbuP:HZZ2\b9K$e<:taW\DrZaGhUIM7^8])uPMB!Fc#%^1:`W$grs[fh-bVDU:k>HbbAZGn%A+3%G(\3G'plL1,c/!C9S#,pHPDTHAP=*_9UQY"mlV]h[8klfJ%9%"/?`S,O^l?iB"UDm7l@K,f"GcJ;7FU-"Q.QOE'7@iJTX?9:%R,uj*Ch&*T"-:_W'Wj)>g"s2%]tG07ER:SG5IS2\'etLk/jVP7\qRQ1'Z;"-hE?>/%@)pS@Pi.G4_N5k7sRibQO*);lOZcqJh6l2%dZ"Rs<R\TLT)\]P+$mbj?KdMC?QPd>YD+;TG6"hk%aVSe&5MlZ-&$*g+M"9-Q[kO)6G'p]nS@H^V.Tn;D2$e7hd;I8]ok<SZQV+p%$ShuP%T`Xi:!4g_gU55JE@<cPCmR:FESE6Y14O]n#%<)2+$+4X*?T%0(o49qD"A,;ct!?*-Z(F:TUYdp]l@_GTcZig=m.He,V^XF%ma*#sG`_2#OCWg5ca:s"mhda4pYN+JbAkUt:`oT252N_6!)+6Pl(RPn#cI'@LS=6Z7IGl/i!n]!Q&s5l966G"ajYddZ-`0,&s%bG%G!^8#k"Smn$,lHkLo4<@2SG&g:)'b!kLWNdNTV,-i(`Os!Ak#/2erD@IC7<<?A+DU4c"O6oU:2B8>H4-T[&4V-$>'E&>[o!G.lZS%lLiOkjO;u`g"+c+Zg.qmb3]a50Hjr5&Pc2*jXe6EYsp91Un,,iT8>1/_@D5%%H9Z3di5OXSWg#`=QFFlhtpofi1<>2"96F)=n!.2%kdWM:P^F2ENWAl'!);`"b._#@<WOUEMf;p0IMggi2"G,^;!b,M>SQf<G>Se$RPl/08&:8q.fbKT'Vf>`)NC`t"aiILImC_1q.Fl"%&S/deZsc1fKfGuk!g"M5>Q0-PM=n1=H[*c(Wi<Fo3>I+R['0OTSF"DCZaG&@2QGTT8fu$a5l$.ujFS^+`IK;m%kko3otaAn;S7MS%ja0D:2F*i3-'6okc-D>.LBIWAJK,ls.mpUq!3!Hp8GUu'Q_r/Q_5=&CFM3s)T,h=jSgJmdl$F_t2)7ItQ@a&a0s@*:-JjgPm4g@t%Sg!B3/'eclE!!32#kFNY5g^#g*$+^pM*KGj",T5IP3Z<Ag&18[Q0h^4n#IV-HkS4@:CU@d0d('2c]bi3_cJtihX*qdr_eQ=3s!?q%K/<Y"D%9E9$.>\3iFo5m:/.:Fm$ae.T]\hm@41AkO)]qg:_=D4\=T6jH0(-6kKR(Uee8XeC,UB?_!Ld;<JCYWno,0I$_ZBZDn@?]%AJQGbF$+7^5\6(c2Dn/Pgf5b0<s3MjI#Enf'GfU<b:k)LG1EK<Z_jKZpN*i=jG+`d[60@Y^5pUa*)=?WKG<6Q-7L9P;Dc6>8#r0A%BMBc&i8)K#S/jmTJJdFh1(+ILCn9*gL5#j3Bl7E<]uhX@nQAesR!3:Q2]k%;n3FY5$=I(D%1</DhE6]'GTV!60js.lk6A.:>2=(B%9fntaEG*H,=e\b7][d./"p3&GrYcgbb9M9'X)bDdAA-ddTH[I5[;dk1YpB_>^%Va,Cq]1`KW@t7PQ8<Xm$Rs8CHOUAoo]`52S+7F%L%@)`BidF0d#eDuI#kas%5bi\Y8g_V)?He-#KPD#$/EIYMtdgH$de%b,eOC*Jc!jhXkPf(BBXtlD\E%aOJdd2+;7BaAThAEGIh^@%3*daE=+O!EDp_UF=?K1\3@?\!'7cnAF[./njc6r?8k7<nnn/R>%`11(5elf!Tbm\THQ%n2HT`O_6jWj35lm?t*WeTnI>.eAq'\gJ%*I9/f7()hn6"\nEKX&d?8uHCiC.0h1FM3aY6N]2r&F=tBUYf0<0e<lg7I2Ilg61+k5L-\$1GQ[(n\(kBE7lY1+^ne+_:N=nAge\4%CY6.eMX%%+[;WQXKU#W9,VKlr1&KMeo7q6jL'o^G48Gfm]4]+2*NV[rMG%M-pZ37%2-G>mU5$'1"=X_KE%oBa-f-I=P@`T'9aAS.%h5cM?i;f;M\N47qHp&YAL(^ADC?7;EhY>"1P:MYuK\>`d"UVDQ-u3BbC-@)l+JMm:D/lBX[Z]k"*:F0Bd_n9Dea2B`f#oBQ7oCOa%#iC64F#GLCJOFQX+R"t.D9uqd4=Ped[;gCj3^21b:V]3B&GtW^Yn`uK&u85)8T*Lh.It!&\#qI@_FqcKii?!!3f/hI!B+Bg,2!R(%9K'I*"L"8)k<'m?h<#'<cU:3ZY1hU1/rOgA!Z"B'nijWEh>,Dj@h9_]n1VmMXUk(CoFa^CJ3"r@f<XM;p>W1b4=B.32^,ZSjJ5qS%h,u>P+-3i2GnEA@-:l+,^!K,S6gqOiQn97.Mn+0kTRV\e4JnTZQa.b[j?ute:,Jd.'pF`G^+7Gp`^AO@`s1n*a2B@@VeAEk:^7P!%V.f@e'0[q2ddbH`0WlW:LI9'kGt6B!Eh;;cQgu[PSc4\rj,2;6@pVoAIa_[kS.KIbF+k1CVFL`$iE[6%nFl'5:B<>KRTl6*Gt=q\%]=o7B)5*+"^>.@ZWkOda<#iuJ!qOnF'lWPfTAg9>RW-k9Xg>(Y)UL&ZUPN`$(-s#B28Pu\Oe52K\ZmI-/=Rc4G4qMB>\oI@'.Yu?%3']>]'Wl@)dGD>r]q*!)Y'VKhgM9q=A4:Om1*k<VJ-815r'Qq5[<U7<>asY3Mo<Yo27fSg<i-#M!,U3jPgbpAR9i23-_OJ1ZPGR+%n!b[Vm_AAY%R?cYjOo0T!@0V0N7SO_!nm^k.WR9"P(mslC2IKM"#mhUrd'#<4&42qbJV^QZS%mpS=#Im-93k>`1#@>/SL([MVs`U%+.m7HT.QU3Y'4"5apEn?0larl%=ele8pn#%/C%&N8fZ:S04+qeOqci!nb'%sUB](aG3K$R%daY)/4.^d8id>;8\0W*FD-_OG>lrk%Os&o^bhHs6Nm"<bhRiG@7s;RiZ<;6ZbH8`kZWrc4a_&(AXD:P@4\p.<.jm)&eHHsic74QZquaG5N<<^V)"T`t&Ae=PGlV+Q!LVGI%Rofgg`,^Y\(-t!dS8_.7Y<8]u&n,n:f%Jg[[+JKth8]>d*LZt\GA-[#/;JI\7F-p-Z%tpKN?QR/\WStg/7`'-5Vaj2ql2iD_X2u0%deU4!=YZ]/<4:oB&JACo.Q]!rZL`rPG1A`q.6FmRGN&/"@N$Kt'4A*RLkaO7'"4j\+>h/e!^9<04niG+MsJQ;+.n<Q)$4qo?<-PW%huQOkpuZYudO2#9!0<*D!'HOcCpC'8ba*./H1[Lok./rlIc4$,aTu/W3uo0d+Yu6-W69YBaWh7_WK1KYO?$/+4JZUB6Co-#UW7CG%07=_.S.>+sm';JY2)2H;`qkOujmh8hjG\R:rb>5gk#YJ:D'[a#AQRT>+l>*2Drbq`QY<=H,kfg`>JfKP^dHm(-'s7s\LQ;p>Rp3E%^+%ZWCBPO.P/uI,kltI2ZXtYC@(kNmS-36lkZ+1(O<&=V7d+Q(,./)ZVR.Wq0^\BLADf.!,pI.oP;D"`mETDfXf7m-8Smns`2!C+%H\SjtfI*uhC3nE$6fJ<UirEh']GC0S4oe0/eF;7\;5ka^a`(*.>k)R?4.+a>*CYrBe61is\86>XP"=NI8;2q4p1]h4!]I"PbInfE%CWgTO<pV33WEo2>d:<Rm4F?B)Af4N@]1^nK,:FKIKkYd1ej:'jH@*i>T/68@$']E!IT-r7A8NLk,(]<.5.XraPT\WRfF,?Q8_FKY%9-aD]^8UJVD4p/'V1B:&*HQ#<Hf)okWZu^pEl*hWlnFi485Xc-ko%*OI1mGo)]C=YWAO%:]5s3j2a`Qu-"Hb/oh@7h,Ithp<U5FC%#m@2$AKU`@K"-fIo!HQJb\JjI>8PQ%k!OJQ4V.?#<m_[T7r=&tY#&bc#s>`Z,MY8Y]on_*E6GCgeo:'\*`9I)6bIT+JJt/.Hkt8u%&NqVIPED=eTX9"^P1:X>n)PGk?usSZLk^GGnaK0RRXI@`47f^@#R=a\76kQh0]YNa9%^P"<1]"9ZoJp/5Sq!"&-j\'k(K?6^`8D8%U31naQ$d]T;%j8a-:/YhY,c>=EGf77a2tlKboYZ#c^JHB:Vm7%nIlIjO<EYl'+S/ijWq^G:YW/\]=eapT-;WkUpocVji(?mf"DU"%Y8lUoAp"F#8#H/tnVmmL_`H<c&u,ImTj7\LqmlOjf@0)4$)En6j/W9<`=d8!BW<cgZ51/"1VPuXEHoi2UtfmsOB,#?hlj'o+1HqB%,l<]g?P4D,qZ1Q*Gl?'W$=\\n:hh@&$c08U>p?#HP[Aan&fZUD$29V./MU+*&R6s]iA-LRqbK^(TME*,9sA!nm'us[Xb!pA7J5]I%N&=`uPa:ri*Be#<+%Yfh5S8sfe;LTiILooNr`@q]1+CD$D.*'5j.U"8#;kh=!rn7UQP)>gil`jn*nMleX([n&1^k!q'>S@o0Z^#d%cGQ=\#KegD[3\nI/Q>Uh*`oa6VK1l5n)U^;OT;bE+oUF7Dn\'#](p!e^?g(a-s-:E]Hm-hXig^m-jn%t9;CHhA(6[M-":I49I>3u%O0I`%_pofnYM5@n<$eMX8S*$FSat8d#W"(0YR&L\/c2c69K+6ua<5$o(H^'R6ti[4#h?AJ(h!#iMg<mY8(79B`b!1dFn"WK1]_jR%Q<o#ZES,G%/5&eVBh2hVBj(-N$^CU%KKi9b9Bh?oG4Ge;D!4J!dkVd"VI_G5D+iihR]p[6!]'M=g6O?#1G(tCBj*jCp!3ND%"_5l%nb;!5=Y]Gq5`)f[I3YMCkJGMG:0CLZ<;>2%'5/EoX@Otf%*A>P@*idqJ6F!%F'nXV3NX%>ZAle8\8+.I<Q0J?bQ6hBb`FC"5r_iB%=&,49Rn0""]+LZ\7tWJrAm5kf(9XmS*me0c9S9ZWO31?Sdo2:=!mLhUi@<?l![*LDVb;QiX`P7Lp+Rc*!5OUDP]qQNgP4gb-11bZ%Qn=+u^?eZnkn7CZ#q/:S6R(S6m)'qqcd<D#bgGIaLp*t#HPp)j>!0^^$nH(:1*SN)\6eNq()Mq_@aA3MV1<PjOJDl1?OAr$:h-@1%lEYZ^!5'6\RD\jnKV5nOq:=qfqQ*Q^1]?#L&g6JR,^4A5WWWW)`%J:C63`1AG9JAh*'lVBP->CeX?=KB&pDi]WB>.IN?A8u75L)-%+*.baTdN4]N?i<\c,tZ'1]5\;T5!hQ`)_9h.Cee7a@1s0kI-*VQga;-p]hpC7VVY4%@f'TV8Co3h0bYUh(t;<#1+Vd!'A&cQ=E/%%G+MK+`8_FT-i-54V@usH-i2=V44+QA%t7[$GDECl9?c/lME5YKOO26Vh\U8tgUFY^N%:\IT^n%FITF^j\rgEo4op`99?;h.O@YK>%Wt_ORQf:DHh#1=V-Q]#BfHUBU@uhJ2koW_s3/1sM"C[o_;0bpHBOX`HkXKr#_r`em"PAAPa<qrp1?"%nc5`k>-X;H]-X;Hf54a>5%1QKY%p@^].l#^>D]qS/s4(>=]"ltM'23.oFjT/jIh?-<T1E\X5K8Q/\;,`qPF6MY%q&A)k9B5sbqjNM(G6FJnlKqI7SH1J&n^1A`%A`ikUe9Xj\*>"h7$YpbY)os%!#+AdIGOtbU[Sp/k*NedAKPc_Z<j`L_H9]Jnh*$88oq@g.hZFuj3ogMCll+t(ep5c/(-J%+PIjrO%lIs&SKLq@.%n)RpQiS9[E<ADWQ3P"?#rf<MJJ>N<eUA$SQiS9a9ESVXPuomPpdkrN*H5qLP1/,lFs%J74:o1&lM;4V9@#3>IUPJn%pcq`*0dKp,Z,Gc7<':@LU1?iD=ajj]?i,dfEY5##)VJL,\Fss!Zkl$.A;kD>+g3ql=#;Ur=*2;DMf(R]##':S^YF8c8F:5&\h9!g%(H::(XY5"JRL0<l$M(M*a?s9"2uttr"%r8@jR5[M"5>k_S'ak+.Jb(go;BNXZ[Pn*XsE3Di9YH>"qO"d]c'an%?%6-lpLqslpN5\%1[er&-,9]q1!C&N7W\\Wf6)hD@*F.NRoNh#i0V,b:X8ri872QL@u&ln$.b/IIpV.YYc09bZG<>$Z]q*,oHl(s!aK1EOi.N'c8sqB%]iRrQo/;fRL1V^Sceu:5'UZMN[o_89^Ug7n94r`>e3nnqM-/[hY,gmc?eiSsn"+P5RjN=#c]In1Eo.2m;<8@GO<EYl'+S/ijWq]\%&P"+`Xqs@p1BbcnSV?(j#N2kY5!\!pfiLZ,^1%+c'*k^H4AI-Qf(ZHoFtnLUq$Y8R+T9QD0OLQO1iYEk9m#r&m\3@Q'Cg+oj+oW?%89eY%3tu+f<542cmOKWCL*`E\Db5!7JVsOkHE*&35R%r6Oea=K(o>!'OhW@ATPIGFi6bV[]JW!og\]j*O0:cSU$7;Jlh$)Xh`:cd%/U'egFSgc/SbCH,jiZu@9-HC6[a0[S1:bYcADg@lM]eYV%*=/J_E)8-EhDT@#32F.!AB#Dj-B[q7a=@NgH9[*V`>nUbCc`hf;LZA%q3GmCA(q-"F5TeI4U;^/MY^UZ?[;q^H"p"2=h\nQjX/%;?Ll`@c7CKpGVg[X-a*$rF9iK/`"Xkfh7[HO$NRl$Dc@@*MA!5',aE'0%>DI6bB+na?Dg`0NB?ej5h`7k[Gk>"0R%I,"AoKZEAi\^=E"B?A!-EZ.Pm"%l%U!S19!n>p:[%.VSK6j"p*2Xa[QNc9*<9;@oZ.Mm%)7=p(G9Dmsc6GE%1ibsEm-$BSA-Y@^TRL@*L3GXnL_Dl7b;J:p:<I.U33X&];EDaQ*?^?uN>"B=ldfFbM4OW8:\Eee:4U_5B6Nb!%ac66:94iAjha3Tp>Ilg7'LA:&Dn@m0=N/]FaTdomb**]Geu]l7,2:]OR?u;TRV1N5!Ktt?!%L>kCcLtu7$#pZX.diV-!^S"=?-M:%[gf7q:dHQ9!2]jqVCO`YSU[3HUQ:N/E2?30GgVcO1%S5UrE)Oe@_iEVF43qMpXY[IYg8[T"N8kT+nLg!O\d$(%k3jJDc-%C,3D5L%0sMOFdRbWZ9-4J,l`E:rRi:]=!EHT9bXE_;AFVL;L]DYN;p[#,mJ85I\4D,YpQi]e!^KNbeH7!Y*/dQOM`a!sBE"Wr$#7I7HmB"0%,98N]M%J'&cU\qIeatB7g+me_j=a3F>>dH!F?tB9]?51KcPaZBCHXh9^D*\iKHrf9kpCcX]&"_I[_N!^R[o+K;:!D&('%;Qq'qV(%]kVh?<n8)u_?$SmOAM;H&'2@[0=l"eQ%qNlM*G?La3/nc/gh@I5Sh<_$=A<mYmU'W#CoJ-dnJ^:>TC\o+0"`5Otg>OT78'm^Vof_%eG(dcC1E5Vk(uBunc9G/'h%0,.$DK8;#,(28aL8nI'!:5,l'0[O5Gc@j=4N2o&Z]d=8AK`K4,(jcS]r46GM>&%57h*:'9h`fROAY%#:)YlDM#*RXJe5djGb^8(E9:*DYi]<:V,0<Cbh(lNJ)NmS/K^GXZ-RG4)b,k_'gPuqj+L3I4rA42h1V#J,8>Xq=1*VgOK.1K)O;2%B#9HZ:N"EMOrem`@0Q-i_J\pHXl]boimsH3&H/I3hK4Moo'bn@(QjrpQ-R]%=6bf1h\nKq?X&r^4(8Z'n%F"-f)PO=#Ofuu7gS6O%*HK(;I)A3Jf<oc.k/qGg-00H8oUO2>KI9EG^/f!flr<nug[#'US5gC=NA(^eaCd0Q0dQd$D5X1+S%e-C1=@(4?@1d4'SDO.332Ff%'809p6/f5-3bJ_5gTuSd-nCLS*3f_#pYNPqla]A3.Vk1LhI:+qoI8E0Lb[Ud@WI8s6W2;]Q]sG_-0=6QPTeE[UC`E4l\4tIA&-S.%'q!X#F.gCiJcVUIMIQ)'&a-TPn%pjV.BKZ6KDus+"C"Z!>F>\J,:4u=hM(W=5><Z`eA.8E3NX8-4YSEpf#u.610@C)fRG[l`RZTH%?@rta<VR)0=#^467h#rQ':aS3n_"-gK@qoM('_^Y0q(u58cu:uq=cu!l"UCLXdE5I/Y?2&/MBW'*:P:7!H6t%+*[p#^L@Hd&jsmA%7bOgO^tKM+]OtP>p<6%#s2'PbZc:2)3sWE2:;D5MedLnKC(5*K,MmC3Yq`q$:'Y775,P7D%3PVL2gg5P07<c/iph&h-::+<(kp<U%DuDrYE+KD)#,sQNT#6B'p_;fkQg5)6VVX!PoS.d4HGSj$hS:_D<C3nIC=Z_`\Ws,q8#umf]smI`IdRi*bM!ZiZ8RKJ]N6O77pK<E%'ba&9)rc`uq(KD6:;P+Va)M'G[DF=[/)U3>IA9Brr:W_Eo'f65A^#\D!lG__AdSrFB[)d/Pt>Nc$^[8[n8_LeJ@E?$GT5OdJY(h*%=rbl&M&FB"lAoW8E4u`+ZkBR6,,a3Rh;.9lO@q`$^.Ap_[TlAF*$lTlU/6rgD;\F<-09hsI9-@;D;n_G(3Mun!Z;:0F9L\K,\=$J%`HcXh8jNG>3e%qjTR^9K#^TDYor-9\VZZKr@12-D&@ieB#g/LJ[js;7/<pPO7BBcZ)3KXY:$75^)S?p.\jjI0#mBLSifdpm04ur'%YG)^fI,9PJP7a(N>U4/8fM`hQ7K;ml0OXo(!M2)mp.GsD'3I7?GMQJD.*KmZ6`=jYB\SJX[-`=NjNo=S`31@L"dt(Y_0$1SDjGg]%)Nk2W&8f&,N4rGs?N0`<&+HOlmullf=G4cghJu_l/:"%n)Cc\a*(^nX,2I7-hHd0=3Ri%5mj86].#+9W6+JAhZY8\[+M!\d[bBq6%YI)1-bo7b?RYGMD*2gOm!!Y4$\AI/+^#9f<ZC]Ebn;ZQ7O;2?;*\ppC2Cb2f#UFb_LiuKAHH3\<ck?k^6DKX6O;i@"$W*.*V+-Ti%-=TJC`.Wq7S>H\<CJ>[*A1_U[$c'M-AaJamP$'[lLB%[ap;'hXDbDTtLbQ?+h'<84:V^7!Z&-e1`9"C$8<0d`2l.)lhN%u3GXZ-L%%8URfASRVV5Mnt,?JM%V%bn:8mjd?IOKEf]-Q[X#@]s-`9'5@:^"(,anl\+.^$"k*:EWK_nHk@s/0a=iX&MV<@Yk,8-A(R,7@(an%F`GQeb%MpfHHG`u2p#'I9U5ClPVjut=OCkC9$@9N`6SFbPpe[<d#3GU9&1Pua]#.iUE=Ydq3+`H'O9"k@W^<)aaL[aJ,m)'emu0e%pVOMfjs<')jUWojEeNgN8C"r1Z;pDa8_Tn[m26O5OY"Qofq[s8:2s@?LiHG=96_.Oe?,"63pM2MJ,hnM]@pG"rbbu0jNEFdTUd*A%F$S<=96Q*a5uG*CMY#\0Sd;K^V+?^_UEe'.-g>+13^])$Ud;O_P^^`u&UC=KQ(T#V&8!'9ZCd(HgOlAH/LkmLoVM;>K,4b((U\as%nBOaK2N-M+HnU#-k%BoQE(Fqk[u`*+,VOPX%g#mQVET'q.=$$OO\DhL)lt\U`a7DG[$II#%r^[A&HH`uaNbMr0?l$l?qo688"/^g%H,g*TlY:Qd]F$m"/C@K?hqHX31DL.O7jt8d8c+W^jD:]m.-"Go:h7_D'"B@u@>9<8UKD/gnnAc_A+T0_n-`?YjmeX!$6Zddolr+^%I"4=3D>*n>>jC,82-rV2`DeGt@UE#N>tZ+<53pWn==u8g#j@l>]HsMagYl_&;B2.\l>T"%?c1s:99_X`__PsN&G#$_`Jk=@P_Wjp%q"PU1NqmSg6LORh0s+HP%`pDQb%9+t9WL-V4ee3Xs1$Zc/h)^P6KMuAqa-E$"E5e-Jj<!82#5uY"_D90a6`VGI3bV??TVJJ9,D_b%+!f96;AMh?N]9]0!7h0W<;,Ur_N6&YD@i<ZM1osD,"Q"^#6.,o6Q&D#7CJ"3E7f?^nG;n:IfJm9WW1.+rqX=DrqLtmqs-KE_meP'%rkJC$:VZl"?iTmcJ,]/nDh%W<+92(R^\d&`s884us7,QmrNGgZhu2fC^]!QgJ,/DK^\cdcpri[<E^'#cs8Mcmpn.TUmJd28DOtA~>%AI9_PrivateDataEnd