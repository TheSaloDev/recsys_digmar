%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: STU-FIIT-anfv.eps
%%Creator: Adobe Illustrator(R) 14.0
%%For: Juraj Blako
%%CreationDate: 9.10.2012
%%BoundingBox: 0 0 143 83
%%HiResBoundingBox: 0 0 142.3555 82.0391
%%CropBox: 0 0 142.3555 82.0391
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 14.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 14.0.0 x367 R agm 4.4890 ct 5.1541%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 76 8%%BeginData: 6882 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFD1FFF60AFFD05FFAF60FD06%FF8584FD05FFA885A9FD07FFA87D7DA8FFFFFFA87DA87D7D7DFFFFFF7EA8%FFFF7EA8FD49FF360E0DAFFFFFFFAF0D0E36FD04FF840D0E84FD04FF140D%36FD06FF7E27F8F8F8FFFFFF2727F8F8F827FFFFA827F8FFFF27F8FD49FF%610D14AFFFFFFFAF140D60FD04FF5A140DAFFD04FF0E1414FD06FF7DF87D%A8A8FD04FFA85227FD05FF2727FFFF2727FD49FFA88584FD05FF8485A9FD%05FF5A85FD05FFAF5AAFFD06FF522727A8FD06FF2727FD05FF2727FFFF27%27FD6AFF2727F87DFD05FF5227FD05FF2727FFFF2727FD6BFF7D27F8A8FD%04FF2727FD05FF2727FFFF27F8FD6AFF7DFF5227A8FD04FF5227FD05FF27%27A8A8F852FD69FF52F8F82727FD05FF2727FD05FF7DF827F8F87DFD49FF%AF3685FD05FF8536AFFD04FFA9605AFD05FF845AA9FD07FF7D7D7DFD06FF%A87DFD06FFA87DA8A8FD4AFF350D0DAFFFFFFFAF0D0D36FD04FF5A0D0E84%FFFFFFAF0E0D14FD66FF850D14AFFFFFFFAF140D61FD04FF84140EAFFD04%FF141436FD67FFA9A9FD05FFA8A9FD06FF84AFFD06FF84FD07FF7D522852%52FFFFFF52FFFFFFA852A8FFFFA8275228527DFD69FF7DF8A87DA8FFFFFF%27A8FFFFFFF8A8FFFFA8A827527DFD6AFF7D52FD06FFF8A8FFFFA827A8FD%04FF5252FD6BFF7D277D7DFD04FF27A8FFFFFF27FD05FF527DFD6BFF7D00%2752A8FFFFFFF8A8FFFFA827A8FD04FF5252FD4BFFAF0E5AFD05FF600EA9%FD04FFA81436FD05FF5A1484FD06FF7D27FD05FFA827A8FFFFFF27A8FD04%FF2E7DFD4BFF0D0D0DAFFFFFFFAF0D0D14FD04FF5A0D0E84FFFFFFAF0E0D%14FD06FF5227FD06FFF8A8FFFFA827A8FD04FF5252FD4BFF850E36FD05FF%360E85FD04FF841414FD05FF5A1460FD06FFA852FD06FF52A8FFFFFF27FD%05FF527DFD5BFFA9FD07FFA8FD07FFA8FD07FFA8FD0BFFA8FDFCFFFDFCFF%FDFCFFFDFCFFFDDBFFA87D7DFFA8A8FFFFA87D52FFFF7DA8A8A8FF7DA8FF%FF7DA87DFD04FFA87EA87DFF7DA8A8A8FF7DA8A87DFF7DFF847D7DFF847D%7DFFFFA852A8FFA8A8AF527D7DFF7DFF7DFD05FF527DA8FF7D7D7DFD2FFF%7DF8A8FFA852FFFF7D27527DFF27A827FFFF2727FFFF52277DFD04FF527D%7D7DFF5227527DFF27FFA8527D52FF7D27A8FF7DF827A8FFF852A8FF27A8%FF5227A8FF522752FD04FF5252277DFF5227A8FD2FFFA82752FF7D52FFFF%27A87D52FF7D2752FFA82127A8FF2727A8FD04FF7D598452FF5227F8A8FF%27A8FF27277DFF5227A8FF522727FFFF7D27A8FF52A8FF7D53FFFF7D27A8%FD04FF527DA827FF5227A8FD30FF5227FFA8277DFF7D27527DFFA8277DFF%5952277DFF522752FD04FF7D27277DFF595227A8FF27A8FF7DF8FFFF7D27%A8FF7D2752A8FF7D277DFF27A8FFA852FFFFFF27FD05FF5352277DFF527D%FD30FFA87DA8FFA87D52FFA87D7DFFFFFF7DFFFFA8A8FF7DFF7DA87DFD05%FF7D7DA8FFA8FF7DFFFFA8A8FFA87DFFFFA87D7DFFA8A87DA8FF7D7DFFFF%A8A8FFA8A8FFFFA8A8A8FD05FF597DA8FFA8FDFCFFFD35FFA87DA8FFFF7D%A8A8FFA8A8A8FFA8FFA8FFFFA8FFA8FFFFA8A8A8FFA8A8FFFFFFA8A8FFFF%FF7DA8FFA8A8FFA8FD04FFA8FFFFA8FFA8FD05FF7DA8FFFFA8A8A8FFFFFF%A8FFFFA87DA8FFA8A8FFA8A8A8FFA8FD04FFA8FFFFA8FFA8FFFFFFA8FD1E%FF7DF827FF7D2128A8FF2E27A8FF52A852A8FFF87D27FFA8272752FF7D27%FFFF7D27277DFF52277DFF7D275259FD04FF27A8A8277D52A8FFFFFF5327%27A8FF52F852FFFF52F8FFFF27F87DFF27A8FF2727A8FF27A8FFFFA8F8A8%FF527D5253FF52F8A8FD1EFF52A8FFA827A8FFA827FFFFFF525227FFFF27%2752FF7D52FF27FF7D52FFFF27FF7D7DFF287DA8FFFF2727FD05FF52A8FF%F85227FD04FFA82727A8FF522752FFFF5227A8FFA852FFFF527DFF5252FF%FF27FFFFFF522752FF7D5228FFFF5227A8FD1EFF527DFF7D277DFFA8277D%FFFF525352A8FF2752F8FF7D287D27FF7D27A8FFFD0452FF2752F8A8FF7D%52FD05FF27A8A82E2727FD04FF7D27F8A8FF52F852FFA8F82752FF7D27FF%FF277DFFA8F87DFF277DFFA8272727FFFFF852FFA8F82752FD1EFF7DA8FF%FF5253A8FF7D527DFF7DFF7DFFFF7DA87DFFFF52527DFFA85252FFA85252%FFFFA8527DA8FF7DA8FD05FF7DA8FF7DA852FD04FFA82E7DA8FF7DA852FF%7DA8A87DFFA87DFFFF7DA8FF5252A8FF5252A8FF52FF52FFFF7D7DFF7DA8%A87DFD45FFA8FDD9FFA8FD07FFA8FFA8FD07FFA8FFA8FFFFFFA8FD05FFA8%FFFFFFA8FD0BFFA8AFA8FD05FFA8FD0DFFA8FFA8FD05FFA8FFFFFFAFFD2D%FFA852A8FFA852FFFF8452A8FF7DA87DFFA87DFFFF7D52FFA87D7DA8FFFF%FFA85252A8FF527DA8FFFFFF59FFA852A884FF7D52FFFF7D527DFFA85252%FFA852FF52A8FFA852FFA85352FFA87DFFA852A8FF7D52FD2EFF7D52A8FF%5252A8FF28FFFFFF52FF52FF847DFFFF7D7DFFFF5252A8FFFFFF52A87D7D%FF527DFD04FF52A8A827597DFF527DA8A852FF27FF7D5227FFA8277D27A8%FF5252A8FF7DA8FFA852FF52A8FFFF5252FD2EFF7D52FFFF5227A8FF52A8%FFFF7DA87DFFA87DFFFFA87DFFFFA87DFD04FF7DA8A87DFF52A8FD04FF52%FFA87D277DFF7D7DFFA853FF52FFA8277DFFFF525252A8FF52287EFF847D%FFA87DFF52A8FFFFFF527DFD2DFF7DA8FFA87DA87DFF7D527DFF7D2752FF%A8527DFF7E84FFFF7EA8FD04FFA85252A8A87DFD05FF7DA8A87D7D52FF7D%FFFFFF525259FF7DA852FFA87D527DA8A87DA87DFF7DA8FFA87DFF7D527D%FF7D527DFD36FFA8FFFFFFA8FD11FFA8FD15FFA8FD17FFA8FFFFFFA8FDFC%FFFD33FF7D7DFFA87DA87EFF7E527DFD04FF7DFFA87DA8A8FF7D52A8FF7D%52A8FFA8527DFFA87DFF7DFFFFA87DFFA87D52FFA8A8FFA8527DFFA87DFF%7DFFFFFFA87D52FFA87D7DFFAF5952FFFD04A8FF7DA8A8FFFF5253A8FF7D%FFFFFF5252A8FF7D527DFF7DFFFF7D7DFFFF5259FD14FF277DFFA800A859%FF52A852FD04FF7DA8FF277D7DFF5284FFFF52FF52FF7D5227FF7E27A827%FFFF5252FFFF537DFFA87DFF52FF52FFA8277D7DFD04FF7D7DFFA852FFFF%7D53FFFFA87D7D7DFF277D52FFFD047DFF7DA8FFFD047DFF537DFFFF7DA8%FF52A8FFA827FD14FF7D5227FFA852277DFF52A87DA8FFFFFF52FFA85227%7DFF5352FF7D7DFF52A8A8F87DFFA8275927FFA85227A8FF7D7DFF7D7DA8%52FF7D7DA8522852FD04FF7D7DFF7D52A8FF52A8FFFF7D52527DFF7D2752%FF7D7DA852FF52FFFF7D7DFF52FF52A852FF7DA8A852A8FFFFA852FD13FF%7D7D7DA8A87D7D52FF527D52FD04FF7DA8A87D7D52FF52FFFFFF527D52FF%7D7D52FFA87D527DFFA8527D7DFF7DA8FFA87DFF537D52FFA87E527DFD04%FF7DA8FFA852A8FFA852A8FFA87DA87DFF7DA827FFA85252A8FF527DFFA8%5252A8FF7D527DFF7DA8FF52A8FFFF7D52FD13FFA8FFA8FD06FFA87DFD05%FFA8FFA8FD09FF7DFD04FFA8FFFFA8FFA8FFA8FD05FFA8FFA8FFFFFF7DA8%FFFFA8FFA8FD05FFA8FFA8A87DFFFFA87DFFA8FFA8FD04FFA8FFFFA8A8FF%FFA8A8A8FFA8A8FFFFFFA8A8FFA8FFFFA87DFFA8A8A8FDFCFFFDFCFFFDFC%FFFDFCFFFDFCFFFD1CFFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                                             
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.2-c063 53.352624, 2008/07/30-18:05:41        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:ModifyDate>2012-10-09T17:12:45+02:00</xmp:ModifyDate>
         <xmp:CreateDate>2012-10-09T17:12:45+02:00</xmp:CreateDate>
         <xmp:MetadataDate>2012-10-09T17:12:45+02:00</xmp:MetadataDate>
         <xmp:CreatorTool>Adobe Illustrator CS4</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>148</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAlAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FWN+efP&#xA;OmeT9Mivb2KS4a4k9KCCKnItQsSSxACgDMrS6WWaVDanC12ujp4iUhdo/wAreZLHzJodtrFkrpBc&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Untitled-5</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:DocumentID>xmp.did:1835622C0C206811945780C5360C7B74</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:1835622C0C206811945780C5360C7B74</xmpMM:InstanceID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:OriginalDocumentID>uuid:43e13ec5-8f60-de44-b303-769192495e26</xmpMM:OriginalDocumentID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:1735622C0C206811945780C5360C7B74</stRef:instanceID>
            <stRef:documentID>xmp.did:1735622C0C206811945780C5360C7B74</stRef:documentID>
            <stRef:originalDocumentID>uuid:43e13ec5-8f60-de44-b303-769192495e26</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:1735622C0C206811945780C5360C7B74</stEvt:instanceID>
                  <stEvt:when>2012-10-09T17:12:33+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:1835622C0C206811945780C5360C7B74</stEvt:instanceID>
                  <stEvt:when>2012-10-09T17:12:45+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Adobe PDF library 9.90</pdf:Producer>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>50.219157</stDim:w>
            <stDim:h>28.941386</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>FIIT_CMYK</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>90.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>20.000000</xmpG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -82.0391 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 82.0391 li
142.355 82.0391 li
142.355 0 li
cp
clp
[1 0 0 1 0 0 ]ct
0 82.0391 mo
142.355 82.0391 li
142.355 0 li
0 0 li
0 82.0391 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
gsave
0 0 mo
142.354 0 li
142.354 82.0391 li
0 82.0391 li
0 0 li
cp
clp
11.7354 46.6904 mo
11.9902 46.1074 li
12.0073 46.0674 12.0415 46.0508 12.0864 46.0674 cv
12.3242 46.1758 12.5225 46.2549 12.9136 46.2549 cv
13.2524 46.2549 13.4565 46.1074 13.4565 45.8584 cv
13.4565 45.627 13.3433 45.5078 12.7944 45.2637 cv
12.0864 44.9639 11.7803 44.5908 11.7803 43.9844 cv
11.7803 43.3223 12.2783 42.8291 13.1226 42.8291 cv
13.6714 42.8291 13.9092 42.8691 14.3223 43.0508 cv
14.3735 43.0674 14.3735 43.1074 14.3564 43.1465 cv
14.0903 43.667 li
14.0732 43.707 14.0396 43.7305 13.9883 43.707 cv
13.7676 43.6162 13.5415 43.5713 13.2754 43.5713 cv
12.9136 43.5713 12.7544 43.7305 12.7544 43.9619 cv
12.7544 44.1885 12.8394 44.2959 13.4453 44.5391 cv
14.1523 44.8398 14.4243 45.1904 14.4243 45.7676 cv
14.4243 46.5605 13.8643 46.9961 12.9922 46.9961 cv
12.5225 46.9961 12.1543 46.9561 11.7695 46.7588 cv
11.7354 46.7354 11.7246 46.7129 11.7354 46.6904 cv
0 0 0 1 cmyk
f
17.3613 46.1865 mo
17.3613 46.2148 17.3735 46.2314 17.4014 46.2314 cv
18.8901 46.2314 li
18.9351 46.2314 18.9585 46.2549 18.9585 46.3057 cv
18.9585 46.8828 li
18.9585 46.9346 18.9351 46.957 18.8901 46.957 cv
16.5405 46.957 li
16.4893 46.957 16.4673 46.9346 16.4673 46.8828 cv
16.4673 42.9424 li
16.4673 42.8926 16.4893 42.8691 16.5405 42.8691 cv
17.2993 42.8691 li
17.3394 42.8691 17.3613 42.8926 17.3613 42.9424 cv
17.3613 46.1865 li
cp
f
22.2061 43.5537 mo
21.6631 43.5537 21.3682 43.9951 21.3682 44.9072 cv
21.3682 45.835 21.6572 46.2715 22.2002 46.2715 cv
22.7383 46.2715 23.0322 45.835 23.0322 44.9131 cv
23.0322 43.9902 22.7319 43.5537 22.2061 43.5537 cv
22.2002 46.9961 mo
20.8423 46.9961 20.4341 46.2539 20.4341 44.9131 cv
20.4341 43.5605 20.8423 42.8291 22.2002 42.8291 cv
23.5591 42.8291 23.9663 43.5654 23.9663 44.9072 cv
23.9663 46.2598 23.5591 46.9961 22.2002 46.9961 cv
f
26.9102 46.957 mo
26.8823 46.957 26.8652 46.9395 26.853 46.9053 cv
25.6982 42.96 li
25.6812 42.9082 25.71 42.8691 25.7554 42.8691 cv
26.5811 42.8691 li
26.6274 42.8691 26.6323 42.8867 26.6494 42.9258 cv
27.4482 46.0615 li
28.2461 42.9258 li
28.2573 42.8867 28.2803 42.8691 28.3193 42.8691 cv
29.0562 42.8691 li
29.106 42.8691 29.1294 42.8975 29.1182 42.9482 cv
27.957 46.9053 li
27.9463 46.9395 27.9233 46.957 27.8892 46.957 cv
26.9102 46.957 li
cp
f
32.6772 45.377 mo
32.2241 43.8086 li
31.771 45.377 li
32.6772 45.377 li
cp
31.5684 46.0957 mo
31.3413 46.9063 li
31.3242 46.9404 31.3022 46.957 31.2671 46.957 cv
30.5313 46.957 li
30.4922 46.957 30.4644 46.9219 30.481 46.8828 cv
31.7261 42.8984 li
31.7261 42.8809 31.7432 42.8691 31.771 42.8691 cv
32.7734 42.8691 li
32.79 42.8691 32.8071 42.8809 32.8193 42.9092 cv
34.0532 46.8828 li
34.0703 46.9219 34.041 46.957 34.002 46.957 cv
33.1812 46.957 li
33.147 46.957 33.124 46.9404 33.1074 46.9063 cv
32.8813 46.0957 li
31.5684 46.0957 li
cp
f
37.6021 44.9355 mo
39.0059 46.8545 li
39.0352 46.8994 39.0059 46.957 38.9609 46.957 cv
37.9932 46.957 li
37.9702 46.957 37.9531 46.9453 37.9419 46.9287 cv
36.8491 45.2246 li
36.8491 46.8828 li
36.8491 46.9346 36.8271 46.957 36.7871 46.957 cv
36.0283 46.957 li
35.9771 46.957 35.9551 46.9346 35.9551 46.8828 cv
35.9551 42.9424 li
35.9551 42.8926 35.9771 42.8691 36.0283 42.8691 cv
36.7871 42.8691 li
36.8271 42.8691 36.8491 42.8926 36.8491 42.9424 cv
36.8491 44.7373 li
37.9312 42.8975 li
37.9419 42.8809 37.959 42.8691 37.981 42.8691 cv
38.853 42.8691 li
38.915 42.8691 38.9331 42.9258 38.9043 42.9717 cv
37.6021 44.9355 li
cp
f
47.1885 45.6943 mo
47.1885 46.4922 46.7417 46.9961 45.6255 46.9961 cv
44.5166 46.9961 44.0693 46.4922 44.0693 45.6943 cv
44.0693 42.9434 li
44.0693 42.8926 44.0913 42.8691 44.1426 42.8691 cv
44.9014 42.8691 li
44.9404 42.8691 44.9634 42.8926 44.9634 42.9434 cv
44.9634 45.6709 li
44.9634 46.0732 45.1846 46.2715 45.6255 46.2715 cv
46.0737 46.2715 46.2935 46.0732 46.2935 45.6709 cv
46.2935 42.9434 li
46.2935 42.8926 46.3164 42.8691 46.3613 42.8691 cv
47.1255 42.8691 li
47.1655 42.8691 47.1885 42.8926 47.1885 42.9434 cv
47.1885 45.6943 li
cp
f
51.6548 45.6201 mo
51.6548 42.9424 li
51.6548 42.8916 51.6719 42.8691 51.7119 42.8691 cv
52.4419 42.8691 li
52.4868 42.8691 52.5098 42.8916 52.5098 42.9424 cv
52.5098 46.8828 li
52.5098 46.9336 52.4868 46.957 52.4419 46.957 cv
51.6489 46.957 li
51.5977 46.957 51.5869 46.9502 51.5698 46.9111 cv
50.2568 44.2041 li
50.2568 46.8828 li
50.2568 46.9336 50.2339 46.957 50.189 46.957 cv
49.4746 46.957 li
49.4248 46.957 49.4019 46.9336 49.4019 46.8828 cv
49.4019 42.9424 li
49.4019 42.8916 49.4248 42.8691 49.4746 42.8691 cv
50.2568 42.8691 li
50.3076 42.8691 50.3188 42.875 50.3359 42.915 cv
51.6548 45.6201 li
cp
f
55.5488 42.8691 mo
55.5889 42.8691 55.6108 42.8926 55.6108 42.9434 cv
55.6108 46.8828 li
55.6108 46.9346 55.5889 46.9561 55.5488 46.9561 cv
54.79 46.9561 li
54.7388 46.9561 54.7168 46.9346 54.7168 46.8828 cv
54.7168 42.9434 li
54.7168 42.8926 54.7388 42.8691 54.79 42.8691 cv
55.5488 42.8691 li
cp
f
58.728 46.957 mo
58.7002 46.957 58.6831 46.9395 58.6709 46.9053 cv
57.5171 42.96 li
57.499 42.9082 57.5278 42.8691 57.5732 42.8691 cv
58.3989 42.8691 li
58.4448 42.8691 58.4502 42.8867 58.4668 42.9258 cv
59.2661 46.0615 li
60.064 42.9258 li
60.0752 42.8867 60.0981 42.8691 60.1372 42.8691 cv
60.874 42.8691 li
60.9238 42.8691 60.9468 42.8975 60.936 42.9482 cv
59.7749 46.9053 li
59.7642 46.9395 59.7412 46.957 59.707 46.957 cv
58.728 46.957 li
cp
f
63.731 44.5508 mo
64.9941 44.5508 li
65.0439 44.5508 65.0732 44.5732 65.0732 44.6191 cv
65.0732 45.208 li
65.0732 45.2471 65.0439 45.2695 64.9941 45.2695 cv
63.731 45.2695 li
63.731 46.1865 li
63.731 46.2148 63.7432 46.2314 63.771 46.2314 cv
65.3608 46.2314 li
65.4131 46.2314 65.4351 46.2549 65.4351 46.2998 cv
65.4351 46.8828 li
65.4351 46.9336 65.4131 46.957 65.3608 46.957 cv
62.9102 46.957 li
62.8589 46.957 62.8369 46.9336 62.8369 46.8828 cv
62.8369 42.9424 li
62.8369 42.8916 62.8589 42.8691 62.9102 42.8691 cv
65.3608 42.8691 li
65.4131 42.8691 65.4351 42.8916 65.4351 42.9424 cv
65.4351 43.5205 li
65.4351 43.5713 65.4131 43.5938 65.3608 43.5938 cv
63.771 43.5938 li
63.7432 43.5938 63.731 43.6104 63.731 43.6387 cv
63.731 44.5508 li
cp
f
68.3149 44.6982 mo
68.6611 44.6982 li
69.0737 44.6982 69.3291 44.5166 69.3291 44.126 cv
69.3291 43.7588 69.1128 43.5938 68.6831 43.5938 cv
68.3599 43.5938 li
68.332 43.5938 68.3149 43.6104 68.3149 43.6387 cv
68.3149 44.6982 li
cp
68.3149 45.3379 mo
68.3149 46.8828 li
68.3149 46.9336 68.293 46.957 68.2529 46.957 cv
67.4941 46.957 li
67.4429 46.957 67.4209 46.9336 67.4209 46.8828 cv
67.4209 42.9424 li
67.4209 42.8916 67.4429 42.8691 67.4941 42.8691 cv
68.8018 42.8691 li
69.8267 42.8691 70.2627 43.3232 70.2627 44.1084 cv
70.2627 44.6982 69.9849 45.1055 69.4419 45.2588 cv
70.4717 46.8486 li
70.5117 46.9111 70.478 46.957 70.4268 46.957 cv
69.5259 46.957 li
69.498 46.957 69.4819 46.9453 69.4761 46.9277 cv
68.5527 45.3379 li
68.3149 45.3379 li
cp
f
72.3389 46.6904 mo
72.5938 46.1074 li
72.6113 46.0674 72.6445 46.0508 72.6895 46.0674 cv
72.9277 46.1758 73.126 46.2549 73.5166 46.2549 cv
73.8555 46.2549 74.0596 46.1074 74.0596 45.8584 cv
74.0596 45.627 73.9473 45.5078 73.3975 45.2637 cv
72.6895 44.9639 72.3838 44.5908 72.3838 43.9844 cv
72.3838 43.3223 72.8818 42.8291 73.7256 42.8291 cv
74.2744 42.8291 74.5127 42.8691 74.9258 43.0508 cv
74.9766 43.0674 74.9766 43.1074 74.96 43.1465 cv
74.6943 43.667 li
74.6768 43.707 74.6426 43.7305 74.5918 43.707 cv
74.3711 43.6162 74.1445 43.5713 73.8789 43.5713 cv
73.5166 43.5713 73.3574 43.7305 73.3574 43.9619 cv
73.3574 44.1885 73.4434 44.2959 74.0488 44.5391 cv
74.7559 44.8398 75.0283 45.1904 75.0283 45.7676 cv
75.0283 46.5605 74.4678 46.9961 73.5957 46.9961 cv
73.126 46.9961 72.7578 46.9561 72.373 46.7588 cv
72.3389 46.7354 72.3281 46.7129 72.3389 46.6904 cv
f
77.8975 42.8691 mo
77.9365 42.8691 77.959 42.8926 77.959 42.9434 cv
77.959 46.8828 li
77.959 46.9346 77.9365 46.9561 77.8975 46.9561 cv
77.1377 46.9561 li
77.0869 46.9561 77.0654 46.9346 77.0654 46.8828 cv
77.0654 42.9434 li
77.0654 42.8926 77.0869 42.8691 77.1377 42.8691 cv
77.8975 42.8691 li
cp
f
80.9854 46.957 mo
80.9453 46.957 80.9238 46.9346 80.9238 46.8828 cv
80.9238 43.6396 li
80.9238 43.6104 80.9063 43.5938 80.8779 43.5938 cv
79.9326 43.5938 li
79.8818 43.5938 79.8594 43.5713 79.8594 43.5205 cv
79.8594 42.9424 li
79.8594 42.8926 79.8818 42.8691 79.9326 42.8691 cv
82.8193 42.8691 li
82.8643 42.8691 82.8877 42.8926 82.8877 42.9424 cv
82.8877 43.5205 li
82.8877 43.5713 82.8643 43.5938 82.8193 43.5938 cv
81.8574 43.5938 li
81.8291 43.5938 81.8174 43.6104 81.8174 43.6396 cv
81.8174 46.8828 li
81.8174 46.9346 81.7949 46.957 81.7441 46.957 cv
80.9854 46.957 li
cp
f
86.583 45.3662 mo
86.583 46.8779 li
86.583 46.9287 86.5596 46.957 86.5146 46.957 cv
85.7559 46.957 li
85.7109 46.957 85.6885 46.9287 85.6885 46.8779 cv
85.6885 45.3662 li
84.4316 42.9707 li
84.4033 42.9209 84.4199 42.8691 84.4883 42.8691 cv
85.3721 42.8691 li
85.4004 42.8691 85.416 42.8809 85.4277 42.9092 cv
86.209 44.5742 li
86.9912 42.9092 li
86.9961 42.8809 87.0127 42.8691 87.041 42.8691 cv
87.8506 42.8691 li
87.9131 42.8691 87.9297 42.9209 87.9082 42.9658 cv
86.583 45.3662 li
cp
f
94.5439 43.5537 mo
94.001 43.5537 93.7061 43.9951 93.7061 44.9072 cv
93.7061 45.835 93.9951 46.2715 94.5381 46.2715 cv
95.0762 46.2715 95.3701 45.835 95.3701 44.9131 cv
95.3701 43.9902 95.0703 43.5537 94.5439 43.5537 cv
94.5381 46.9961 mo
93.1797 46.9961 92.7725 46.2539 92.7725 44.9131 cv
92.7725 43.5605 93.1797 42.8291 94.5381 42.8291 cv
95.8975 42.8291 96.3047 43.5654 96.3047 44.9072 cv
96.3047 46.2598 95.8975 46.9961 94.5381 46.9961 cv
f
99.2432 44.5508 mo
100.448 44.5508 li
100.5 44.5508 100.527 44.5732 100.527 44.6191 cv
100.527 45.208 li
100.527 45.2471 100.5 45.2695 100.448 45.2695 cv
99.2432 45.2695 li
99.2432 46.8828 li
99.2432 46.9336 99.2207 46.957 99.1807 46.957 cv
98.4219 46.957 li
98.3711 46.957 98.3486 46.9336 98.3486 46.8828 cv
98.3486 42.9424 li
98.3486 42.8916 98.3711 42.8691 98.4219 42.8691 cv
100.816 42.8691 li
100.868 42.8691 100.89 42.8916 100.89 42.9424 cv
100.89 43.5205 li
100.89 43.5713 100.868 43.5938 100.816 43.5938 cv
99.2881 43.5938 li
99.2598 43.5938 99.2432 43.6104 99.2432 43.6387 cv
99.2432 44.5508 li
cp
f
12.7148 54.8213 mo
12.6748 54.8213 12.6528 54.7998 12.6528 54.748 cv
12.6528 51.5049 li
12.6528 51.4756 12.6357 51.459 12.6079 51.459 cv
11.6616 51.459 li
11.6108 51.459 11.5889 51.4365 11.5889 51.3857 cv
11.5889 50.8076 li
11.5889 50.7578 11.6108 50.7344 11.6616 50.7344 cv
14.5488 50.7344 li
14.5938 50.7344 14.6167 50.7578 14.6167 50.8076 cv
14.6167 51.3857 li
14.6167 51.4365 14.5938 51.459 14.5488 51.459 cv
13.5869 51.459 li
13.5586 51.459 13.5469 51.4756 13.5469 51.5049 cv
13.5469 54.748 li
13.5469 54.7998 13.5249 54.8213 13.4736 54.8213 cv
12.7148 54.8213 li
cp
f
17.4121 52.416 mo
18.6753 52.416 li
18.7251 52.416 18.7539 52.4385 18.7539 52.4844 cv
18.7539 53.0732 li
18.7539 53.1123 18.7251 53.1348 18.6753 53.1348 cv
17.4121 53.1348 li
17.4121 54.0518 li
17.4121 54.0801 17.4243 54.0967 17.4521 54.0967 cv
19.042 54.0967 li
19.0942 54.0967 19.1162 54.1201 19.1162 54.165 cv
19.1162 54.748 li
19.1162 54.7988 19.0942 54.8223 19.042 54.8223 cv
16.5913 54.8223 li
16.54 54.8223 16.5181 54.7988 16.5181 54.748 cv
16.5181 50.8076 li
16.5181 50.7568 16.54 50.7344 16.5913 50.7344 cv
19.042 50.7344 li
19.0942 50.7344 19.1162 50.7568 19.1162 50.8076 cv
19.1162 51.3857 li
19.1162 51.4375 19.0942 51.459 19.042 51.459 cv
17.4521 51.459 li
17.4243 51.459 17.4121 51.4756 17.4121 51.5039 cv
17.4121 52.416 li
cp
f
22.8628 54.8613 mo
21.6909 54.8613 20.9888 54.0635 20.9888 52.7783 cv
20.9888 51.4932 21.6909 50.6943 22.8628 50.6943 cv
23.3389 50.6943 23.6436 50.751 23.9556 50.9268 cv
23.9839 50.9443 23.9946 50.9668 23.9946 50.9834 cv
23.9946 51 23.9888 51.0234 23.978 51.0459 cv
23.7119 51.5557 li
23.6958 51.583 23.6777 51.6006 23.6606 51.6006 cv
23.6436 51.6006 23.627 51.5957 23.6108 51.5898 cv
23.3838 51.4824 23.186 51.4424 22.937 51.4424 cv
22.4668 51.4424 21.9238 51.833 21.9238 52.7783 cv
21.9238 53.7295 22.439 54.1084 22.9429 54.1084 cv
23.1289 54.1084 23.3496 54.0859 23.6157 53.9551 cv
23.6548 53.9385 23.6899 53.9443 23.707 53.9785 cv
23.9839 54.5049 li
24.0117 54.5498 24.001 54.5908 23.9556 54.6182 cv
23.6157 54.8105 23.3159 54.8613 22.8628 54.8613 cv
f
26.8696 53.1348 mo
26.8418 53.1348 26.8247 53.1514 26.8247 53.1797 cv
26.8247 54.748 li
26.8247 54.7998 26.8018 54.8213 26.7627 54.8213 cv
26.0034 54.8213 li
25.9526 54.8213 25.9307 54.7998 25.9307 54.748 cv
25.9307 50.8076 li
25.9307 50.7578 25.9526 50.7344 26.0034 50.7344 cv
26.7627 50.7344 li
26.8018 50.7344 26.8247 50.7578 26.8247 50.8076 cv
26.8247 52.3711 li
26.8247 52.3984 26.8418 52.416 26.8696 52.416 cv
28.0986 52.416 li
28.1265 52.416 28.1436 52.3984 28.1436 52.3711 cv
28.1436 50.8076 li
28.1436 50.7578 28.1655 50.7344 28.2114 50.7344 cv
28.9697 50.7344 li
29.0156 50.7344 29.0376 50.7578 29.0376 50.8076 cv
29.0376 54.748 li
29.0376 54.7998 29.0156 54.8213 28.9697 54.8213 cv
28.2114 54.8213 li
28.1655 54.8213 28.1436 54.7998 28.1436 54.748 cv
28.1436 53.1797 li
28.1436 53.1514 28.1265 53.1348 28.0986 53.1348 cv
26.8696 53.1348 li
cp
f
33.5039 53.4863 mo
33.5039 50.8076 li
33.5039 50.7568 33.521 50.7344 33.561 50.7344 cv
34.291 50.7344 li
34.3359 50.7344 34.3589 50.7568 34.3589 50.8076 cv
34.3589 54.748 li
34.3589 54.7988 34.3359 54.8223 34.291 54.8223 cv
33.498 54.8223 li
33.4468 54.8223 33.436 54.8154 33.4189 54.7773 cv
32.106 52.0703 li
32.106 54.748 li
32.106 54.7988 32.083 54.8223 32.0381 54.8223 cv
31.3237 54.8223 li
31.2739 54.8223 31.251 54.7988 31.251 54.748 cv
31.251 50.8076 li
31.251 50.7568 31.2739 50.7344 31.3237 50.7344 cv
32.106 50.7344 li
32.1567 50.7344 32.168 50.7402 32.1851 50.7803 cv
33.5039 53.4863 li
cp
f
38.1743 51.4199 mo
37.6313 51.4199 37.3364 51.8604 37.3364 52.7725 cv
37.3364 53.7002 37.6255 54.1367 38.1685 54.1367 cv
38.7061 54.1367 39.0005 53.7002 39.0005 52.7783 cv
39.0005 51.8555 38.7002 51.4199 38.1743 51.4199 cv
38.1685 54.8613 mo
36.8091 54.8613 36.4023 54.1191 36.4023 52.7783 cv
36.4023 51.4258 36.8091 50.6943 38.1685 50.6943 cv
39.5273 50.6943 39.9341 51.4307 39.9341 52.7725 cv
39.9341 54.125 39.5273 54.8613 38.1685 54.8613 cv
f
42.8721 54.0518 mo
42.8721 54.0801 42.8843 54.0967 42.9121 54.0967 cv
44.4009 54.0967 li
44.4463 54.0967 44.4692 54.1201 44.4692 54.1709 cv
44.4692 54.748 li
44.4692 54.7998 44.4463 54.8213 44.4009 54.8213 cv
42.0513 54.8213 li
42 54.8213 41.978 54.7998 41.978 54.748 cv
41.978 50.8076 li
41.978 50.7578 42 50.7344 42.0513 50.7344 cv
42.8101 50.7344 li
42.8501 50.7344 42.8721 50.7578 42.8721 50.8076 cv
42.8721 54.0518 li
cp
f
47.7168 51.4199 mo
47.1738 51.4199 46.8789 51.8604 46.8789 52.7725 cv
46.8789 53.7002 47.168 54.1367 47.7109 54.1367 cv
48.249 54.1367 48.543 53.7002 48.543 52.7783 cv
48.543 51.8555 48.2427 51.4199 47.7168 51.4199 cv
47.7109 54.8613 mo
46.353 54.8613 45.9448 54.1191 45.9448 52.7783 cv
45.9448 51.4258 46.353 50.6943 47.7109 50.6943 cv
49.0698 50.6943 49.4766 51.4307 49.4766 52.7725 cv
49.4766 54.125 49.0698 54.8613 47.7109 54.8613 cv
f
53.7168 53.3164 mo
53.1909 53.3164 li
53.145 53.3164 53.1226 53.2939 53.1226 53.248 cv
53.1226 52.6592 li
53.1226 52.6143 53.145 52.5908 53.1909 52.5908 cv
54.4639 52.5908 li
54.5088 52.5908 54.5317 52.6143 54.5317 52.6592 cv
54.5317 54.5498 li
54.5317 54.5947 54.5146 54.624 54.4868 54.6289 cv
54.1299 54.7705 53.7227 54.8613 53.2236 54.8613 cv
52.0518 54.8613 51.3506 54.0625 51.3506 52.7783 cv
51.3506 51.4932 52.0518 50.6953 53.2236 50.6953 cv
53.6768 50.6953 54 50.752 54.3169 50.9268 cv
54.3447 50.9443 54.3569 50.9668 54.3569 50.9834 cv
54.3569 51.001 54.3506 51.0244 54.3398 51.0459 cv
54.0728 51.5547 li
54.0566 51.584 54.04 51.6006 54.0229 51.6006 cv
54.0059 51.6006 53.9878 51.5947 53.9717 51.5889 cv
53.7446 51.4824 53.5469 51.4424 53.2979 51.4424 cv
52.8276 51.4424 52.2847 51.833 52.2847 52.7783 cv
52.2847 53.7285 52.811 54.1484 53.2588 54.1484 cv
53.457 54.1484 53.564 54.1367 53.7168 54.0908 cv
53.7168 53.3164 li
cp
f
58.3701 53.2314 mo
58.3701 54.7432 li
58.3701 54.7939 58.3472 54.8223 58.3022 54.8223 cv
57.543 54.8223 li
57.498 54.8223 57.4751 54.7939 57.4751 54.7432 cv
57.4751 53.2314 li
56.2192 50.8359 li
56.1899 50.7861 56.207 50.7344 56.2749 50.7344 cv
57.1592 50.7344 li
57.187 50.7344 57.2031 50.7461 57.2153 50.7744 cv
57.9961 52.4385 li
58.7783 50.7744 li
58.7832 50.7461 58.8003 50.7344 58.8281 50.7344 cv
59.6382 50.7344 li
59.7002 50.7344 59.7173 50.7861 59.6953 50.8311 cv
58.3701 53.2314 li
cp
f
65.5615 50.7344 mo
65.6016 50.7344 65.6235 50.7578 65.6235 50.8086 cv
65.6235 54.748 li
65.6235 54.7998 65.6016 54.8213 65.5615 54.8213 cv
64.8027 54.8213 li
64.7515 54.8213 64.7295 54.7998 64.7295 54.748 cv
64.7295 50.8086 li
64.7295 50.7578 64.7515 50.7344 64.8027 50.7344 cv
65.5615 50.7344 li
cp
f
70.0879 53.4863 mo
70.0879 50.8076 li
70.0879 50.7568 70.105 50.7344 70.145 50.7344 cv
70.875 50.7344 li
70.9199 50.7344 70.9429 50.7568 70.9429 50.8076 cv
70.9429 54.748 li
70.9429 54.7988 70.9199 54.8223 70.875 54.8223 cv
70.082 54.8223 li
70.0308 54.8223 70.02 54.8154 70.0029 54.7773 cv
68.6899 52.0703 li
68.6899 54.748 li
68.6899 54.7988 68.667 54.8223 68.6221 54.8223 cv
67.9077 54.8223 li
67.8579 54.8223 67.835 54.7988 67.835 54.748 cv
67.835 50.8076 li
67.835 50.7568 67.8579 50.7344 67.9077 50.7344 cv
68.6899 50.7344 li
68.7407 50.7344 68.752 50.7402 68.769 50.7803 cv
70.0879 53.4863 li
cp
f
77.2285 53.0957 mo
77.2285 54.0527 li
77.2285 54.0801 77.2402 54.0977 77.2686 54.0977 cv
77.749 54.0977 li
78.0615 54.0977 78.3389 53.9785 78.3389 53.627 cv
78.3389 53.248 78.0898 53.0957 77.54 53.0957 cv
77.2285 53.0957 li
cp
77.2734 51.459 mo
77.2451 51.459 77.2285 51.4766 77.2285 51.5039 cv
77.2285 52.4551 li
77.5625 52.4551 li
78.0322 52.4551 78.2705 52.3145 78.2705 51.9297 cv
78.2705 51.5674 78.0498 51.459 77.6641 51.459 cv
77.2734 51.459 li
cp
77.5684 50.7344 mo
78.6943 50.7344 79.2041 51.0635 79.2041 51.8379 cv
79.2041 52.2002 78.9668 52.5742 78.3721 52.7549 cv
79.0117 52.9316 79.2725 53.3047 79.2725 53.8252 cv
79.2725 54.5498 78.791 54.8223 77.6074 54.8223 cv
76.4072 54.8223 li
76.3564 54.8223 76.335 54.7988 76.335 54.748 cv
76.335 50.8086 li
76.335 50.7568 76.3564 50.7344 76.4072 50.7344 cv
77.5684 50.7344 li
cp
f
82.3799 52.5625 mo
82.7256 52.5625 li
83.1387 52.5625 83.3936 52.3818 83.3936 51.9912 cv
83.3936 51.624 83.1777 51.459 82.748 51.459 cv
82.4248 51.459 li
82.3965 51.459 82.3799 51.4756 82.3799 51.5039 cv
82.3799 52.5625 li
cp
82.3799 53.2031 mo
82.3799 54.748 li
82.3799 54.7988 82.3574 54.8223 82.3184 54.8223 cv
81.5586 54.8223 li
81.5078 54.8223 81.4863 54.7988 81.4863 54.748 cv
81.4863 50.8076 li
81.4863 50.7568 81.5078 50.7344 81.5586 50.7344 cv
82.8672 50.7344 li
83.8916 50.7344 84.3281 51.1875 84.3281 51.9736 cv
84.3281 52.5625 84.0498 52.9707 83.5068 53.124 cv
84.5371 54.7139 li
84.5771 54.7764 84.543 54.8223 84.4922 54.8223 cv
83.5908 54.8223 li
83.5625 54.8223 83.5469 54.8105 83.541 54.793 cv
82.6182 53.2031 li
82.3799 53.2031 li
cp
f
88.4531 53.2422 mo
88 51.6738 li
87.5469 53.2422 li
88.4531 53.2422 li
cp
87.3438 53.9609 mo
87.1172 54.7715 li
87.1006 54.8047 87.0781 54.8223 87.043 54.8223 cv
86.3066 54.8223 li
86.2686 54.8223 86.2402 54.7871 86.2568 54.748 cv
87.502 50.7627 li
87.502 50.7461 87.5195 50.7344 87.5469 50.7344 cv
88.5488 50.7344 li
88.5664 50.7344 88.583 50.7461 88.5947 50.7744 cv
89.8291 54.748 li
89.8457 54.7871 89.8174 54.8223 89.7783 54.8223 cv
88.957 54.8223 li
88.9229 54.8223 88.9004 54.8047 88.8828 54.7715 cv
88.6572 53.9609 li
87.3438 53.9609 li
cp
f
92.2061 54.8213 mo
92.166 54.8213 92.1436 54.7998 92.1436 54.748 cv
92.1436 51.5049 li
92.1436 51.4756 92.127 51.459 92.0986 51.459 cv
91.1523 51.459 li
91.1016 51.459 91.0791 51.4365 91.0791 51.3857 cv
91.0791 50.8076 li
91.0791 50.7578 91.1016 50.7344 91.1523 50.7344 cv
94.04 50.7344 li
94.085 50.7344 94.1074 50.7578 94.1074 50.8076 cv
94.1074 51.3857 li
94.1074 51.4365 94.085 51.459 94.04 51.459 cv
93.0771 51.459 li
93.0498 51.459 93.0371 51.4756 93.0371 51.5049 cv
93.0371 54.748 li
93.0371 54.7998 93.0156 54.8213 92.9648 54.8213 cv
92.2061 54.8213 li
cp
f
96.8408 50.7344 mo
96.8809 50.7344 96.9023 50.7578 96.9023 50.8086 cv
96.9023 54.748 li
96.9023 54.7998 96.8809 54.8213 96.8408 54.8213 cv
96.082 54.8213 li
96.0313 54.8213 96.0088 54.7998 96.0088 54.748 cv
96.0088 50.8086 li
96.0088 50.7578 96.0313 50.7344 96.082 50.7344 cv
96.8408 50.7344 li
cp
f
98.9492 54.5557 mo
99.2051 53.9727 li
99.2217 53.9326 99.2559 53.916 99.3008 53.9326 cv
99.5391 54.041 99.7363 54.1201 100.128 54.1201 cv
100.467 54.1201 100.671 53.9727 100.671 53.7236 cv
100.671 53.4912 100.558 53.373 100.009 53.1289 cv
99.3008 52.8291 98.9951 52.4561 98.9951 51.8496 cv
98.9951 51.1875 99.4932 50.6943 100.337 50.6943 cv
100.886 50.6943 101.124 50.7344 101.537 50.916 cv
101.588 50.9326 101.588 50.9727 101.57 51.0117 cv
101.305 51.5322 li
101.288 51.5723 101.254 51.5957 101.203 51.5723 cv
100.982 51.4814 100.756 51.4365 100.489 51.4365 cv
100.128 51.4365 99.9688 51.5957 99.9688 51.8271 cv
99.9688 52.0537 100.054 52.1611 100.66 52.4043 cv
101.366 52.7051 101.639 53.0557 101.639 53.6328 cv
101.639 54.4258 101.079 54.8613 100.207 54.8613 cv
99.7363 54.8613 99.3691 54.8213 98.9834 54.624 cv
98.9492 54.6006 98.9385 54.5781 98.9492 54.5557 cv
f
104.576 54.0518 mo
104.576 54.0801 104.588 54.0967 104.615 54.0967 cv
106.104 54.0967 li
106.149 54.0967 106.173 54.1201 106.173 54.1709 cv
106.173 54.748 li
106.173 54.7998 106.149 54.8213 106.104 54.8213 cv
103.755 54.8213 li
103.704 54.8213 103.682 54.7998 103.682 54.748 cv
103.682 50.8076 li
103.682 50.7578 103.704 50.7344 103.755 50.7344 cv
104.514 50.7344 li
104.554 50.7344 104.576 50.7578 104.576 50.8076 cv
104.576 54.0518 li
cp
f
109.93 53.2422 mo
109.477 51.6738 li
109.023 53.2422 li
109.93 53.2422 li
cp
108.82 53.9609 mo
108.594 54.7715 li
108.577 54.8047 108.555 54.8223 108.52 54.8223 cv
107.784 54.8223 li
107.745 54.8223 107.717 54.7871 107.733 54.748 cv
108.979 50.7627 li
108.979 50.7461 108.996 50.7344 109.023 50.7344 cv
110.025 50.7344 li
110.043 50.7344 110.06 50.7461 110.071 50.7744 cv
111.306 54.748 li
111.322 54.7871 111.294 54.8223 111.255 54.8223 cv
110.434 54.8223 li
110.399 54.8223 110.377 54.8047 110.359 54.7715 cv
110.134 53.9609 li
108.82 53.9609 li
cp
f
113.886 54.8213 mo
113.858 54.8213 113.841 54.8047 113.829 54.7705 cv
112.675 50.8252 li
112.657 50.7734 112.687 50.7344 112.731 50.7344 cv
113.558 50.7344 li
113.604 50.7344 113.608 50.752 113.625 50.791 cv
114.424 53.9268 li
115.223 50.791 li
115.233 50.752 115.256 50.7344 115.295 50.7344 cv
116.032 50.7344 li
116.082 50.7344 116.105 50.7627 116.094 50.8135 cv
114.934 54.7705 li
114.922 54.8047 114.899 54.8213 114.865 54.8213 cv
113.886 54.8213 li
cp
f
119.653 53.2422 mo
119.2 51.6738 li
118.747 53.2422 li
119.653 53.2422 li
cp
118.544 53.9609 mo
118.317 54.7715 li
118.3 54.8047 118.278 54.8223 118.243 54.8223 cv
117.507 54.8223 li
117.469 54.8223 117.44 54.7871 117.457 54.748 cv
118.702 50.7627 li
118.702 50.7461 118.72 50.7344 118.747 50.7344 cv
119.749 50.7344 li
119.767 50.7344 119.783 50.7461 119.795 50.7744 cv
121.029 54.748 li
121.046 54.7871 121.018 54.8223 120.979 54.8223 cv
120.157 54.8223 li
120.123 54.8223 120.101 54.8047 120.083 54.7715 cv
119.857 53.9609 li
118.544 53.9609 li
cp
f
12.4658 60.4063 mo
13.7339 60.4063 li
13.7739 60.4063 13.7959 60.4229 13.7959 60.4629 cv
13.7959 60.8252 li
13.7959 60.8633 13.7739 60.8818 13.7339 60.8818 cv
12.4658 60.8818 li
12.4658 62.6309 li
12.4658 62.6699 12.4487 62.6865 12.415 62.6865 cv
11.9556 62.6865 li
11.917 62.6865 11.8999 62.6699 11.8999 62.6309 cv
11.8999 58.6563 li
11.8999 58.6172 11.917 58.5996 11.9556 58.5996 cv
14.0957 58.5996 li
14.1357 58.5996 14.1577 58.6172 14.1577 58.6563 cv
14.1577 59.0127 li
14.1577 59.0527 14.1357 59.0752 14.0957 59.0752 cv
12.5107 59.0752 li
12.4829 59.0752 12.4658 59.0928 12.4658 59.1211 cv
12.4658 60.4063 li
cp
f
17.4907 61.2441 mo
16.8735 59.1719 li
16.2568 61.2441 li
17.4907 61.2441 li
cp
16.1206 61.7188 mo
15.8545 62.6416 li
15.8438 62.6699 15.8208 62.6865 15.7925 62.6865 cv
15.3447 62.6865 li
15.3057 62.6865 15.2886 62.6582 15.3057 62.6191 cv
16.5396 58.6279 li
16.5396 58.6113 16.5508 58.5996 16.5786 58.5996 cv
17.2246 58.5996 li
17.2417 58.5996 17.2588 58.6113 17.2637 58.6338 cv
18.4868 62.6133 li
18.5039 62.665 18.4868 62.6865 18.4419 62.6865 cv
17.9487 62.6865 li
17.9209 62.6865 17.8975 62.6699 17.8926 62.6416 cv
17.6265 61.7188 li
16.1206 61.7188 li
cp
f
21.9502 62.7266 mo
20.7954 62.7266 20.2803 61.8779 20.2803 60.6377 cv
20.2803 59.415 20.7954 58.5596 21.9502 58.5596 cv
22.335 58.5596 22.6182 58.6113 22.9351 58.7861 cv
22.9634 58.8096 22.9634 58.8438 22.9463 58.8828 cv
22.7773 59.1943 li
22.7603 59.2334 22.7251 59.2334 22.6973 59.2168 cv
22.4541 59.0986 22.3013 59.0469 21.9844 59.0469 cv
21.3501 59.0469 20.8804 59.5566 20.8804 60.6377 cv
20.8804 61.7354 21.3394 62.2393 21.9844 62.2393 cv
22.2671 62.2393 22.4482 62.2002 22.7031 62.0645 cv
22.7373 62.0479 22.7603 62.0527 22.7773 62.0801 cv
22.9521 62.4033 li
22.9692 62.4375 22.9634 62.4668 22.9351 62.4941 cv
22.6074 62.6758 22.3413 62.7266 21.9502 62.7266 cv
f
27.6895 61.4189 mo
27.6895 62.2109 27.4067 62.7266 26.2915 62.7266 cv
25.1753 62.7266 24.8936 62.2109 24.8936 61.4189 cv
24.8936 58.6563 li
24.8936 58.6172 24.9097 58.5996 24.9497 58.5996 cv
25.4087 58.5996 li
25.4414 58.5996 25.4595 58.6172 25.4595 58.6563 cv
25.4595 61.5439 li
25.4595 62.0654 25.7427 62.251 26.2915 62.251 cv
26.8345 62.251 27.1235 62.0586 27.1235 61.5439 cv
27.1235 58.6563 li
27.1235 58.6172 27.1406 58.5996 27.1797 58.5996 cv
27.6323 58.5996 li
27.6724 58.5996 27.6895 58.6172 27.6895 58.6563 cv
27.6895 61.4189 li
cp
f
30.4683 62.166 mo
30.4683 62.1943 30.4795 62.2109 30.5083 62.2109 cv
32.0762 62.2109 li
32.1152 62.2109 32.1333 62.2344 32.1333 62.2744 cv
32.1333 62.6299 li
32.1333 62.6699 32.1152 62.6875 32.0762 62.6875 cv
29.9595 62.6875 li
29.9194 62.6875 29.9023 62.6699 29.9023 62.6299 cv
29.9023 58.6563 li
29.9023 58.6172 29.9194 58.5996 29.9595 58.5996 cv
30.4175 58.5996 li
30.4512 58.5996 30.4683 58.6172 30.4683 58.6563 cv
30.4683 62.166 li
cp
f
34.3667 62.6865 mo
34.3325 62.6865 34.3159 62.6699 34.3159 62.6299 cv
34.3159 59.1211 li
34.3159 59.0918 34.2988 59.0752 34.2705 59.0752 cv
33.2905 59.0752 li
33.2515 59.0752 33.2349 59.0527 33.2349 59.0127 cv
33.2349 58.6563 li
33.2349 58.6172 33.2515 58.5996 33.2905 58.5996 cv
35.9067 58.5996 li
35.9458 58.5996 35.9629 58.6172 35.9629 58.6563 cv
35.9629 59.0127 li
35.9629 59.0527 35.9458 59.0752 35.9067 59.0752 cv
34.9219 59.0752 li
34.8926 59.0752 34.8818 59.0918 34.8818 59.1211 cv
34.8818 62.6299 li
34.8818 62.6699 34.8647 62.6865 34.8247 62.6865 cv
34.3667 62.6865 li
cp
f
39.2852 60.9541 mo
39.2852 62.625 li
39.2852 62.665 39.2681 62.6865 39.228 62.6865 cv
38.7754 62.6865 li
38.7363 62.6865 38.7192 62.665 38.7192 62.625 cv
38.7192 60.9541 li
37.5474 58.6904 li
37.5181 58.6396 37.541 58.5996 37.5923 58.5996 cv
38.1074 58.5996 li
38.1362 58.5996 38.1533 58.6113 38.1641 58.6338 cv
39.0352 60.4287 li
39.9131 58.6338 li
39.9194 58.6113 39.936 58.5996 39.9644 58.5996 cv
40.4453 58.5996 li
40.4912 58.5996 40.5132 58.6396 40.4961 58.6797 cv
39.2852 60.9541 li
cp
f
46.6514 59.0361 mo
45.9775 59.0361 45.6265 59.5615 45.6265 60.6436 cv
45.6265 61.7246 45.9775 62.251 46.6514 62.251 cv
47.3135 62.251 47.6704 61.7246 47.6704 60.6436 cv
47.6704 59.5615 47.3135 59.0361 46.6514 59.0361 cv
46.6514 62.7266 mo
45.4116 62.7266 45.0322 61.8945 45.0322 60.6436 cv
45.0322 59.376 45.4004 58.5596 46.6514 58.5596 cv
47.8853 58.5596 48.2642 59.376 48.2642 60.6436 cv
48.2642 61.8945 47.8853 62.7266 46.6514 62.7266 cv
f
50.8735 60.4063 mo
52.1416 60.4063 li
52.1816 60.4063 52.2036 60.4229 52.2036 60.4629 cv
52.2036 60.8252 li
52.2036 60.8633 52.1816 60.8818 52.1416 60.8818 cv
50.8735 60.8818 li
50.8735 62.6309 li
50.8735 62.6699 50.8564 62.6865 50.8223 62.6865 cv
50.3643 62.6865 li
50.3247 62.6865 50.3076 62.6699 50.3076 62.6309 cv
50.3076 58.6563 li
50.3076 58.6172 50.3247 58.5996 50.3643 58.5996 cv
52.5034 58.5996 li
52.5435 58.5996 52.5654 58.6172 52.5654 58.6563 cv
52.5654 59.0127 li
52.5654 59.0527 52.5435 59.0752 52.5034 59.0752 cv
50.9185 59.0752 li
50.8906 59.0752 50.8735 59.0928 50.8735 59.1211 cv
50.8735 60.4063 li
cp
f
57.7412 58.5996 mo
57.7754 58.5996 57.792 58.6162 57.792 58.6563 cv
57.792 62.6309 li
57.792 62.6699 57.7754 62.6865 57.7412 62.6865 cv
57.2822 62.6865 li
57.2422 62.6865 57.2261 62.6699 57.2261 62.6309 cv
57.2261 58.6563 li
57.2261 58.6162 57.2422 58.5996 57.2822 58.5996 cv
57.7412 58.5996 li
cp
f
62.2388 61.7471 mo
62.2388 58.6563 li
62.2388 58.6172 62.2559 58.5996 62.29 58.5996 cv
62.7368 58.5996 li
62.7769 58.5996 62.7939 58.6172 62.7939 58.6563 cv
62.7939 62.6299 li
62.7939 62.6699 62.7769 62.6875 62.7368 62.6875 cv
62.2559 62.6875 li
62.2046 62.6875 62.1938 62.6807 62.1768 62.6416 cv
60.5576 59.5391 li
60.5576 62.6299 li
60.5576 62.6699 60.541 62.6875 60.501 62.6875 cv
60.0596 62.6875 li
60.02 62.6875 60.0029 62.6699 60.0029 62.6299 cv
60.0029 58.6563 li
60.0029 58.6172 60.02 58.5996 60.0596 58.5996 cv
60.5347 58.5996 li
60.5859 58.5996 60.5967 58.6055 60.6138 58.6455 cv
62.2388 61.7471 li
cp
f
65.5723 60.4063 mo
66.8403 60.4063 li
66.8804 60.4063 66.9023 60.4229 66.9023 60.4629 cv
66.9023 60.8252 li
66.9023 60.8633 66.8804 60.8818 66.8403 60.8818 cv
65.5723 60.8818 li
65.5723 62.6309 li
65.5723 62.6699 65.5552 62.6865 65.5215 62.6865 cv
65.0625 62.6865 li
65.0234 62.6865 65.0063 62.6699 65.0063 62.6309 cv
65.0063 58.6563 li
65.0063 58.6172 65.0234 58.5996 65.0625 58.5996 cv
67.2021 58.5996 li
67.2422 58.5996 67.2642 58.6172 67.2642 58.6563 cv
67.2642 59.0127 li
67.2642 59.0527 67.2422 59.0752 67.2021 59.0752 cv
65.6172 59.0752 li
65.5894 59.0752 65.5723 59.0928 65.5723 59.1211 cv
65.5723 60.4063 li
cp
f
70.5635 59.0361 mo
69.8896 59.0361 69.5386 59.5615 69.5386 60.6436 cv
69.5386 61.7246 69.8896 62.251 70.5635 62.251 cv
71.2256 62.251 71.5825 61.7246 71.5825 60.6436 cv
71.5825 59.5615 71.2256 59.0361 70.5635 59.0361 cv
70.5635 62.7266 mo
69.3237 62.7266 68.9443 61.8945 68.9443 60.6436 cv
68.9443 59.376 69.3125 58.5596 70.5635 58.5596 cv
71.7979 58.5596 72.1768 59.376 72.1768 60.6436 cv
72.1768 61.8945 71.7979 62.7266 70.5635 62.7266 cv
f
74.7861 60.5244 mo
75.2949 60.5244 li
75.8389 60.5244 76.1221 60.3203 76.1221 59.7949 cv
76.1221 59.2734 75.8506 59.0752 75.3066 59.0752 cv
74.8311 59.0752 li
74.8027 59.0752 74.7861 59.0928 74.7861 59.1201 cv
74.7861 60.5244 li
cp
74.7861 60.9658 mo
74.7861 62.6309 li
74.7861 62.6709 74.7695 62.6875 74.7354 62.6875 cv
74.2764 62.6875 li
74.2373 62.6875 74.2197 62.6709 74.2197 62.6309 cv
74.2197 58.6563 li
74.2197 58.6162 74.2373 58.5996 74.2764 58.5996 cv
75.3584 58.5996 li
76.2461 58.5996 76.7217 58.9736 76.7217 59.7822 cv
76.7217 60.4453 76.377 60.7969 75.8281 60.915 cv
76.8125 62.5967 li
76.8408 62.6475 76.8184 62.6875 76.7734 62.6875 cv
76.2412 62.6875 li
76.2129 62.6875 76.1963 62.6758 76.1904 62.6582 cv
75.2441 60.9658 li
74.7861 60.9658 li
cp
f
80.3662 62.6865 mo
80.3389 62.6865 80.3213 62.6758 80.3154 62.6533 cv
79.3701 59.5566 li
79.3701 62.6299 li
79.3701 62.6699 79.3535 62.6865 79.3135 62.6865 cv
78.8945 62.6865 li
78.8545 62.6865 78.8389 62.6699 78.8389 62.6299 cv
78.8389 58.6563 li
78.8389 58.6172 78.8545 58.5996 78.8945 58.5996 cv
79.5068 58.5996 li
79.5352 58.5996 79.5566 58.6113 79.5625 58.6338 cv
80.6221 62.0078 li
81.6855 58.6338 li
81.6963 58.6113 81.7197 58.5996 81.748 58.5996 cv
82.3086 58.5996 li
82.3428 58.5996 82.3594 58.6172 82.3594 58.6563 cv
82.3594 62.6299 li
82.3594 62.6699 82.3428 62.6865 82.3086 62.6865 cv
81.8838 62.6865 li
81.8447 62.6865 81.8271 62.6699 81.8271 62.6299 cv
81.8271 59.5566 li
80.8877 62.6533 li
80.8818 62.6758 80.8643 62.6865 80.8369 62.6865 cv
80.3662 62.6865 li
cp
f
86.4521 61.2441 mo
85.835 59.1719 li
85.2178 61.2441 li
86.4521 61.2441 li
cp
85.082 61.7188 mo
84.8164 62.6416 li
84.8047 62.6699 84.7822 62.6865 84.7539 62.6865 cv
84.3057 62.6865 li
84.2656 62.6865 84.25 62.6582 84.2656 62.6191 cv
85.501 58.6279 li
85.501 58.6113 85.5117 58.5996 85.54 58.5996 cv
86.1865 58.5996 li
86.2031 58.5996 86.2197 58.6113 86.2256 58.6338 cv
87.4482 62.6133 li
87.4648 62.665 87.4482 62.6865 87.4033 62.6865 cv
86.9102 62.6865 li
86.8818 62.6865 86.8594 62.6699 86.8545 62.6416 cv
86.5879 61.7188 li
85.082 61.7188 li
cp
f
89.8311 62.6865 mo
89.7969 62.6865 89.7793 62.6699 89.7793 62.6299 cv
89.7793 59.1211 li
89.7793 59.0918 89.7627 59.0752 89.7344 59.0752 cv
88.7549 59.0752 li
88.7158 59.0752 88.6982 59.0527 88.6982 59.0127 cv
88.6982 58.6563 li
88.6982 58.6172 88.7158 58.5996 88.7549 58.5996 cv
91.3701 58.5996 li
91.4092 58.5996 91.4268 58.6172 91.4268 58.6563 cv
91.4268 59.0127 li
91.4268 59.0527 91.4092 59.0752 91.3701 59.0752 cv
90.3857 59.0752 li
90.3564 59.0752 90.3457 59.0918 90.3457 59.1211 cv
90.3457 62.6299 li
90.3457 62.6699 90.3281 62.6865 90.2891 62.6865 cv
89.8311 62.6865 li
cp
f
93.8369 58.5996 mo
93.8711 58.5996 93.8887 58.6162 93.8887 58.6563 cv
93.8887 62.6309 li
93.8887 62.6699 93.8711 62.6865 93.8369 62.6865 cv
93.3799 62.6865 li
93.3389 62.6865 93.3223 62.6699 93.3223 62.6309 cv
93.3223 58.6563 li
93.3223 58.6162 93.3389 58.5996 93.3799 58.5996 cv
93.8369 58.5996 li
cp
f
97.6553 62.7266 mo
96.5 62.7266 95.9854 61.8779 95.9854 60.6377 cv
95.9854 59.415 96.5 58.5596 97.6553 58.5596 cv
98.04 58.5596 98.3232 58.6113 98.6406 58.7861 cv
98.668 58.8096 98.668 58.8438 98.6514 58.8828 cv
98.4824 59.1943 li
98.4648 59.2334 98.4307 59.2334 98.4023 59.2168 cv
98.1592 59.0986 98.0059 59.0469 97.6895 59.0469 cv
97.0557 59.0469 96.585 59.5566 96.585 60.6377 cv
96.585 61.7354 97.0439 62.2393 97.6895 62.2393 cv
97.9727 62.2393 98.1533 62.2002 98.4082 62.0645 cv
98.4424 62.0479 98.4648 62.0527 98.4824 62.0801 cv
98.6572 62.4033 li
98.6738 62.4375 98.668 62.4668 98.6406 62.4941 cv
98.3125 62.6758 98.0459 62.7266 97.6553 62.7266 cv
f
100.433 62.4434 mo
100.598 62.0645 li
100.614 62.0303 100.643 62.0195 100.677 62.0361 cv
100.914 62.1377 101.129 62.2344 101.548 62.2344 cv
101.984 62.2344 102.245 62.0195 102.245 61.6621 cv
102.245 61.3281 102.109 61.1582 101.476 60.8418 cv
100.733 60.4795 100.484 60.1455 100.484 59.6182 cv
100.484 59.0469 100.903 58.5605 101.679 58.5605 cv
102.137 58.5605 102.426 58.6055 102.766 58.752 cv
102.8 58.7695 102.812 58.792 102.794 58.8262 cv
102.635 59.1709 li
102.619 59.2109 102.596 59.2227 102.556 59.2051 cv
102.29 59.0986 102.069 59.0469 101.746 59.0469 cv
101.294 59.0469 101.096 59.3018 101.096 59.5967 cv
101.096 59.8848 101.181 60.0371 101.803 60.3438 cv
102.573 60.7227 102.856 61.0117 102.856 61.6172 cv
102.856 62.2744 102.397 62.7266 101.588 62.7266 cv
101.118 62.7266 100.801 62.6816 100.461 62.5068 cv
100.433 62.4883 100.422 62.4668 100.433 62.4434 cv
f
13.7793 69.1084 mo
13.1621 67.0371 li
12.5454 69.1084 li
13.7793 69.1084 li
cp
12.4092 69.584 mo
12.1431 70.5068 li
12.1323 70.5352 12.1094 70.5518 12.0815 70.5518 cv
11.6333 70.5518 li
11.5933 70.5518 11.5771 70.5234 11.5933 70.4834 cv
12.8281 66.4932 li
12.8281 66.4766 12.8394 66.4648 12.8672 66.4648 cv
13.5132 66.4648 li
13.5303 66.4648 13.5474 66.4766 13.5522 66.499 cv
14.7754 70.4785 li
14.7925 70.5303 14.7754 70.5518 14.7305 70.5518 cv
14.2373 70.5518 li
14.2095 70.5518 14.1865 70.5352 14.1812 70.5068 cv
13.9155 69.584 li
12.4092 69.584 li
cp
f
18.918 69.6123 mo
18.918 66.5215 li
18.918 66.4824 18.9351 66.4648 18.9692 66.4648 cv
19.416 66.4648 li
19.4561 66.4648 19.4731 66.4824 19.4731 66.5215 cv
19.4731 70.4951 li
19.4731 70.5352 19.4561 70.5527 19.416 70.5527 cv
18.9351 70.5527 li
18.8838 70.5527 18.873 70.5459 18.856 70.5068 cv
17.2368 67.4043 li
17.2368 70.4951 li
17.2368 70.5352 17.2202 70.5527 17.1802 70.5527 cv
16.7378 70.5527 li
16.6992 70.5527 16.6821 70.5352 16.6821 70.4951 cv
16.6821 66.5215 li
16.6821 66.4824 16.6992 66.4648 16.7378 66.4648 cv
17.2139 66.4648 li
17.2651 66.4648 17.2759 66.4707 17.293 66.5107 cv
18.918 69.6123 li
cp
f
22.7842 70.0771 mo
23.5542 70.0771 23.8882 69.6123 23.8882 68.5088 cv
23.8882 67.4043 23.5542 66.9404 22.7891 66.9404 cv
22.2974 66.9404 li
22.269 66.9404 22.2524 66.958 22.2524 66.9854 cv
22.2524 70.0313 li
22.2524 70.0596 22.2632 70.0771 22.291 70.0771 cv
22.7842 70.0771 li
cp
21.7422 70.5527 mo
21.7021 70.5527 21.686 70.5342 21.686 70.4961 cv
21.686 66.5215 li
21.686 66.4814 21.7021 66.4648 21.7422 66.4648 cv
22.7891 66.4648 li
23.9502 66.4648 24.4883 67.1104 24.4883 68.5088 cv
24.4883 69.8955 23.9502 70.5527 22.7891 70.5527 cv
21.7422 70.5527 li
cp
f
29.8618 66.4648 mo
29.896 66.4648 29.9126 66.4814 29.9126 66.5215 cv
29.9126 70.4961 li
29.9126 70.5352 29.896 70.5518 29.8618 70.5518 cv
29.4038 70.5518 li
29.3628 70.5518 29.3467 70.5352 29.3467 70.4961 cv
29.3467 66.5215 li
29.3467 66.4814 29.3628 66.4648 29.4038 66.4648 cv
29.8618 66.4648 li
cp
f
34.3594 69.6123 mo
34.3594 66.5215 li
34.3594 66.4824 34.3765 66.4648 34.4102 66.4648 cv
34.8574 66.4648 li
34.8975 66.4648 34.9146 66.4824 34.9146 66.5215 cv
34.9146 70.4951 li
34.9146 70.5352 34.8975 70.5527 34.8574 70.5527 cv
34.3765 70.5527 li
34.3252 70.5527 34.3145 70.5459 34.2974 70.5068 cv
32.6782 67.4043 li
32.6782 70.4951 li
32.6782 70.5352 32.6616 70.5527 32.6216 70.5527 cv
32.1792 70.5527 li
32.1406 70.5527 32.1235 70.5352 32.1235 70.4951 cv
32.1235 66.5215 li
32.1235 66.4824 32.1406 66.4648 32.1792 66.4648 cv
32.6553 66.4648 li
32.7065 66.4648 32.7173 66.4707 32.7344 66.5107 cv
34.3594 69.6123 li
cp
f
37.6929 68.2705 mo
38.9609 68.2705 li
39.001 68.2705 39.0229 68.2881 39.0229 68.3281 cv
39.0229 68.6904 li
39.0229 68.7285 39.001 68.7471 38.9609 68.7471 cv
37.6929 68.7471 li
37.6929 70.4961 li
37.6929 70.5352 37.6758 70.5518 37.6421 70.5518 cv
37.1841 70.5518 li
37.144 70.5518 37.127 70.5352 37.127 70.4961 cv
37.127 66.5205 li
37.127 66.4824 37.144 66.4648 37.1841 66.4648 cv
39.3228 66.4648 li
39.3628 66.4648 39.3848 66.4824 39.3848 66.5205 cv
39.3848 66.8779 li
39.3848 66.918 39.3628 66.9404 39.3228 66.9404 cv
37.7378 66.9404 li
37.71 66.9404 37.6929 66.958 37.6929 66.9863 cv
37.6929 68.2705 li
cp
f
42.6841 66.9004 mo
42.0103 66.9004 41.6592 67.4268 41.6592 68.5088 cv
41.6592 69.5898 42.0103 70.1162 42.6841 70.1162 cv
43.3462 70.1162 43.7031 69.5898 43.7031 68.5088 cv
43.7031 67.4268 43.3462 66.9004 42.6841 66.9004 cv
42.6841 70.5918 mo
41.4443 70.5918 41.0649 69.7598 41.0649 68.5088 cv
41.0649 67.2412 41.4331 66.4248 42.6841 66.4248 cv
43.918 66.4248 44.2969 67.2412 44.2969 68.5088 cv
44.2969 69.7598 43.918 70.5918 42.6841 70.5918 cv
f
46.9067 68.3896 mo
47.4155 68.3896 li
47.9595 68.3896 48.2427 68.1855 48.2427 67.6592 cv
48.2427 67.1387 47.9707 66.9404 47.4277 66.9404 cv
46.9517 66.9404 li
46.9238 66.9404 46.9067 66.958 46.9067 66.9854 cv
46.9067 68.3896 li
cp
46.9067 68.8311 mo
46.9067 70.4961 li
46.9067 70.5361 46.8896 70.5527 46.8555 70.5527 cv
46.3975 70.5527 li
46.3579 70.5527 46.3408 70.5361 46.3408 70.4961 cv
46.3408 66.5215 li
46.3408 66.4814 46.3579 66.4648 46.3975 66.4648 cv
47.4785 66.4648 li
48.3667 66.4648 48.8428 66.8389 48.8428 67.6475 cv
48.8428 68.3105 48.4976 68.6621 47.9487 68.7803 cv
48.9336 70.4619 li
48.9619 70.5127 48.9385 70.5527 48.8936 70.5527 cv
48.3618 70.5527 li
48.3335 70.5527 48.3169 70.541 48.3105 70.5234 cv
47.3647 68.8311 li
46.9067 68.8311 li
cp
f
52.4873 70.5527 mo
52.4595 70.5527 52.4424 70.541 52.4365 70.5186 cv
51.4902 67.4219 li
51.4902 70.4951 li
51.4902 70.5352 51.4741 70.5527 51.4341 70.5527 cv
51.0151 70.5527 li
50.9751 70.5527 50.9595 70.5352 50.9595 70.4951 cv
50.9595 66.5215 li
50.9595 66.4824 50.9751 66.4648 51.0151 66.4648 cv
51.6274 66.4648 li
51.6553 66.4648 51.6772 66.4766 51.6831 66.499 cv
52.7422 69.873 li
53.8062 66.499 li
53.8174 66.4766 53.8403 66.4648 53.8682 66.4648 cv
54.4292 66.4648 li
54.4634 66.4648 54.4805 66.4824 54.4805 66.5215 cv
54.4805 70.4951 li
54.4805 70.5352 54.4634 70.5527 54.4292 70.5527 cv
54.0044 70.5527 li
53.9653 70.5527 53.9473 70.5352 53.9473 70.4951 cv
53.9473 67.4219 li
53.0083 70.5186 li
53.0024 70.541 52.9854 70.5527 52.9575 70.5527 cv
52.4873 70.5527 li
cp
f
58.5728 69.1084 mo
57.9556 67.0371 li
57.3389 69.1084 li
58.5728 69.1084 li
cp
57.2026 69.584 mo
56.937 70.5068 li
56.9258 70.5352 56.9028 70.5518 56.875 70.5518 cv
56.4268 70.5518 li
56.3877 70.5518 56.3706 70.5234 56.3877 70.4834 cv
57.6216 66.4932 li
57.6216 66.4766 57.6328 66.4648 57.6606 66.4648 cv
58.3066 66.4648 li
58.3237 66.4648 58.3408 66.4766 58.3457 66.499 cv
59.5688 70.4785 li
59.5859 70.5303 59.5688 70.5518 59.5239 70.5518 cv
59.0308 70.5518 li
59.0029 70.5518 58.98 70.5352 58.9746 70.5068 cv
58.709 69.584 li
57.2026 69.584 li
cp
f
61.9512 70.5527 mo
61.917 70.5527 61.9004 70.5352 61.9004 70.4951 cv
61.9004 66.9863 li
61.9004 66.957 61.8833 66.9404 61.855 66.9404 cv
60.875 66.9404 li
60.8364 66.9404 60.8193 66.918 60.8193 66.8779 cv
60.8193 66.5215 li
60.8193 66.4824 60.8364 66.4648 60.875 66.4648 cv
63.4912 66.4648 li
63.5303 66.4648 63.5474 66.4824 63.5474 66.5215 cv
63.5474 66.8779 li
63.5474 66.918 63.5303 66.9404 63.4912 66.9404 cv
62.5063 66.9404 li
62.4771 66.9404 62.4663 66.957 62.4663 66.9863 cv
62.4663 70.4951 li
62.4663 70.5352 62.4492 70.5527 62.4092 70.5527 cv
61.9512 70.5527 li
cp
f
65.9634 66.4648 mo
65.9976 66.4648 66.0142 66.4814 66.0142 66.5215 cv
66.0142 70.4961 li
66.0142 70.5352 65.9976 70.5518 65.9634 70.5518 cv
65.5054 70.5518 li
65.4644 70.5518 65.4482 70.5352 65.4482 70.4961 cv
65.4482 66.5215 li
65.4482 66.4814 65.4644 66.4648 65.5054 66.4648 cv
65.9634 66.4648 li
cp
f
69.6738 66.9004 mo
69 66.9004 68.6489 67.4268 68.6489 68.5088 cv
68.6489 69.5898 69 70.1162 69.6738 70.1162 cv
70.3359 70.1162 70.6929 69.5898 70.6929 68.5088 cv
70.6929 67.4268 70.3359 66.9004 69.6738 66.9004 cv
69.6738 70.5918 mo
68.4336 70.5918 68.0547 69.7598 68.0547 68.5088 cv
68.0547 67.2412 68.4229 66.4248 69.6738 66.4248 cv
70.9077 66.4248 71.2866 67.2412 71.2866 68.5088 cv
71.2866 69.7598 70.9077 70.5918 69.6738 70.5918 cv
f
75.5664 69.6123 mo
75.5664 66.5215 li
75.5664 66.4824 75.583 66.4648 75.6172 66.4648 cv
76.0645 66.4648 li
76.1045 66.4648 76.1211 66.4824 76.1211 66.5215 cv
76.1211 70.4951 li
76.1211 70.5352 76.1045 70.5527 76.0645 70.5527 cv
75.583 70.5527 li
75.5322 70.5527 75.5215 70.5459 75.5049 70.5068 cv
73.8857 67.4043 li
73.8857 70.4951 li
73.8857 70.5352 73.8682 70.5527 73.8281 70.5527 cv
73.3867 70.5527 li
73.3477 70.5527 73.3301 70.5352 73.3301 70.4951 cv
73.3301 66.5215 li
73.3301 66.4824 73.3477 66.4648 73.3867 66.4648 cv
73.8623 66.4648 li
73.9131 66.4648 73.9248 66.4707 73.9414 66.5107 cv
75.5664 69.6123 li
cp
f
81.9707 70.5527 mo
81.9365 70.5527 81.9199 70.5352 81.9199 70.4951 cv
81.9199 66.9863 li
81.9199 66.957 81.9023 66.9404 81.875 66.9404 cv
80.8945 66.9404 li
80.8555 66.9404 80.8389 66.918 80.8389 66.8779 cv
80.8389 66.5215 li
80.8389 66.4824 80.8555 66.4648 80.8945 66.4648 cv
83.5107 66.4648 li
83.5498 66.4648 83.5664 66.4824 83.5664 66.5215 cv
83.5664 66.8779 li
83.5664 66.918 83.5498 66.9404 83.5107 66.9404 cv
82.5254 66.9404 li
82.4971 66.9404 82.4854 66.957 82.4854 66.9863 cv
82.4854 70.4951 li
82.4854 70.5352 82.4688 70.5527 82.4287 70.5527 cv
81.9707 70.5527 li
cp
f
86.0342 68.2705 mo
87.3594 68.2705 li
87.3984 68.2705 87.4209 68.2881 87.4209 68.3281 cv
87.4209 68.6904 li
87.4209 68.7285 87.3984 68.7471 87.3594 68.7471 cv
86.0342 68.7471 li
86.0342 70.0313 li
86.0342 70.0596 86.0449 70.0771 86.0742 70.0771 cv
87.7217 70.0771 li
87.7607 70.0771 87.7832 70.0938 87.7832 70.1328 cv
87.7832 70.4961 li
87.7832 70.5352 87.7607 70.5518 87.7217 70.5518 cv
85.5244 70.5518 li
85.4854 70.5518 85.4678 70.5352 85.4678 70.4961 cv
85.4678 66.5205 li
85.4678 66.4824 85.4854 66.4648 85.5244 66.4648 cv
87.7217 66.4648 li
87.7607 66.4648 87.7832 66.4824 87.7832 66.5205 cv
87.7832 66.8779 li
87.7832 66.918 87.7607 66.9404 87.7217 66.9404 cv
86.0742 66.9404 li
86.0449 66.9404 86.0342 66.958 86.0342 66.9863 cv
86.0342 68.2705 li
cp
f
91.3262 70.5918 mo
90.1709 70.5918 89.6553 69.7432 89.6553 68.5029 cv
89.6553 67.2793 90.1709 66.4248 91.3262 66.4248 cv
91.7109 66.4248 91.9941 66.4766 92.3105 66.6514 cv
92.3389 66.6748 92.3389 66.709 92.3213 66.748 cv
92.1523 67.0596 li
92.1357 67.0986 92.1006 67.0986 92.0723 67.082 cv
91.8301 66.9639 91.6768 66.9121 91.3594 66.9121 cv
90.7256 66.9121 90.2559 67.4219 90.2559 68.5029 cv
90.2559 69.6006 90.7148 70.1045 91.3594 70.1045 cv
91.6426 70.1045 91.8232 70.0654 92.0791 69.9297 cv
92.1123 69.9131 92.1357 69.918 92.1523 69.9453 cv
92.3281 70.2686 li
92.3447 70.3027 92.3389 70.332 92.3105 70.3594 cv
91.9824 70.541 91.7168 70.5918 91.3262 70.5918 cv
f
94.8799 68.7461 mo
94.8516 68.7461 94.834 68.7637 94.834 68.792 cv
94.834 70.4951 li
94.834 70.5352 94.8164 70.5527 94.7832 70.5527 cv
94.3242 70.5527 li
94.2842 70.5527 94.2686 70.5352 94.2686 70.4951 cv
94.2686 66.5215 li
94.2686 66.4814 94.2842 66.4648 94.3242 66.4648 cv
94.7832 66.4648 li
94.8164 66.4648 94.834 66.4814 94.834 66.5215 cv
94.834 68.2256 li
94.834 68.2539 94.8516 68.2705 94.8799 68.2705 cv
96.4424 68.2705 li
96.4707 68.2705 96.4863 68.2539 96.4863 68.2256 cv
96.4863 66.5215 li
96.4863 66.4814 96.5049 66.4648 96.543 66.4648 cv
96.9961 66.4648 li
97.0361 66.4648 97.0537 66.4814 97.0537 66.5215 cv
97.0537 70.4951 li
97.0537 70.5352 97.0361 70.5527 96.9961 70.5527 cv
96.543 70.5527 li
96.5049 70.5527 96.4863 70.5352 96.4863 70.4951 cv
96.4863 68.792 li
96.4863 68.7637 96.4707 68.7461 96.4424 68.7461 cv
94.8799 68.7461 li
cp
f
101.502 69.6123 mo
101.502 66.5215 li
101.502 66.4824 101.519 66.4648 101.553 66.4648 cv
101.999 66.4648 li
102.039 66.4648 102.057 66.4824 102.057 66.5215 cv
102.057 70.4951 li
102.057 70.5352 102.039 70.5527 101.999 70.5527 cv
101.519 70.5527 li
101.468 70.5527 101.456 70.5459 101.439 70.5068 cv
99.8203 67.4043 li
99.8203 70.4951 li
99.8203 70.5352 99.8037 70.5527 99.7637 70.5527 cv
99.3223 70.5527 li
99.2822 70.5527 99.2656 70.5352 99.2656 70.4951 cv
99.2656 66.5215 li
99.2656 66.4824 99.2822 66.4648 99.3223 66.4648 cv
99.7979 66.4648 li
99.8486 66.4648 99.8594 66.4707 99.877 66.5107 cv
101.502 69.6123 li
cp
f
105.719 66.9004 mo
105.045 66.9004 104.693 67.4268 104.693 68.5088 cv
104.693 69.5898 105.045 70.1162 105.719 70.1162 cv
106.381 70.1162 106.738 69.5898 106.738 68.5088 cv
106.738 67.4268 106.381 66.9004 105.719 66.9004 cv
105.719 70.5918 mo
104.479 70.5918 104.1 69.7598 104.1 68.5088 cv
104.1 67.2412 104.468 66.4248 105.719 66.4248 cv
106.953 66.4248 107.332 67.2412 107.332 68.5088 cv
107.332 69.7598 106.953 70.5918 105.719 70.5918 cv
f
109.94 70.0313 mo
109.94 70.0596 109.952 70.0762 109.98 70.0762 cv
111.549 70.0762 li
111.588 70.0762 111.605 70.0996 111.605 70.1396 cv
111.605 70.4951 li
111.605 70.5352 111.588 70.5527 111.549 70.5527 cv
109.432 70.5527 li
109.392 70.5527 109.375 70.5352 109.375 70.4951 cv
109.375 66.5215 li
109.375 66.4824 109.392 66.4648 109.432 66.4648 cv
109.89 66.4648 li
109.924 66.4648 109.94 66.4824 109.94 66.5215 cv
109.94 70.0313 li
cp
f
114.694 66.9004 mo
114.021 66.9004 113.67 67.4268 113.67 68.5088 cv
113.67 69.5898 114.021 70.1162 114.694 70.1162 cv
115.356 70.1162 115.714 69.5898 115.714 68.5088 cv
115.714 67.4268 115.356 66.9004 114.694 66.9004 cv
114.694 70.5918 mo
113.455 70.5918 113.076 69.7598 113.076 68.5088 cv
113.076 67.2412 113.443 66.4248 114.694 66.4248 cv
115.929 66.4248 116.308 67.2412 116.308 68.5088 cv
116.308 69.7598 115.929 70.5918 114.694 70.5918 cv
f
120.439 68.916 mo
119.76 68.916 li
119.721 68.916 119.704 68.8994 119.704 68.8594 cv
119.704 68.5088 li
119.704 68.4688 119.721 68.4521 119.76 68.4521 cv
120.91 68.4521 li
120.949 68.4521 120.966 68.4688 120.966 68.5088 cv
120.966 70.2754 li
120.966 70.3145 120.955 70.3369 120.932 70.3486 cv
120.615 70.5127 120.287 70.5918 119.856 70.5918 cv
118.702 70.5918 118.181 69.7314 118.181 68.5029 cv
118.181 67.2803 118.702 66.4248 119.856 66.4248 cv
120.236 66.4248 120.524 66.4775 120.842 66.6523 cv
120.87 66.6738 120.87 66.708 120.853 66.748 cv
120.688 67.0605 li
120.666 67.0986 120.638 67.1045 120.604 67.082 cv
120.36 66.9629 120.208 66.9121 119.891 66.9121 cv
119.257 66.9121 118.781 67.4219 118.781 68.5029 cv
118.781 69.6006 119.245 70.1221 119.874 70.1221 cv
120.151 70.1221 120.287 70.0713 120.439 70.0088 cv
120.439 68.916 li
cp
f
123.523 66.4648 mo
123.558 66.4648 123.575 66.4814 123.575 66.5215 cv
123.575 70.4961 li
123.575 70.5352 123.558 70.5518 123.523 70.5518 cv
123.065 70.5518 li
123.024 70.5518 123.009 70.5352 123.009 70.4961 cv
123.009 66.5215 li
123.009 66.4814 123.024 66.4648 123.065 66.4648 cv
123.523 66.4648 li
cp
f
126.352 68.2705 mo
127.677 68.2705 li
127.716 68.2705 127.738 68.2881 127.738 68.3281 cv
127.738 68.6904 li
127.738 68.7285 127.716 68.7471 127.677 68.7471 cv
126.352 68.7471 li
126.352 70.0313 li
126.352 70.0596 126.362 70.0771 126.392 70.0771 cv
128.039 70.0771 li
128.078 70.0771 128.101 70.0938 128.101 70.1328 cv
128.101 70.4961 li
128.101 70.5352 128.078 70.5518 128.039 70.5518 cv
125.842 70.5518 li
125.803 70.5518 125.785 70.5352 125.785 70.4961 cv
125.785 66.5205 li
125.785 66.4824 125.803 66.4648 125.842 66.4648 cv
128.039 66.4648 li
128.078 66.4648 128.101 66.4824 128.101 66.5205 cv
128.101 66.8779 li
128.101 66.918 128.078 66.9404 128.039 66.9404 cv
126.392 66.9404 li
126.362 66.9404 126.352 66.958 126.352 66.9863 cv
126.352 68.2705 li
cp
f
129.922 70.3086 mo
130.087 69.9297 li
130.103 69.8955 130.131 69.8848 130.166 69.9014 cv
130.403 70.0029 130.618 70.0996 131.037 70.0996 cv
131.473 70.0996 131.734 69.8848 131.734 69.5273 cv
131.734 69.1934 131.598 69.0234 130.964 68.707 cv
130.222 68.3447 129.973 68.0107 129.973 67.4834 cv
129.973 66.9121 130.392 66.4258 131.168 66.4258 cv
131.626 66.4258 131.915 66.4707 132.255 66.6172 cv
132.289 66.6348 132.3 66.6572 132.283 66.6914 cv
132.124 67.0361 li
132.107 67.0762 132.085 67.0879 132.045 67.0703 cv
131.779 66.9639 131.558 66.9121 131.235 66.9121 cv
130.783 66.9121 130.585 67.167 130.585 67.4619 cv
130.585 67.75 130.67 67.9023 131.292 68.209 cv
132.062 68.5879 132.345 68.877 132.345 69.4824 cv
132.345 70.1396 131.886 70.5918 131.077 70.5918 cv
130.606 70.5918 130.29 70.5469 129.95 70.3711 cv
129.922 70.3535 129.911 70.332 129.922 70.3086 cv
f
13.0371 22.9771 mo
13.8833 22.9771 14.5713 22.291 14.5713 21.4438 cv
14.5713 20.5942 13.8833 19.9131 13.0371 19.9131 cv
12.1899 19.9131 11.5039 20.5942 11.5039 21.4438 cv
11.5039 22.291 12.1899 22.9771 13.0371 22.9771 cv
.9 0 0 .2 cmyk
f
13.0371 31.3989 mo
13.8833 31.3989 14.5713 30.7139 14.5713 29.8682 cv
14.5713 29.022 13.8833 28.333 13.0371 28.333 cv
12.1899 28.333 11.5039 29.022 11.5039 29.8682 cv
11.5039 30.7139 12.1899 31.3989 13.0371 31.3989 cv
f
21.4604 22.9771 mo
22.3076 22.9771 22.9922 22.291 22.9922 21.4438 cv
22.9922 20.5942 22.3076 19.9131 21.4604 19.9131 cv
20.6123 19.9131 19.9263 20.5942 19.9263 21.4438 cv
19.9263 22.291 20.6123 22.9771 21.4604 22.9771 cv
f
21.4604 31.3989 mo
22.3076 31.3989 22.9922 30.7139 22.9922 29.8682 cv
22.9922 29.022 22.3076 28.333 21.4604 28.333 cv
20.6123 28.333 19.9263 29.022 19.9263 29.8682 cv
19.9263 30.7139 20.6123 31.3989 21.4604 31.3989 cv
f
29.8804 22.9771 mo
30.7305 22.9771 31.4165 22.291 31.4165 21.4438 cv
31.4165 20.5942 30.7305 19.9131 29.8804 19.9131 cv
29.0332 19.9131 28.3506 20.5942 28.3506 21.4438 cv
28.3506 22.291 29.0332 22.9771 29.8804 22.9771 cv
f
13.0371 14.5532 mo
13.8833 14.5532 14.5713 13.8672 14.5713 13.0205 cv
14.5713 12.1724 13.8833 11.4893 13.0371 11.4893 cv
12.1899 11.4893 11.5039 12.1724 11.5039 13.0205 cv
11.5039 13.8672 12.1899 14.5532 13.0371 14.5532 cv
f
21.4604 14.5532 mo
22.3076 14.5532 22.9922 13.8672 22.9922 13.0205 cv
22.9922 12.1724 22.3076 11.4893 21.4604 11.4893 cv
20.6123 11.4893 19.9263 12.1724 19.9263 13.0205 cv
19.9263 13.8672 20.6123 14.5532 21.4604 14.5532 cv
f
29.8804 14.5532 mo
30.7305 14.5532 31.4165 13.8672 31.4165 13.0205 cv
31.4165 12.1724 30.7305 11.4893 29.8804 11.4893 cv
29.0332 11.4893 28.3506 12.1724 28.3506 13.0205 cv
28.3506 13.8672 29.0332 14.5532 29.8804 14.5532 cv
f
29.8804 31.3989 mo
30.7305 31.3989 31.4165 30.7139 31.4165 29.8682 cv
31.4165 29.022 30.7305 28.333 29.8804 28.333 cv
29.0332 28.333 28.3506 29.022 28.3506 29.8682 cv
28.3506 30.7139 29.0332 31.3989 29.8804 31.3989 cv
f
38.3062 22.9771 mo
39.1523 22.9771 39.8394 22.291 39.8394 21.4438 cv
39.8394 20.5942 39.1523 19.9131 38.3062 19.9131 cv
37.458 19.9131 36.7744 20.5942 36.7744 21.4438 cv
36.7744 22.291 37.458 22.9771 38.3062 22.9771 cv
f
38.3062 31.3989 mo
39.1523 31.3989 39.8394 30.7139 39.8394 29.8682 cv
39.8394 29.022 39.1523 28.333 38.3062 28.333 cv
37.458 28.333 36.7744 29.022 36.7744 29.8682 cv
36.7744 30.7139 37.458 31.3989 38.3062 31.3989 cv
f
38.3062 14.5532 mo
39.1523 14.5532 39.8394 13.8672 39.8394 13.0181 cv
39.8394 12.1753 39.1523 11.4873 38.3062 11.4873 cv
37.458 11.4873 36.7744 12.1753 36.7744 13.0181 cv
36.7744 13.8672 37.458 14.5532 38.3062 14.5532 cv
f
48.6128 24.1841 mo
48.6128 24.127 48.646 24.0942 48.7026 24.0942 cv
51.877 24.0942 li
51.9556 24.0942 52.001 24.0479 52.001 23.9692 cv
52.001 23.2549 li
52.001 23.1763 51.9556 23.1421 51.877 23.1421 cv
47.5918 23.1421 li
47.5127 23.1421 47.479 23.1763 47.479 23.2549 cv
47.479 31.2109 li
47.479 31.29 47.5127 31.3252 47.5918 31.3252 cv
48.5098 31.3252 li
48.5786 31.3252 48.6128 31.29 48.6128 31.2109 cv
48.6128 27.709 li
51.1509 27.709 li
51.23 27.709 51.2759 27.6753 51.2759 27.5962 cv
51.2759 26.8711 li
51.2759 26.791 51.23 26.7568 51.1509 26.7568 cv
48.6128 26.7568 li
48.6128 24.1841 li
cp
55.8086 23.1421 mo
55.729 23.1421 55.6958 23.1763 55.6958 23.2549 cv
55.6958 31.2109 li
55.6958 31.29 55.729 31.3252 55.8086 31.3252 cv
56.7266 31.3252 li
56.7959 31.3252 56.8286 31.29 56.8286 31.2109 cv
56.8286 23.2549 li
56.8286 23.1763 56.7959 23.1421 56.7266 23.1421 cv
55.8086 23.1421 li
cp
61.3618 23.1421 mo
61.2827 23.1421 61.249 23.1763 61.249 23.2549 cv
61.249 31.2109 li
61.249 31.29 61.2827 31.3252 61.3618 31.3252 cv
62.2798 31.3252 li
62.3477 31.3252 62.3828 31.29 62.3828 31.2109 cv
62.3828 23.2549 li
62.3828 23.1763 62.3477 23.1421 62.2798 23.1421 cv
61.3618 23.1421 li
cp
69.3628 31.3252 mo
69.4429 31.3252 69.4766 31.29 69.4766 31.2109 cv
69.4766 24.1841 li
69.4766 24.127 69.5 24.0942 69.5547 24.0942 cv
71.5278 24.0942 li
71.6069 24.0942 71.6406 24.0479 71.6406 23.9692 cv
71.6406 23.2549 li
71.6406 23.1763 71.6069 23.1421 71.5278 23.1421 cv
66.293 23.1421 li
66.2129 23.1421 66.1777 23.1763 66.1777 23.2549 cv
66.1777 23.9692 li
66.1777 24.0479 66.2129 24.0942 66.293 24.0942 cv
68.2529 24.0942 li
68.3086 24.0942 68.3418 24.127 68.3418 24.1841 cv
68.3418 31.2109 li
68.3418 31.29 68.3779 31.3252 68.4448 31.3252 cv
69.3628 31.3252 li
cp
0 0 0 1 cmyk
f
47.2183 19.395 mo
47.9893 19.791 48.7261 19.8711 49.6665 19.8711 cv
51.4111 19.8711 52.5332 18.998 52.5332 17.4111 cv
52.5332 16.2549 51.9893 15.5522 50.5723 14.9521 cv
49.3613 14.4639 49.1914 14.249 49.1914 13.7949 cv
49.1914 13.3311 49.5073 13.0142 50.2334 13.0142 cv
50.7661 13.0142 51.2192 13.104 51.6602 13.2861 cv
51.7632 13.3311 51.8301 13.2861 51.8643 13.207 cv
52.3975 12.1641 li
52.4321 12.084 52.4321 12.0049 52.3291 11.9712 cv
51.5024 11.6079 51.0264 11.5303 49.9263 11.5303 cv
48.2393 11.5303 47.2412 12.5151 47.2412 13.8408 cv
47.2412 15.0532 47.8535 15.8013 49.2705 16.4028 cv
50.3682 16.8901 50.5952 17.127 50.5952 17.5923 cv
50.5952 18.0908 50.1885 18.3853 49.5073 18.3853 cv
48.7261 18.3853 48.3291 18.2271 47.8535 18.0122 cv
47.7622 17.978 47.6953 18.0122 47.6602 18.0908 cv
47.1504 19.2583 li
47.1284 19.3032 47.1504 19.3491 47.2183 19.395 cv
59.7642 19.791 mo
59.8652 19.791 59.9111 19.7461 59.9111 19.644 cv
59.9111 13.1499 li
59.9111 13.0933 59.9341 13.0591 59.9902 13.0591 cv
61.9175 13.0591 li
62.0083 13.0591 62.0532 13.0142 62.0532 12.9121 cv
62.0532 11.7559 li
62.0532 11.6543 62.0083 11.6079 61.9175 11.6079 cv
56.1372 11.6079 li
56.0352 11.6079 55.9902 11.6543 55.9902 11.7559 cv
55.9902 12.9121 li
55.9902 13.0142 56.0352 13.0591 56.1372 13.0591 cv
58.0303 13.0591 li
58.0864 13.0591 58.1201 13.0933 58.1201 13.1499 cv
58.1201 19.644 li
58.1201 19.7461 58.1665 19.791 58.2451 19.791 cv
59.7642 19.791 li
cp
72.0947 11.7559 mo
72.0947 11.6543 72.0488 11.6079 71.9707 11.6079 cv
70.4404 11.6079 li
70.3501 11.6079 70.3042 11.6543 70.3042 11.7559 cv
70.3042 17.2183 li
70.3042 18.0229 69.8623 18.4199 68.9673 18.4199 cv
68.0825 18.4199 67.6411 18.0229 67.6411 17.2183 cv
67.6411 11.7559 li
67.6411 11.6543 67.5952 11.6079 67.5161 11.6079 cv
65.9971 11.6079 li
65.8955 11.6079 65.8501 11.6543 65.8501 11.7559 cv
65.8501 17.2642 li
65.8501 18.8623 66.7451 19.8711 68.9673 19.8711 cv
71.1992 19.8711 72.0947 18.8623 72.0947 17.2642 cv
72.0947 11.7559 li
cp
f
grestore
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 14.0%%AI8_CreatorVersion: 14.0.0%%For: (Juraj Blako) ()%%Title: (STU-FIIT-anfv.eps)%%CreationDate: 9.10.2012 17:12%%Canvassize: 16383%AI9_DataStream%Gb!R&pO;BgZN,;YJ9QMhKFVmeP!Gt#!!sp4?3i-95_'^(qci6EoB]PtEl0f4m(:#RZ[N:d--_B<UR=ssamIBu<n%%]3m>kJPB9^\%+3h(939tOqbG3h._B>6QZdEI9)/$f#S"N'e_Q:6C),-A+ERl'[(AZWo-8(J,r1D9aR@A;E@u!-m)/TbVaZu5M5FnX7VSX$p8Mfbh%C,G0^YC=%b1$N6E(jsT:&WF=jB/fm1i,APiEn["aqL\tP3p9rMJE-l-LpbY!k$Y_&U]T&-Wr1CG<D=&J5Fau=TYcZ:.pQDhg+\Qu%j:+(_l(@_3FtamfQ==JeRSD[e&inrfrmMJ"$T/GsM$J#AB5.m)k*+)2J63P]_fUiu4#o>qd>=h$=XjG3JoZWKQ4CqQQ>qWr2BM#?%<7K#YV'7HXKqiZ+L"V*n7YAI>cDs]Y1gSBB?^PPe;%Kup.k[<drrN%m3KBj'-Vh3X9a9V5FL8uVb$HE6dApE"0M+;C\\'W\%&GEU%!6Q\7d-?G)_%Oi1CpJZ:8iku8")-"akKcCm&CflqBkqmQ-k>dPGaO2mNDd9$OS)J.Fsa/TPE$kU5RM3P+lfHA-Un*P6!sg'&0#fq%Ld55c%7elX-q;V30ZV2.c4J"rBhLj.#"qQ[*;(%4M)!:8r]h2+a&W-Qj?KdJ@)d4IQqB4;P+03ai.-,Y2)0^6(D,_CB*:1c1B9E'%N!&'[5cU]8cE`XUo'n^"/._a?bl([2q5(kKbJI&HLS'D+r64?G>F(!#/.5BZ(8eAg:)*n6)OKH/R#C.d'@4R$4:cN']H@cQM$2%d%8AI=on-;T6&hmB2!HZ(an.Xs,k@(N@*gY%5@7i]oo*>Ck'a1+`V$-ms$N_r5.E;!hH8%gY$;6P((+:$p$$3pD_,$F+eqqljVnj:f%:RDC<#_'X:'2IJkYYO[$5/A/R:C%9u#t'G)JtK:(n/K)qFb2S-2_fcK$e>]7_E<DMhi[V`P[bbE/n-HL:L"Oa*)ho4a0]:AOE/c=%,R==$\R>Bo-\R.W&D%hui>.('0Ggf4Bjo4#>Sbm$I_mI745Bi)'2oCu^e^=*edm5h<l@mfq24]0N'mjmj[=PgRpl.If3p;U2o6A9%F%e`m*7KW3@`Y@YE";FDo>'&lab7'SV/`VW.]a`iKXn=7_tmf5i3Mhck(0p]\;=a[^4SG$0js5m1/)548/n?E9+$sgdP".\@_Q@;%0\8$cbVr'QBb=6%9KUHeY[cn,4ANqHQu^t<Yr(K!a1T5""S@K2=6]+^N5JA9X4"<[T+ou!dS8e/OZurOOWi0%Pu]5:<n[RP6oYKG%/)28S&pajj$l>8+BaXgTDla[fl&T7lMXlc,TLjccauB<@\>)q!7et&RYo%pj^@>PmNh>?OJibU`A[=?bq8Rop*.Cr&nXm^).,[&,%2uY<Cn[%eGs![[RlZ:^%n.W8]IO7kc)q9r-nm#-B#`t[UT/>U`Pm+q$W$#WeDt&[?/JF2b3U(BC*mH%ImhksC/&VeJ35u#ln=*M\%^PN]3EEF.Z&dfVC,G$A_KrcD^&Z>b2A9e09"'@PXKJ7s))E\&F$e'>+JVa\QoFLmT1%Gae&U*f*;?R:BcsJV0TK*/pKSaFIi((-C%$.TeR;+6qK3=/bQ!;-?S3=`$CWS)N\!H8VU&8"60_?5'Mp_2gEImD1F+c^f3E&3qO\,^m^MhrV04Fs8]lu9jdI$W7q:kWkV;8ME<%eM&A($?1(+E$8j:<7jMK(9*oE0#W`a%dFIC-X\FdZN_KI"Z_:k!E+`!Scrt)C)rA@4Q16;_,J`4i=b(',Xmm7+C7=)PM]K6OPBgI%C_XsF<c/74DPC8b2d"X-C([m9TUpoq(ru\O,RupO0nlhgPQ;&TLXM_Y'I&r8^E>(fZls1&6p9HKi"YNf(^'Sg15#H.PYIYUedZX6%ndX33oMF$Qpb,B7iGtkj(1Y4kPoR:;EI11ne6\:`83B=]OHo\OOWjoAjb3I<@TgaSQ4=1gb@/\Z2?ZLBR"\^Nl62O9=R'TQ0)$ZD%<IuVrJmh$<1IWQN!'4ppI2gY*[Z/fhlu8.0/'4sqDm]-==XXn4Tl'lBUP^>DS3fHkICL!u%Q,?)rf&lTKq+9JU;;$`Ik/)GE_WZ]%$TXqUEOum4MId+g"8EX)%-/>X[=n9N^V[;1SE(]l*JP$<*H%sNM0u$1W$We!U2;SJdR+ltWE=<ic3Uq6&KaiMWjIq>gP&H1o>&dB%pQ.-I'!<a<KeWp&=sPTV'<J[=[3Q#Mq]\/.:1N?k-hSFhO"#>32on?rGd9g$:l,>%:lHZ$EQiJMT*gdXb6]9[)dJ"DX1Tal"EP:>%-^:p$KE]b]\PIH;h>lAp:tLfY)s3CA-3uaArs3eH;[HFoMmSeuMCS#/._&lE@2b!2+rhlVMQm_@7H?t%bp\lW;Grtt9;bhY'm[\K%7WKss&[`4H1*K#Mq@FTGW.ZkSV$VSP8,9"#T_p!^9VIdE2&-89#&7QYb":F=0J$U'fRXi>`43'b"'UUp:ar9?aHr]\i^g[*3?b[<%gRGR_+u+s[72(PY_"+>c[4"\L5IUAi16D1Lne"sa7d;Y4Fb0Mnl(JY8P^Z^If80&+@KVFX+FP'Da-MPR==0p;>p`%:Jrs8>nNnpG%J=Cdt*8u`H;[?!fc,qo]r..Yb'$2sZF>.]78Z=%iRn=dA4GU<kg'Vm1jHA5QBEq'KY+<KO,cR_48**c#8p0/n?Cfjq=lbL'eg?Vk%>"B#5b(sr`Psk:AC^HnAdTMOO"pf6FQJ)X4`VdU1\DC>;bP"NX/)Vf&<j5o!\&ajH.n/sc*"]RPS+p"%8jQUt>)%spIT&dNXKMQ3%gqU'H,5[8'IEnij_083"b@LsP"W>hHMZ(JX6&S$DVlc)U0,<;pq1n:5pjpfqJK*bdkpPkmn/UIfis22-_5#A3I7C)iJ)U)JGSu*3%i[sd3'FlY+a1jA-Ujj%n-MaSH@P-NE]'h+l9sNR_QaHE.IN"n\h.'k'U=Zd-eU1"QL<('\.oD277X?Yk30KSj/M3iNZjZ*07H-*8%9PU.AT;\F4L!Z^h,MZ(gUe5PN%i14]aiG+dOa(/bIc@=<8O\jiPhq$E1!-QmItU^iMJWZsQ0!.SL6fP"RAXQKF90VlJT@j/0n]kA%:f3>W-&'F1U=Vpd.rD/$2oV7gcU[o_Fe9n:r#Mk3M(Ha]`"Li4fCZXK,NHQ\d[[$f.1/n6^lk_]0$IC2<!?0=/!?Jk,X#2H*jBGi%YRIj1SOa&<D[QM8T>fN8pl<L5$F\En`_&=V-]EUi7CB8:F]3U\in:;$T1#;=atZ"`/!?+K(#7CU8;aU*FW2A(j55*oX0*P,$dsZh%Q_<UkMQ`u1p-_DYkZGk:Y6.o`(39qO<r.h5WmGD_P+qSW@Ykd:;m`Z9D<)ICja;(Z;#?--`9VOIp3F#k+'YI^):e<bf28tH]WCRr%=>NP;'@PNMc*pYV1",>T>)[K8[B#G98pgk"%pJLQjZL*l8$#oOo8e/Js6emR&(ePbYPd_l/mp<QW`VWY9kHb_-N?Oac,"EX`s[@[%\U?UC\OTT.kiTBE.IhRkZ3!TDEOM<C:-WA$Dmhmr%\,*_Y)<d\p$VRI\+D\odL5/<F#@,2_O]*0B*h+rFMr_D-\B5!OaM(">o7t7%`#kg8ITr?A242VM.^8K5cF!%fk_SiTTGs*?Zm.WZHPpj@oG:'_!$3SnQ$5-:G*ZL\ggi,+04^IF;%!oLgC1:=K<(lD1FK=@?d@5=%2NbgjP@Wn*C\/D)s6mbN5R"%X.;$pf-7OQg;c[0&f3n]jbqXaes(:Kjc=A[KMOjRpW+Ue!+C3!?e$]ji5<muWA@2,/j@T$Ad1M_?%hIP"2ZWI]dXIqjsI#b(P+G`SQ.+HOkk&>s4Zh`.>%hQtHQ[j*7AUr/d:lK/>(CF=2_urhd)aK^=-A.!s;Ou,4StZI&dc#TT8u].c%/Dkj#aE?ZYi!_Xjc-aiW<(4qr3U7/Ig3YOY^MY'&+%FdHG(NQ9a$8LU!e,NL=+<:lkEYZ#NH4a/gW*M'go^,!G=8Yj3cd8*!%mt8%"G.O@jDCu.UGEbf\OT%E\dl'[3fp.k@r2HHUZX>aq1EH;G,R>%J_Z6T9G51S%DQZY\XLWU2+AI,Biph@8QZ<CR/][&%05X!RK/[f%-+eu;<Gk=J1MD.12!RB`Fi6N>q=1J.4mNUe'@33*s85Qf+?9RHP;qj1Q31MUJhUt@'Kc?PJ2dOV<Nb31B[R\%;k/V_7P4^SjAboZ%quaP]9_FuP([\suio1C=VC$g'Hk&m%^H.PnaU?uZ9_(nD:W1p38f!kns.eA;cDC[_N1%n9j$DQ4B1U>+^K[o0#]5KqD:B"##B44W%;'e-P:S%AJc+bVRBM2+QWrK$HSIFijrl/";^XUYpJ(a8T0^HJ)dBIr1eRCQ9q0+^L5:;6.70bk6d,om3AlfuPnU:LPq(ErRrsueb%nbMp/Yr2NI]>7r3lMY)A`DZ&R1NGS@9['R62&He;luXj?kJ+'Mjk,G"p%j$b?[g\-QB^psXVJ7C3e-Kqjj/F)2?%)YQ2KCe!1bGq%Ror^c4'Mb.TJlRMia<*T[9>6T?XW>bU2/%T@W-dkR/V5\&'WJ:9u>4ag$&V=B4!\4HdZohQR3^=8=(e^.SOnl.SQg6NjG(hC,-rr%)#",P!P/q8PmY0/%JljMO&Lm8Jl?$#dnpXK,!`H#2!pOj6."&4;i:AgLsC`7=:CKjAR*5F@/q/,6M<1nm"ijQX<[G04W$fQUn(f%%[S_chioXA]Vaq$!'^;-D(fG56GR=YgZdmJa`,kmcn.3J=Be:"&,J];aEW@L.TY[]T@Sp:W6+C!K`L$2)ZWI^UdJojg2&.'M$'s#(%W3;M.5c]#F7Rd/OlqA5e%M5f"+$fOump(hNa"Hhh@'b_8)n@=T$*E/,&d.[-J[76/cdGt_O-Z@)BJNcjOVoa%>aM9jB0':?L')'u%2CFK_fDI0q(ch'WoeQ'd=c@J[/`sC9/lu[@>,[knOjfq`_@hp*2kZV6gqU.]cKo:+P?Vk--8c+m]JBf+?nqL\9fblsd\\SFncQm-%B#R%`$YoRj@*Jh!a]pX`Ur,/+_F]k336!]lj5dF;RWhXn=A6l3BEG/"1-14WU6K<NX@t3[RXAcE=(fpFX/p2Tb5!L\r]+]dfj=i$%%OY3lecgA`d2XhA%QFCiA8)</[TN!Vl4Tb::I`faEsVum?I$MfS;i@kV(%\rWH3ur;+#gBH:oC5h9MfPmE)@C#[;3op':P=BllhI%B1krSXd4b,9]:\H1duPX/^W4+L!!E[>/glec9f:G3K*Ij+\VD>95i?3eS$M(\Kl@p,M;bKE[k*u3X$3r\j%g!V*B!])3n,V8u(<`%mM]mB\=*R5+D%39YaG[%Ze/sFjT3YC_1]5/F\,>sC,o-m)eZLU\!F9Yqe",k&0iBs&]H,Vbi`FPcTQ"8MEXfXYGk((/0POgo_DJH%SiFcXj\cWc]S40L?rl1<rSoGb5Y6gu*eM,=ihTC?.!dpHbVQ4)0k([9KWLt;X>OkPZ`]V&Fat,[qu]Pq&LR4h1N=8?,[SXbQV%K#%k?@L=P6$6B1#H=RPbUqD8ah_NUu4AKl,&=S+O:[&DW:=+9',PT*+$Dq]+'%9"/YSHN:Z[l9en*lF1MeS-^lA:bd1Do8Zc)>9T/CN%nCM&Wd>Je!mKdu1$Z['Bl!W.@/@A'HhJBbkX#h)B-8[Of*C@&O_h3>pY>0Qi%MW2\Qj[**l!U2dAa3P#R>3XXcA2]J&%'[FKS']>%H#L,7_nr/5-prKlc1jY-gq!TGI1`\n2=9'p#Ujn03[N(G@YNBRD:6;7+-kjTk%A*"d!#iidVY;,3FBIdc+9*NGV0b@Opjd!Y<HaE%!4]R!q](_N`YbHR:<$ZeO8m`,(T_#j-BeJ96lLup#(NnJ&As+TR=T%0WN_bS?YM#PA`eE^_9(1b;=hM=i4/UD&p2pQp5S!].6q$`%0(%b*'($En`N4-<MCj`b`][JMMs$'Xg<eO9k@1[NPjM,1D2kI?0(oO.d;[fB+,K2<U8I<Mo0ual;+?fV>NY6&\te@_a$TO9X>l9>%o;g(D3RG[Z?!5%LTEV;KVsL[4iMeq;rF9I%E@+":YHrc[ORWu4e$#275M@9X4r5+YW*u+h'7e(oB>3'fORcQL$HVWFVJote?4Xo-%)Kd4"4meI7NOBfYAI/Vu`h"X'$9C':b-c\l1$Nc+77Pa%$Tj$IM5or<S"($L2",V+K`uN4Ns>5(Q%lN*=]Q.nnqn?PG>iCeU>SbP%UEc57<85JF;f*b_MJ=*@ePmJKA"#H](5'K*Q\1>7r>9m=F7F<0[Hd2$5Pp!mA77&*_"S`u[>pM-EMW1t7(l2Z"%8oS6T`EuqI*KM%.?bfbrgKYCcqnn<>GUNRL'@p1:XZb"YqX4Wg_2gCe,/qs[SVTK`nBouTUo@TZ\EFb,YPF)i;hPEAc[ssD+lNPRt1s!1hQe'ctpG7%ZN8c_QHH;pXQ(SVbX*R6,3/921OjZfNtqpr_neb/U42qO3.FJEc8q$&$@>qejYC<0k:8Q_\gi:^kk4",SabWl^FL,rj(.;TPeQ-0%P-nB;<CU6d@bIAVD3;MJ0#%I%rcjPIV61TQcGt.5)"@9#L!(8E`\;0aPqqU\H0jn.-=j*_[g-@5J`?W<)/%%rM][bN6FGNpb(%+#%>l6D8IkJ1o^jV5i%L'90<^M@!H#U97h\4=1Z."PQ$fS=&\41kJrrd'J.gYS=m<>8I%@ZUu:-:l%qk9Q&IIe$k;PD0:_:-)2N]X,:%`Q)\d1G(`qq9MZ;KCi1Ug-4+)We'ZeY-/2)D\',.,Vs^>IceA1q6/F,NI[unp#t+Jk5<*fO@_(A57TVak54Xr#(E-B(,#KNY$<CS%I?JH%Ni0BRO.H8"na-eXMS8552ugk)cN))_<q^\l]1H<=cDku*R!PSYbPL$tGC&pV#N$>_aOOKA7o`0\Tu.>&DL"nZ9gq)tEHLc6%*5,GM\V^4#'DcjTIKQ"amq*_EHQ<<?W<<ZGjia/o^0(C$r[j>)p,kQj<;!h0kl2ogc\.<_9]&p3^SoI:Ig^ac*:>Ld^(5g1pq@-$%mp$8[4I<7[K^?t0,WGE3)2^RmSe`e)f*S.Jd)h)6V5lqYF7.AE^"rAa\QRoTE.6]J;9VJNUD4N9_d+*10"C+SHCI82_(Y!1S&!!k%k80%XRZDYJB<C8m[T-J5&/G\UHZ[B'?\,S'0)[h\aAm16nG">AIM?&t2Z_KWb9ZELAb!>"*`AWP`tTi4AltH!jo".D-kq:?Io%<A%(nq=_LH@YA#<r8+?],Y:BdAN'okqD&0"o5t.")FkqNK/^q#j&>_;AS@/Y"qUcBk,R/pB$$<;b?X_TJcZiNl\R6chBA!]^IeqfD%A%(I)Bc@jlHJdep&e-2Tpe%i%8ZplC\F0bit$,$27W=i>'nk]l^nVjaa>pmc;0Hjr^`H:Wb9qVTon8Aru^r9PFpZ5qf%3&0?%@'SA?%gRqaF]NI'9?Sh,/WYBsS3&A_t]g171'jQ<&OgN;DhQ"pqZLc<Zn0qW[L3se>?>eEf8%*P?pGgt(YJ=(#1.nI-&h/-MP[=gK*:Ep1%n*?:#Dc:9_mE)ejpWq=!!L=./#TuLT*rb,m3^JXiBGaIh;Js@L*_P+/KgrK4QaP=aY1u'5XZ+n*?7:fh"$kJ_3><3o0'0,I>s=o5%f5pZ$YM^$#6R!+%j0!s'qi@FIoh^u9]*+-hI^Bs^L!S,hXc<QtKB28mDA'SS`U7YNXobTFEs9#\6p#c"K#WCaGKjJu[ei;Bk!u6Z%)0&/8%-#`7joLf]_p!PpZ6L(D2im,&Wq\&"@pTShXr62_:Hj@_]Lilbj53c<hVeYE^3eO6@FDtaq"2O(""H+g!NL,,=*!lX2k@79%+*b<Jm?^&-XZeV?.LSO?gR2+/[%=K"[V3W>+J%j`/UV.nmg;k_7csNtO4>YE#XE&GF&m@=U`/&hdCY>H9rq.[%FjJ_>`BI^>9[FQ%p`>ota&b7%>X8,oA07t-D"$IA)ggoNJh6RB@"L#\WQFMo&UG/($/Po5mjD2X?(H<'IMHh3P7b(`MVZ#>'>P;mZJ\*#+*hN;@doog%J)uULSN^&&']b=f!'bA[7fd1Pp-fFl8KRI@pb"p!jO8,b)+!O-5%[Bkr.QIT"&i.f>tTf>PoV$h_d>>XQ<Td2XBZrF8g%k&XVZ"\%86<NVWeRb9dNpnd>-<UQ6(m6@7b&dQ<4"-FXeW0-$`5;b),#u8W%+$t0kUpq+<$[c9ATZe2(=145UgBn9F:iDCFJjSl=.@_17B->%GM7dQGU#Mj=L@]+7D^TELfHd<#bN;DEn-,ZLp1\,8VO+M[XD`/8mW&M-^.#u<0H$=k;S-:c2EAe=d<d,XBjC5imN7ED6DYa.PD\h%JG`g6je%$[5LA_q+9_bLd#%I+mcKcq.9p3M^NpX'\kNS9n*/Vos,&EJ)HE\UD>bpl=Wd?PV.JW_D;A!b'>V.)-Lmr%8QC`Ij?Ok.%o*jRH+pbJ:T51Gm*G=e'hHZa=WP&UlkVJuuL#)t^S\1gHmIS\[0FJSHmZl]^ofmG2jN.&s7Q:)5@P?AkjS0i2;X<CKG?>^WMe/.s%f@uYE=mtc:)gdRr1Zr9,%Jf3k)GcI^:/$>oV\'17i/n,\68R;U$Gf$G1]P8J9Td?r/FqH6LSOqgFC47@j"&*hg"F8/*qL%d$&35V%'XV?6i[NnLGs@Y__7@j*gX0Sj\oNK_WZ(@YjUi)S&kdU=Qf'aUb.j!'K'+E"GOKG/PH\/Tg>L7>Q3:mGh[HJLBmk;<OUpC#>Pn'F%KAGFcfD5%g-NUf<@/M31Nk(Y'Ma)FGITm$)V.p!PHTGcSVjcTT@^1[j`QZ3>cSIqnq["<h^FZN*iq$rVc#p8+-PWk?JP==*[`*?9%JTO$ke[7kU4K.CnbLR2S5t*g8`ea"8_D)L;ke%C4"CGYZLAGh/P`KoAM^j.?X=tg$%]l(b)3L"mWL%'YhKt%3Eni*"+(tQW9W,]$%AO8[p<Ak<j>HuCTp#ua,\j$S5(F7t4\"7H&qVP[SP7j;-SL[!05Bmfd8U4C]!'&f4T.!9F9-hW$d$mgE7nuB?'Yj(GjOM-OJoX=d%S:0HFe,)75b/FL_CTa8a%X5?Fc]rS,.S%n&]7hf!DrLU1s72aUS5hps64;Ou1nXc'`EN6A<@K#\!H*YpBAMWMbS2k[0F##tJJkq<%)C[@c:'i(g*ZsR[?<tZ<qW[ZQ"$9c4NNWC2JTTq9e$d)>DTnn]8qO-GR)6X]F.Jd/E\nVkNEe-.jD^R".8VC!X@f6DdE0ehkGn'C%D;B?+5[,Q_`.9Or$5LtgJZ+h:qtTLY253]ebJRN*MF$%)S5X$O)OSosd9s?&.MbjcZZ'0khi<VG>$0_3M;Leb^3]de7aueQ$;NLu%.6?HmSbm`4hpUP+m02.F_GHl8;4cQY4&WuT"qm@DDors>NUgF0H,(9rl9jPYT08GD/<@u/dZ8s&HLMTn<`XqDD'--6-@,PQQH_sY%58'jhCor!ZM^0K's.,,VOiOd:iN-Z'q&6o@M2-e<n&"5l[Xu*rG2MmY5Rja!3F*3bJghF4P(nBU7H$dmao0`<;:Y"O;h"B>@.bij%%hLZ@.10=B<'4B/>/#E<j/NnLf">1;?C?UCr/,#VAf2';lI-O@G!68(C%i+QmP,&H.:6uT"p9,DUJS)<cLN(;*1&Yrnb'b105q$M%[:n6KOU)6TLL3@R3-*lNGk5bN>jOqY+o$:'-*N):ULL]TWq4f'iH^9h:/@<FqtTeaBK*4i_4?O-FehZ4.!k(uK9f7P-(41@)*f`B%_3k0JTGiPoZc/P`1L_c;b22n$T=Id=0\7IBdW*mHi-T2i_(_>G'8qfAP6o'u_@BC,Y8<Rldg+7ecT+^Ok=ZQk?9JCD1e>1<'!aIp%pWRQ94p).N"a)8K>[^sr/t/<pjCbo)[EJ\WhoH\AQ=\Kd$ghpKo_iUdV=IgV?(=@leOrt"d;XRCR73tGNH.WpBjHV%Z0$$i$iZJY%F,,0YDcE"`ZiiO-@.usa,.l/"j)LCVk3e,`7JAB`S\M)qKMm`d1Rb*EXWMjE_:#FH(uJs6BG_s*[&;?uhG0Qjm-Le@=8Oj/PtYkc%a&buf?!PNm!,,*sX>FjpEi5RdaO;mta<D!EIul+$R\a(@NB(=E1,!F[)j&%_$(?a7k-Xs.<?YWI3lc<_&f*=2nb[ock59gP(J7Jk%$(?Z6)^Kb(aN]DGktYM_oe>HY&^Gtu#&ZIK,^)DO!KP!!Q'5[(hZ";&eP\`ia@K'D?B8O3,hq\25D?t-c2g@Z1sGn<`P5DZ;5QIr%RSS)C,V0JmGmB?\DX%\Xj6mh;(<!3QcHnaBjh_DEX8BDAgnF&5p#Ppcri0<eei!/)hiB-sO^>:S.u0)&6I+1DI<[8c4t_n:5Clbe%>XpV'XrfrZBba)lMbO(9%lKPslmL>J79q3b'jtCSXd8iRh'&QRhu%WeAr,4G4FZh!a"JhSht.#?eFI/1_975gm-S\Be/H=&]fp/8%CAIWS'FW;jNXsVRbT&=j[u4_2c[RDb5iPmZhTifImSB-AQ+3`lX_%47oeJ22L"8@Fq3f40b3[SDR5I_AWGLD^<XeN')>*a*jcGS;%Fbq'uQauXHJ>mGBk-#/NB=QHT40+qe?D0]fABrBoYU2.=c!3A8^C-_kJ>3YSFg:c#KREK7%MV1h2"b$Cc3fp:Rq8;Qoa3t74l0ag%cL49=\`#U&E-scQ0D6=CPMQ(L2I:u*SD_qsgK%s5?CFOm3H!X@X,)?:_67`o++^Q,$hEODY*c'6Pol8k;*'NmX!>l>Q5ro;`tpRJ%?+9r<1;E,iP#`Y\8\s6A0DNR#PjSp-mlhid?@W?rD</23B"98cn&I$c1u$N>i2p86''32'WKl!fnDUB0@"7mV0KagE@``mT&,bhB%\u5$XQk_ehKpQl<M7X5q`,fV:kK&BF&(]Bj2aRBDYJp8)AIgeKlWpNt/9Z)`0Bk-f/lV-Gq[:ftenQ4d:F-/*A'i;86Qr)4HkZq(%<YS9k/$sn:=L"-N-#SJEmN_H.3S)>MVO=)9hT=W'%Xk$bYU'h#;f&mbIkf6=VrnT+Z;[Y*!!^!=B3E>r:IfU=G<,?=H#-S,SK3mO%Gf-_qanQJW+C`<X7X8NVE84<AM\'dU?eFCTp#.o>mHn$P3l#7.O,&VQM\XD$j"$!\)=`sP.2qQh#-MUrL!N.u;X!sImR6G04;Y;e%l&g.c66Z^Ss5\;dnd<mfGm#_lJA0nL_50FN=p:!hhtRF0E4T6c4saag3Slo[(+qZ^pU]tFn,_sih83=)0^sCKo"+71*aCRoKFG8)%K,1)&Th,K!Z-4).#KnA0jR@b=GS/R#ID"haCW5/P!cu@u@.MSGn)[>'nb%3V//0"(9u0!U4u:<9_%:!_F3gB)(F9;[C?]35hs[tO%YtJa46*%.FlRInW=K>`iF7nY<QZdP6kC;`LOT1286U(J7Y5h/^jZDLSIh_.LFY?nOA3lE+'CJE$%q0i-a.fqcrD%e1^XQ_Ws3?;X%Lun4&"keN;T*LC$p7X2$hT!A"=_?1D(U_@%!?V-!nDK4H'jU:iom:m/I(ZSqi)Tjh'F*K"K!EPKEGf%NHl&E%h.HhG1S"j#JH[:9%C(%OTV$cJfqU@h%oF-ad$24e_a2)W\q`A(9[G(V[4MQfar!5EAGlV_W8B1)S"&3puHp#cd8Vh8LT&Zrbm-UnJ!T=d"e$B!T3#?lK%H0*k8o5`lQ1$"=<#t1b6cJLMU&S,si;pN1&$jjteGZ2<Vh>RJ#LXk98V"sg]At$KF._L1bF1U`.HKdLAH)@k0kCO7@59%N&X'`E,%lj9<E(/mC4CX)b!UbP!#$Wm92.)7@LK,3p6Tr7YsfH`AN9H/Ve&f^t^C>n?*X.9W+V$C>bR@Vfqa_(d75BYOON`1aUTZ:ShMI#N&%;s^WH52Z^q"4p]9RLZ'B?uPUCR=;)R3QXKrBA$(aH=B<d//ljN)-k^?!d2mPYA/G0kikUb0N2*ree%j$#FmC?dG-^Q2?iO^R>79I%.<(EK52rZD/kNF\-p,+]21uM/)hTEL:iUn]?prKUoA:AG"]?WD6hl8YZ=<hGV^fVXQp25)--_Lr(D3HM<>N+nS<do2ALgI,Fdfi'%q9!Bl[mEm:9[OTt7D>Ytc:ML?+9JcY0:J1nP>ZA_dr0du#u.sgCN0\/W<^Q[$^@n-&DCOZ,o&s0H6K:04V#@f3'pXUff5j*?GPYE%g;A;#4MV\%?ulT'\<%8NcaLQ6bNrg<J(*uN1[PCN!XenG_%Uf7"BUqjBbUX&m//`N>"t<Xq.,SP69THQkEO%DM^V.24_GV#7[`@Q%ah%Y!#VC]+WF7&;LP-um#="k%g7@1flqE0Mg[^Vhg_5Sg)jkCq*mM<\cI?=P+Nu/B!3[.?=9m4pg5_Kp2IaKn$!#fg3tjp?_h0F=%q\!VNCqupp[4#T)D.pPdN9U_C2$u[>KNVYW-7cI2Gp^C1CJ_WjB9"4>7mq1+0BLUNbB^GZ^c6.8UKo'2U5%EaD2,iq<+]XmmY9;F%m"bMS+nbZa[#_ZB?hO`Rjlgbr,r28E]%Js%[a2g]^l@#X6t5>f64ORb.t6I&GjBmK%0b9-(^71,i_gA1kHCJ!_q6X>Oj>qSb<1C2%,`9k?d0JE]K9:$pKaNHS]^8dC)MKn7\6'cj`<bJi#:T#TBB$EYZNrhDpVCZAS96ndI+.L9fQ*JTm[KND=`<=Z/U+8^d\l,[S(UB\%X4_SqR/K1e-c;W^UpJkp$%/P:NJ2^d!:<#PZ$&$[Xn$aKX+#1Jm@+@/OJ4&+o1)eO;LZ+qB=KBt?.-C*gm6Ku8$/S>N6*r;2D?K0%lkC$n8/5%)0qr^N.':%\/$*Be2bM,]p9a6T7t_o=,/f,lK_Jl,DaB4^MUY+$&X_BFG!6-l'<@hhC-J8Hb6WtGLr^/2&TW_NADN2Z%_[:2k%?I^Lb-i!QE@,R9$`2=Cs'/b4aF`1ebY99r2I!6EZ3-V@d9`W9M.,8@CgjOJN:1H9&F\Fai*:^3ea$I2%HC^=S3:il:[1g:%50+m2$g/lkDSK)Mc)%b<SY3[nK>i'qRldG`eHH:-R>\E)-[5nYSTt@DYCkEl9Uu1&Cd*B)+oFK,IQ8\VJBD@'J1?:dR7G./H3o"8%0l4JM4`N<f%LaPL>@M5/\'oLM<iWh9'A1mVY#tLrOo]I"%P6==8G8UNXHqS<\`uLc2Oc=;@<FIq8((Z^WQ#h<L(`UmD2PmSjDJ+T%oP(VfDM[N*;QReORRBf3ln*5LF4ClC%iZ##;#D(Sn$#>UI<_B0!MH2@/]0+sg-)>DT/=e"ZkT=O7SZiGM_Hsk5IP1>bomQhI"Ug&%!NVlPkH4*IcD=@]V3OiL2:"l4CVgW)[?Of;d2>q!(9=SFI.2nW(E1?=D,>hq!,/XgfBT7qm>NA"48oCGfOCX?rX4[b5mm>1oC<`^%UofW,Q+IU7a72M*pm?LiQmQMWKN\8n0R>C6NdenJ(\c_k'a\+K!Z,3:(B.dQo:%!U-eueX:r4)sd9>Z>T8Cu5`i*tdT@?eC:1XL+%>Q2h-A'6<&.,qd[\6X[XptXuCISRD)?R([)nJQKR<lq3hGkG0XKr?MVMPQiV#^t3fpYBcrAoS!1.u_#sqF@"!`S!6Nbl9f#NJ_CU%:J%D*m6TUf(<(BqRgmZH/"(-]OcGdS+2Yn]RCb,0YKp2,=a4ZfWGJS)qm3Q,KS;S"$04JQ>C`osRoL8+.*U6TE:nH-;f*\8B8[Nj%'"k"a>SC1+Tkk;WQM8W#Cj\kJ:MGKmY(.8EW5UcI*FAuu-.aTG3,4es3#l)>93hDhll/'Q-D:!06&YA8I(O^<0h,?(]gn9QmpSSZ%mjH^ELKfO76->7g-+>VWF-fs5cu.5JBnLlrNgQVL60`D>BG[8u<QG;WoZQ"Z4;Ej<E_ha\5l%SlOWFgWhVgYTh>4:6l:MAbLOoh1%rn-%?B!Z)?5H*$#o::IIm7`blQ9lJ8AN0O#aPb\=%PJuBGW\%\Z=h?P+!CfnfI^jmoEe(Z)cO;%BRT3K)LgXC=8;h]b0AL*l2=j@%72h`HO-U,N7?TCZNqe(g^,J>-o_>D@B+9tUZ>Zf^dPBb5m,_qn>hAQln%o`"'oe<4Wt3qOo3T)B)'Pi06nted"^&.6HIBGBc]"!,%:N)Ke<k^Gml&i20F,qR?9d?GD2cU3fY"e3(++"409\lMAY)'TT2bkJnru-6&"TLnAj15:_@rmE0?e8I4pEUo1$@-bbq.=JkO-(2b%a+C1ccP`bV;N)M;Fgr5XjkiLCI!igV[!JNLIW8nU1c'%4ZR/4MHrMm^=<OD9`cMWlL0gqZ6#^Oo[+W/Q1IZWg>-?qFO@%4<^#Z/>%cXYal_+1on<HHg[`sn0ffBAVOd^rDQ1dOYQDM,N$WV\]F0gU-E]75>*a;Q7N\ENdKO91s]dC.f_jb!kl?TIDRhXVO/]rhm\*t.7\%6_nYDn-q\kmE9f]Ii<me7l-qBe\:iB2b$uspr&Nc,-O?@YTU<lmgsESi-<rJE)"k:da$7GV!TuTip,KVK1H)[SYgj`k'LJ6ZpCn^%T;G#)>sJ7r-PFjI_QU:&Vps7>'Hq$MBl@.41b:86Q",V,U`]hC,R%$Q]3^PD!?fW<el:Vo/:ipiG`+j.HX0dJm_MHOQH>#=]tV+o%=ZKI_=9.'r\gk@f6a>A02aAjooLQsKKhk%(]Er@h>/&1j:X9VNp>W5U6V&@9>hA#&7C;s?J4QXs#%&`QNujWHQN/J@VOb\BGBt'E%Zff?-\N%sX:Ns4uMIH@]j#X(j?NWrb<)8tN//lPuWLsEJTZ`lf.DSn-%9)[iq3Z+f_t5gk3@]O'M((5QSVj]K></]VQ!;#9>fQ%#%F3M/djf'b/Ijj0@Ub9unQ^-TbEGCbbF1?":5]gS#cF9u5l'9:7[JJQI`pQ3KWU]:eRTNH7BY^kkFX";+BK_VF^$E<FdjD'WhY[6H%6UmClF0(]!5FdP)S4VscYasr]YK!PC=lDI(@su@rf=/O>IkTNpJ4]UtpCFll0IEb`^U):3&3!@4H>E#ZSIdDh^p,iuM_*]MV;&cZ%6m!>CFrm($;(s>aEGY,h/M)tJ"67h%eD$>Qqsqf^ebsI9^\>=B08rdt1"F!X\Co)cf*g'Flfh+2Z@8#7JZ3EW8BeMl(9TSl_(^$)%OnAM+kH5>[]#HIdT(;\5&,qSe3^*5.cfGbr*%@k/U3uNkZklaAB]S9K=j1PmVB/mMr7*UW'eJ-(\:XJD?sMCQ[p7c+h[9?t_!u'o%'rn]n0D%5aiF;'$C^d7VAe7-0F6"f7oml#bisH6=cm\/M>Xj&[)5Xo.i8G[k_/LcreXPP1j%2*pdU;6KVDc9T@hu*Eaq#Q[FAHep%C:gZ=bP>JhOWFht+]G2$OQ5XR8GQaL8t*%uD$@$Gl-m6JdZQ+qNjMauT4F`GH;B5Q?9\AM=0Da@Bqf2.Ri3a-4AiHZ-?H4Sg-7_`%<fdA6B9TrC"g*g$:tk'O8@bWGF/2=COOEbn/QsuS0L6%8P@3b(2+-(P71-`u&sY;U/+Q5)O[=QYcA]G&"Y'-tZus&Ee[6kI"MP(,%O+'Y0EP:Ylb#^eKkk`"bcD,^.AL!hWC6.1#D#rrRCWhd]Ks'`ndQqdo2d9Nskm+uod/U^GN$4^VH[MfA$[@%6PWg]Jeas<>++iNF%/pOGb:Q8;G*^)0%M=/Z+%M5)!V<?]a90[1pd,uT[K7Y%k*6SWc\nNd2[Kk1N;P=!!DZOHZ0aL58V:.lBl2t]h`SZt.Z;d52VnXL8%<*ae;!g$)UU2DpdJARrsBLnB<jVeg7kq61@0i5j`dTlr;SjLW.nfrO\^R,\Bck3*!.5EqZ#13\<-_@M-:_Zb-RDE"LT<54R1ECo!%WlO0)ot-lt25C".h!,fPO3V7OW!/I[@k[7S=.@nsGU:H>*"P=Q>H]3Cp<7I"/Gng9JiaXTA!R;&HZNV>\8@&6_CY!$oD<3&Z4sj4%3Mr+D);R=CPdfYb);cZr,k'"Rm_YF]%P)/U<6nK^W`M@&fDJm55d%e$of1_G>N<Cf(Z,uS)$Fa!^f'i)Elnf;Ab!1B[%mrkp)s9X%;,=d+nZE-fcrD<uD;HdkVH%,%cDn:SWi!15R+8C\Rot/sqiD[=e=b:);ei.p0hnctVl3Y9C@ir7f:%O*'f+/j`RdFYULE5$W0).9%cj67YI<BZgV+\#,Lb81FnnsE^9R<>UXRqK'1dRBP#:tDe__3ou)1r"(:,<-EmP6SH^ZuliIVn^=lX#>l\Kf1`9\M7(%,qesXluah%=EN4@UZR6$P.![8LSP+$,dr8?FH3M;;qZtSblT=7>tC-B^F#1"^J+&U;),4a0]t=__XpQs=\DAJj)\LiJC8Y9V675,H:lO+CNosq%_mINueAu+6Ut)IpZfH(DftQMAC4#Ek\F0OZ].Rl2_>6SYP*@r3Ya#PY2I&:nn*AVbUl<gtmC&[e9.)1Ap<$n0o4qNKP=oQ'rC#=<%YsacL!S7!eMUll0gie6c)L#<2V-+I%^s$><qar>Eh#TL4e[0[D9WQRLk*S!3,mbKRH[H07#HhXj<JoOX`sSq^SfcCe9Q/8t.YlSW%Nt':0m^9sGk$T/*$>'0,I#hSo/2M4F>]ksU11&42Doq*p>N(Pu'&T9Bp4n'H2j/*i`gp#fa6kd98R9aP74FVs(E:V028mrUJitDI%;Dr4i4+ugGbFNm`WS8(Qa;>e>;EdG]Q$[=ggPs>FP,:@\Xk?)4O[P,g\*Br0Ddg0s!g?389>&,Gg-U4TF:^,74#/,(iSKHj*>O)U%A#_0UI<cq=!:"d>m<INqIM^+q.r1G4Cbi].<."jRo,/HB?9Qo\]Igk]_[%"@OADn@#&IYJk;pl-jPQ<R-[kVt6TuN[>Hk?=gVlmB%4jk_b1+Tp@ZfZ"fnW@#?3]PW!FCf#ne@g-NWM8k>Aht]5Es]WX5-_!)e:1hp+^n00E2$ahT\.8KCdmmOM'R"(9`dS)m7qRbc#7EO%.ViXALZsej$8kqE*uo0^3=3;4WiU$\d5a,/d]k0V?d:969\G$%[)HnE5g8A+!-cZLCUB8+d[Q\n#-BBb[jG$W=1YDUV7"Nk\8=4S%;B$m"Nd'P)n]*=Hk%dka4CJ]fk#JN$A@5pPXUJY/joG@VWjdO@aEd?rKi7GejfYr;m)>Nb[8A*&[A6lH7W0XX0WtO/3d\=TA#q$c%*UBTJ`0Z25M/?m\A7$,L@p2goo*2T!2aFJdS(@P`]%:XB)(=IWf-fM;HUq6$[8g)9o2Q?(`(kfu11i],$@u(OlJt(UA!tl=ZAMi1%_W7]Ipbp%;%OANV7TgBpE;&^N#g02sc<d?2[t1l^h,B=-%=i.o#e)R`Re8sWOdf;JO:o8he-Z:]8(JQJSL7_dX_*JTk%f?V:;gYc%-7`*aVo*@.5*n-qha!smD6M@2Ak52E3.OJ&N:j7%p-!X&@-3A2`)bSs6%Zn>rB6u>(a:etp?ha$7N--!^43W*7PgLF5]HGKBQo57%HUVo-VFtP>C9Y@/+RsH=c>;#g%<b4/NhA7&LW2N8ls!)XGea;=mFQ4?ZFfYC`h'6OHddPQr?Za9S46+OSq5coblV;--s>'o:"AUZ%I/D_1qTf$'q;iUa]c@fsjWIr,_eb"$GN?3,#1S@Bfm=)0Jn!pMY-5KVKO`k[9O2\VeH?"kb?7%[>8WUe0!s4!@3>MU,G_NXa;42&%ie&JW%0fMWA"0SD!+om=BPIo4,7=Kfml?^sBVE8ar`8Aoq^F*a/,$3.J$4DIfttG(fRo<9DZn&<h?_/f270fG7)O,,Y*aX=U!=Fj%/`B"7(.q][p:fn#*=:<rdE!(Q[Sjea9%er-l3dU'hG&d#)HNS=Bg#r,#7DJ58fO?SdE)BUXU]'_dflD=Rq<BdFfgs>;n(SK`7iX]%7.b0!T3JFhK!#+:`tm\?'.ptE4.Vrgj%bIXfgb_a)5aWh=aDh\9;_=&VM;(^YSa1(ls)=gmm$(2d[RMi7csgtn_E0WH>I,9b?H$<%qUM&N<P*(TH38^MD%#l'NnKgr2Hq'G[Nq)Jc1Y@7?m[Kq4rgi[Hj_2$mSK0Z,%?0QX(c"#c6Z\*Bb![R)"=DA"+9C?=hM3k0j!l1%]*T_BC9CAqe2E2WF1;_o6Y@E*[h^^*@gnoN"<APsmN4f/*C4<Q/\"L`STP(+2Hk(o(cpsg3f!Sd0m(tYFLl/%SR^lb,Np-8_o0o)%8'msc*=%CoZd+?#T+2E"B,s:9SqYoHL<_i3:@cF`a3\NZ,b%;kc&KAQb<>@WO[,>lX[k4:l"urJRl5/^\m??G;C\kgc^hJ'dg\B*%mEbD+4uKe%95_J`fC50r1u!m`lVTS+43d[]K>@UI-;h-cHksMLHe/dRYaZm#m+3o'WP@(t\o'681J-_kNuOt4/4`qTR=hi@>6`@*%dksoe<O^QGmFa+BC5]2:\F5o(#'hjCAo/%H*An6Pg9,1VY.M@4An/'7Fsl?o'8+6;loS]NK&)BPD=jU!NPTKoD$A=%9>DC&F^=[e%FQ5%XJs)lHYhe1LR!&iQ(pfM0g(bPm2^UJ>I'flZ3_,7^>9$Up?AIYO_mK[`9S6$J$8Ih*q!<_hDB@O?7Vg[,InW(L[X$jdYWbe0%0,Xp)mC$I]Ngg:I)b#=O]aCWV?nY/gG@I%$53nsOD""^rQV;T?X7ojJP?-h>C$F_J`IoKE=5%<l*Y;ns#@;:/>O@b:fsD!5M`AGM%oiVC;>K$&KN/98*##,N0"KXUHN+=@f+6J\7gAo]+Ps%/$\ma*o(!"Ob6FO%mUsXAIR!.IJ-E_3->,E)sIr*.+`3?m/J5PUsVXp)h%nT&qm@0Sto32Vh!/K0+TkhXF?',uQ@LRl9<g=3:E@*dnm#U]:fFLhtg(kuT]C/L$uQ'O>eM)nUR`thic))36)R"r1gme`L,@D9[Y%'73YiW6SDq`""<DV/1S@M1"$64[5*T>BIbd5Orhn<%O%HZAeH"OZq62VCgAR9#OZ6%$39l3p%#O7P1j.56aZ!gRYd7r@q57/\Q>>%X*'f#a0C1D]6r&1ib1c27+g0*JPD8HVBkEcO^U6(<\lKH,dH*,0rkRAHS[FHG,O(#MR+EsIs/j9?!6B'AD!*aI)D>scA]sN>s6nk%QWhAJN/YEh[pdqY;qYeQ7XN_e?1mPk21lbaATrq.0XU4[A.519'>M.s&6?9j>"%XnnTim5aI(3C6cNrrBl>de#OmJW-->k(8Rtk;%J`b&nfB.MAG+@Z>oaij7(O*7ZNWD3D%6P#"4j9]3Wg_>\=fk-$'8DhDD8/Y;B4'e$>?_n%L6(T-/so'8DMkLLDD.dD%b7T8rHd%7%Fc)0bN"k-]5m.ACR3,>'Q=P>Ho`4,aO)E]5GiuKkObF78A)mBVLPU`'qdDBVMshYs\'+SWgW.2Lmt*`F4PX7)<,K[nD:kP.TQiGl%PP=KrS)WB8:BWQ2+1Q)KS:3C2=oLL!4Ij6uUCc(/j5FgE&o`AG3*!Sh\+C\#*mS.EB!SK?B2WnYT[Ul<$.]/gHV^I*LgbA^da"H*%[9XEWp&2N$_s=!/ZFLWh,93bT_7!Ei+WT=rGoLL/Igj0H2oZn+=W]RAmt'AtdI&P5`:WqtV7pm$%1SWo?jN6E+HE<4b.%Bf7sZ1$%,-&A!m-i:7@/&eHa$buVG/N>*dgk?43c?#-qZ,IABmu/mJ.Wd%DJ3t\MW!jK%Fn9?-f"<p)[sc74l,li/^nRf&=E0IR8'TQWBmYW%ed-%.d*6"8G8jh%Wr]UX,5'n+&ZMtK#E21W^^_0CqYGPhLfF4!HAIC,cI#Y=)N)4a;ugPa]r?l*ZZW:h7VW?e:YS@7g-5dF4X;rB%f7uDC`M'9cDDHekl6O'Z[;MB(DJ0<&o3,$?S>dPkBIFkma#<ALd8k:C:cPe)3G^,!?LsJk6fGHm=7-t6V`TO0/cHugE/(\+#7lME%Riess4p1N-N[iDHT55,7Utm/uh21WIJ*cE-#HGUj1GXApIJ0=n$"O<8HP#uo5"p0o4_/fL`<C*8H9N=R[=i%pFTFu-Xj,7mZ.K>"%eraKA,#knD#3J4?!P6+V`YjXiEW+5fRBb))cWK./\8Pt'b?V.t^8K\a<aeZ`h"b3Nnk_:e<18N!5dQ`EI0=faX4.,04aH#V<Tl61%oMGYdKP7qu24o87&F=RgToR*D!BXs@OT`9:h`j!JdoVtLY]MZ#nmiO&p1P@e#&iY!/L'Q.[Furuq."ZKp7#3hgP-!G3GXWh?E7q#%'OIe&1lK?DBd;td_/>5\UI(si!CKp_b=M<BDX`8%M-5KPkHfuK3taS_;l#XS4`?]1L%k,J\a.+f=g2,b.bO-A2b.&_3IY"jY2..]%Y)f_HAk6hlfR$o;2an)G=L!)uBNt-4+':dW8[mBTr2GLSHu,D&jhq$cT9K-@-aP]R#*Q<(;)+W7c;0te&QM:l*Wq%`\(Yo<EQbK@%K*?(NqQt$+"WJDNm"P//FJim?F6T%a;;uA<Y0;aFDqIj#^!B%e]cQMe3MUr^%*qo+lR'.oBAqDO4kht8Eoq=>)pT&Imd%3l6uKoV%^&qXbB3IN`Hf&Z-e_NdE`k)Fk1Yp&O9$LLR]AF]C^V@uNSX49%h::?cFIQlg[u[E@FWP/,BKDo.J2.LVW+\5e=?>L6@J5PT1R\t6%kV%9Pdi$-Qm1K0(`A4md:A^TWl#^aha&X91Ra)2g`Y1\INi"TNeD%=NgI0L.Xja4bjaj/jN+2$n.jG:TVDFZRd@L_iLhJiE\TVQV%HDkL<MfZ$2(enWW9;gT-HAH5q,GU6%s.Ib]7O74o2VpZecD^[]m]G8C)prasm:WpJC9M<^F\j%G']("%cJ5lkA2N+C*8<KBDB0ER%9C:*RFLuR0]4a7#&XMJ8d<%hX:i,ejUZm^;3"@!(B=(jJ[Kh9MBKDnj3rS8bs(FHgn1j=Qa<@;BN+2&Dp1=8;3[86MDTb(31nBUs%Xoh)@)9($,grHo(!:[j0&CCJSGJDdLK8X.o5g6(b]><;Cp&^k&CCBK7*;[B1,EaUkMk0::Zh,m:nS.%.[Mg<S\YP9"^U2s%fFrhQ%;@-/RNI!K0C7QVSWkd3QEa-YL&P74ka/+c?HFnP[g.5YK@4_11YhOL^O^-TPOhocC:IT%3%(9;Cbfm&fR/'0p>K!T\?ZW,.kK9Ah%^ATp5jr1++@t!"t20Tgu>kS6`Cn1lM]g#Z2k\e]R<E=W[qZaO^\E;)^N+-Aql[DN?'J1rKZP0C(\%:^^`4g)p&(ku)LqU;+*#mFR%X)kH+eUthD>U46("i"s3U'.K^o^3aC1U#NdMZMm;hE,Hl8@RQhK$EjhQ1jek+HUL$hHu&?#Xe2X*-S+*+Ck2!Ca,pK:AsE'g!1%2%84Ti''/b54%A!%B:hK#V0O-3B_hAHoh,)A6m=o?sE]6tHk&.+,)k.d2G!"T9a@G.E9-FRul#GVkpNCM!1O5Ed&q[H.%n'69]%\c6%Gk935"Di-eXi1b9qS6;1LgjB1l(=iSXgJ%*!?n]FE[q[HgujI.(gB)><OU)8Q/;\YNg2NjHaRf:TXX(4n"9mRoTqCO(l=aMTt]:(%Fgnk0mpJ'k6<e`>Ls>gbBct;OI=Eu[Fj\RuaN$+:^@"C<rKQ<4<iZh&mG^-#m]fqWU3P9nl0h4!nff,\#I+bLfQ)Z^qHj0/5R,R'%`lJj`h/KP:mZdK=j#c[Pl@s(5h!KQ/oenba=a8ujNk7YH4r+2)\g_PbpT]-FhEg.abjN!q\lOPUH`tC7fstd:lPo7Mh"M^lT>TB1%_k#U^c/C"7K*6?hgGR2FYP&'64%JZIZ*4`8J[M&DY2PUrNBsKio'l^2[BI>7dI#\[F+rRh4.Bf'7Ke6_JA>=oKktk:*fFli@t$&#%H>AN*9M!VdVMD;5gC8K$>e;K^i<pNF_oKIR[8cn7R3*uTE<C"[0ssI+=A*GK2MNrg7>0>5[]A-$FQ!/.pLYsVYC*]79l286W@dDT%m^nN1@A'OS+=?nZiH<*C3-oMGR(%)EEC=QoDA\Qha"SSFko<'H,p1uO95HYD:Ss-qg39f=N,.kObOhS7__^WK$14T%@2jqiG#rK6%a7OR4mPob+5oEEmmc)-cmGHR+\6sTki;V=kFr/6\fnt+4XO3Uj:RKR!4^5n8._V1+#jm]c4q_HcaG]$]mD^;qXc(hq_d.L&Sm$j2%U6s&gq,Sf6$hs5f>bh_9EAm!un@0iLntaqbh*#Ruo>unf4Ij:uK@=-X0"SYd2UnIsM2)J/p$--TGgS1ZqqO&-lXXkJQ?hiSi^i9'%9T`4>.sGKVeD\FAYc4D9oLM3JY.4od<(ODo@cARL=K(@7oG?>'O'f:NPM!VpYA%[=\GDj-KCAl]&;/<TIT1O:l,)q3\*IaDqI138%pVU\,@.gdSZW>6`l"P#(eMfiV0LAD"I>_Ii4IS$m.UKlS9T[9;R`c*388f&;Psml+>uMpIrK;adPA@:=SF=ZYT=!4=i-qf]K#ma+%31j_.CV55I8NO#YR]P?DA3!GU0sYt'gEm$tF?///Au@Gsqo>dSo1MB]Y/&\W+YaL!qR&s/Ne">VC9+HjAq<ZQNu_nLeP!`#A!M3I%f#CB]_kZ+@Au"ULDJ"/CCq$gp+ok;do&T49Bq'9Z9)E"5ajWp2S@e4V.;Z>%Et_,Kd5:&?[[D#_QPQ#c[L*0pT-rL$^KBjOb$]PH%pVpsu<Hts\Gl8=Uh3Vgqa^n7R]bg&g?Wt[iU3#?)Eb\hk[f1iPOku!$=QKQ`Hej1#m(IXoEuRE7)_G32H*6h#1X#X.UW#S?6479'%mDb'$*48%>k.A"eb`D!HNHCSV5&.NI<3ra6>n,7o<ehS<gR&JZ3>jB8m[:tn$$NJTdkL+1r3.]H.6GI&X(u:naUjmM"JsA@0'N6G%duemiA76Ie$RCW`2rC$44-8f7J'NVn\m*3WD0"JiZa#1Zp%T>!C1)A5JIQO&:"%`ZV*.-G[JJ`6PZ)eOQ$Fe9?L=YIZgadY6O+9Z%qlnB6mfb7OK._"_XTbqgQiCs@Z&SMTfWQQA8<0s1j;;M:Cb8n:h)eU4b:ZYBG%1OF41]VA&@4+`,c>CEJ_1f_Cb#]$[f5\lJGSsq%MZHfE:u*9%coQnkD-^tu-pX?%R#WlPpVE<+cosDR@?0^n"fQ,JM\s7;(b8O.luSqnC5fem'VIHXg:7jPH6oG$X]@LOC$SFf[^qT<%k=bWX[q5M:Qgu$=.NJFc^<JUB*TBs\4@]#aL/4\5ntD>em;B_oiDMk7=h)@Vb%Guao"cs?Z[72`*gcG3AecFc2=B"JW;<'ecsW&A%r=3g*'YN&d+H]n63u_qLHi:<Odg%euYhRau?9daY+bLW4SaQ1"8YtiU^Ko0?dbjA'4Y(&('&W7d5EckGDY5eI)f",SrG5'rhY6kL%mgN(<>jZ[;T8cCE"5N3t,Iu$qF(P6SkIl>q<Em5QEjpDoXDdddklq]OHi:#rA@t9Pqg88MS&tM+o,[8lZef\6EYc$J4*JN&9S8C*%?Jf)`qH4au[*!H?Hi:$ap"T$?.arbCXG=A6]:cXIf?\-^P]Eh^hY6O\+QhMZ]meO/;!T4]?9d`Z("J?4^$bR"%\,D48DWN:5N;n^%EiYi#G(uRVoip;XVnU]Blr2Uu4@Qj5cWZ_sFLGu:Hi4B)Bk/"]O-94Of?\c\[5K4OpNuiqnQTe<qQ6<0[H"rLedNf_ZL*"BT4MBA%K9CV<Hi:$ILUXdSDi[gZ[.j+X+89/jX5EWu*6.aL=YCAVn$_'??9`4$*lkq^J$5L;XaZ%^9&$^;_r3f']mePuc2(]K]ADjdIB26H%p[N+*8]0gW^:b'+O`0nSaF/FTa3lk@Dcjd+Dk!g&F;ec+Hi;NI/Mss5aUpmehWlPIQf5&q]0rK4n)g"[fTu:.=h-Pr^L4^(OF-p9%&bim4?9`dVYP[2B-UY.a2u7FdqJE_)b2?U@h1O\J>Q$DQ,HFn2[Z5X=]%,-dPd@L[oeY!*OrLW;`HJoGc[)A8g76TOp\L;3a)RS.%Aj>E,l*]+npV,6t]5cr8p\JS<f@m?Uqs5A'hs4o,&It:o]US?^ZZZc=Q,GiSos5-a<@m]ip\J%Ml=]%9m<#P(PnSh!Qp]ZpB@hpl%mp84q9BpHgZ])'Cia+ibj00\ae+UJ(f#C#HPi,GNGg/A#3"(nS?!-"STfZ>54\:SWf^>f;G0qe:Bm7#BGcqQ\eEJ\?GcP,`3Rr4u%muMe;$Ro]`64ahX5XM.'lH*rB%O)`%k467]<j#9;Etr;&M%c&O[Lbl>O`gJTi_:]Z:7ea%=4(iK%kPFI,I:Cj;]`jjrem,,k9JU?%dc\a[[umG`G<U<#HoNaga4"YF1\dDo*,`JnqeaBnrRrq]rj_s-%[r6mokXBt^.HYOT?XR/dH%GE\Q[gu90R:+SIbM0T;(69T17c*%EuoSO/4Fd3lOcSZ`-!mUbT^rijQk%a>jL2N&qMQOqY0'K#5c,]=qJZ2AAdMY.p]]Q>^[5ElZ!e7TJ"ZWd!?8%ddc[m.b1`;6ud;\%&m&FScb^@.m_XjnUe&]$D_[?2?baB'EM9TqWd#V$Mi2$*)"u,K^ec1Gm=O=jdu.er=if0I<&W9*Y(4Ib#^UO+\&QX\cs62.mKE=,%@V3bi],n,U!Md6cR]\ik-iR'=A)eh`2T`KKbu2OPdC`.mM:3t=+:![RApQ%`@^X['+;OudE?neD>iOrV82:V3]EP1//o(8^?JU#n%g_7rf.Wd&6q:;'629#Ejq/?r;3.Tr2(p<Xqqn:<DQMs2n_0%!5,#cd;G?:'Rk?[C7>NS/Q",U^V6:dX%p@E3fj"dV`PC!WNEOSE<%.d>B6(]Nt0$:4DYn<P^\l/I'\gu6P>3Y<8gcEu4Cs!F\cj#FuabP`Oul26:/NB_tU,!rLj0USimR(^!k$6ucC[i]tD@#0\.3?NPM%*6ZRA@krQUdA]jL^YhNb_=7M]K-:$0St)F&#]8HlQ25mS$o;NRQO)fXWX0,4dgnITY>30N]5du.3NPiaU\f(0=Ih->IEDk\.NrnS%q*bq!IAj#bWHQdRhZZhgLDskZ]n^rT;Fgth1f%$=>spFSd;''n/H*q,^;drY#/flC]4KVR!M#uJVr9'F2^+H73<@"VL%iL?KQ3k1%T8.B'.!08fh(.+)UBJ%"r'I/e$5Ih!!g0PGQj'Ik+A-3mHr=QL.nm0D^6:Oq9UbBY0]@B)S5K#.C69e#R!=:`)nkN+SH*Io#Lm`1%Y`oJG*B@Gr#O]l*5(1IWB4Gk.0-6&5(uKD`,t[[V$^:OWeJ?j'_o%6RBT-l[*tot`"I5io$KVuo#p6CA1PP!b)L$]uY9$-IJ0YpX%GDu0;p%"-S4]Cuqg<qWd(kj*,(e"6]"!Kj`;7$\ZSq'*h.be:c9!CO-O0[P(1MRe;50j#^EY90:hER<7?+P&^T%,_8>#J@bDJJT?%.3)J4-jiIN9ctou:#SLNF7AM.P)1aP(J*j+<h2_9:uUX+l]l!&`k:?J&24GT<+2FY.nE;98>c8kTK[s9f]HN0ppu!T&\5KVdLPOj%m7#WQU)Q).A'C!V:$8IsiRPCN31fu3=s)rH'\j.GQtP>Kgl&[H$lZBlXK4YTOtVQR0gHDc8l@*fi"7%OoR'*#k4#?M8n&+iR&^7U%j>T?R-(lu`8,CL=[s!dQPG>*B#N'"nQ2X@qm`YEeEOHC*eThWR@q[Ac8KVc=.s0H"i(b7"$XL@8`^0J3lVN]H,pbG0TT!03V)Ge/%&U;5qMsBKXAZ&6]2F:J+#?&fU?ZHr\4cN["AE^[`7pRN!PAbS(osbXJKdQq,&J-%%4c!+InI'`%p^0)bVpA%*AOOp-=6^*`'n!WH%?IkZ"Z6&jKgf$QL,!$D0+P=jR"[l9.pl7EgOKmFPb,gBgrT%G74ou/qPl?br(=FSDmJQgWGN5FuCuhNG!dtO@B4KqJ,\b6:n7Ng?%*TUKkVZ^c6`XJCMTt<0"F=MAhX*iiWk4[lSOlV$em]I_,7kimn)tr`#g?$^>M\N!$%n&/H"Qs3rV?j01HZJuj7$fFgO+!+!>S5"W%0#d-tEJp/^ip`YbZ4k7c24F=q*3P'bOC86[6T@78'=\<WJkXEk+'aP':foPc(;-AgX(<WZ?Ks9ZF9d$nF\FJu!LpXiH6j>K0'^$U%UuXjO!^Nf,I;tI<0O\fO-^+FuY:?lOr"_Km^-aFO*ipn!7WO"iVoM+DX,ePR0Ip>OJmSDu9Fa1J5:4e&$u_(naV'8!(9IRETAL1_%^7KT\)?@+lId)%Bh0O_Zhu7;Q#'^L"3XE,amSjWBp\5G#A-d3lgM5ZFJSf)IhXaL^kPGOMO]4Z-fa$KT?@tQ4[dMm"5M<*'b:Pt-%!7XoWRtgG_EiB4N7j@HHPufQ(VBFAFkZOlUV,;;s^427b:C.<A>7X%HQb*M]g]tI!>j=R&;JF8Y:_ud"VoU/a/i:32Gs##B5+a$H%kia?Rhj[rlI(!S0U/jHVc)6g]9+WF*Ak1.ON;4/*gTANnX>M)^0l%=M);D""qU@:/@l;J@lr>QG<`I_Ua=^9IogT"u/Ddc7r*##k%$Rbk0<*I`n>NBoV9Qct5)RL9*QQGV),F,Rg65E_-\GWsBA2NWlHk.FLUiPaW,;[$cGs>jAGQd0Tdq@+!RF#i8O^)BC'Uc"H!1nO-%#D^2R*nK=rR.4#jPm,V0Z_T!f3._C9K21/ObpoA*#XFe5Sp5iK9Ako;*0;5*?K`&g6dfJ(P<aXAm#m<O0.D1Tj,GO4Q3iDlFNfLQ%*,[kq<Ri4_$7KKLc:L2g'(R1lJ]U(4?''`_Lm#QFS.2eMTh_Ym]M%GePu<&kqn!bf.3DM8W%aPj_bcm%5WucSfg?kFjkhSME(crr%p>XB*Js+p1.'VH>!sNosTP6hCNIr5AR,K#M*)5Uk$!WLf*eD0L":0HP^uHF:lc4tuBtU\@S/L+YQ9IJs7["Pe5o:"KT5"^C4p[Gb%d.$sSW"A3`T-f=lc^f#]jM"X[%sTX2HG!D8KYl4Ok_,%3IW%2V$3ifd<T5roGY,u$#-GaR5NS'Z`'FhRBd0T07Q(#'S$\6u`*%kZ%/(mdX;R_\K1P4'E\9f$S7(iCfdG<NQ&%5.*KpJT`]'i<RE=%AJO`#q#^\SoOJXR2CNEZN?KN>"dj'tJ,4+<mEYBO0IVTX3:C2%tE%HJE.58ae:?NG&#MY(#3*/njfK&I.(HPkE7bj$7Zaeh^5Q-Lh(W;q<a'!6[[jVQ=F-d*CTEF&W+.G/S*L$F:/a39/pA*2O<GBB44n%)2NET1`T5\6-#B<P.d[U]4laALkA!/n=O9#em&(]VFtRM)9Ff.Q^@5U@F1M:#>TAS8G",RpQU1RldE/+H=^&3hfT.*GHUG'.#lEj%\#E-]PBoj%B#B]^o!.9j>ic(*1KP\^5'Qh*T+eBcf*EXMI"kpX<O1ir?9K'/+mOr9[_m'd*6f\3\MtPkTD>,Bo?`7HM`n:D?aok6%%9kmDbm*@_PtX'?8B8p:%q/o?bhX)Sf4PF2\r%9E:bQ'\dB+]g(G9]]r,2X5TV)MHO07F>HP$hhnEBFt3_-E'(&2e2$>%lpW:fDe%b;Ylc?(pN-X"2O)-_MW*lVnKS=D$Qk7k$K)ZWPX9q0BqBe!#*p1[/j9*9laM,fk#`P.G:/m\j\M3cbpO-:'Q<03LU;#gVXuK>^<1%k/1$Jb$hiRWhZS*36c_KVR#[`-:pPPYHiq&JW(jb!#ChgKNa0W$"6iNgZgph&o&nKXQr3oP,U1&1'+fY<9#S;MTL,K%(l]=VGndd%Z;d`pjp=TPX)uB)F/IOBNI1_/4@s<I/jme2s2m!;Pt!?ac(ZTY\,_T!'N>JtpuoW97gp1*QRR)i(uIp;7i%OG;+h,C#6(SCQEVL"%59%9454`-o:sVkqa)RA8U8EY1VAP\LqinD5s)]27K'.+A%e5QWouamG17u6A4o<<M`N&NG.m&0pFuB$RIg;-qf8b0<,C'<LQ,W&V%h7h]K:h;hqhpB%GA'8#&/bnh=cI"e`VL[c&A1ulWB=VZ`$to"#J1-sqU0ggIG)&q2.^<bH^'d;`R0Kc/8(2c-!'BMc^Jk]n\AP7]%,]r,^o/Ylf/+?5EXrjWQeRf3V+om-&A;R7QUpZWl)?qZ0]p\uEdgNQt"mX>:e2:f=d!*km:bsJF21m1rkZ;S@@!0l(m'32TpuYi(%eG4e.o+SL3S<o*a]hgMlQ__2h\Lc4Ed-V<6DKk.58*tIac0uW1j2ngfUt1;>-A[BnW,X#Va(6+VINJ`W!OU\b>iK53BFc3sOR"C$%o$Rb:\<B#\i2*J3N7:p[K2+t?8gZE?8&Mo;,Dpp#39W5WMKZ%>YBH1302(JWH"<J.Xh=AN22"0:CKB^4^b*UqY`AdTERa,o,Qb0u%W]&du*TP;f)pQ):]MBl\@BJZ?T08@hC@3ss4fBsk>Fug%E)b><#inc6MQ1eJDrQW(X\'TSV(YGO<GL[JX\(V/M^(N,.j1e,;)G!L%nbCbXarj/[eM\^!\nLO9C;8co=bo4(H_CJ$$UM:`+=LN_NSX`KGTXqDh\L&EfgR(dmA5R/nq?6C,@,H-X^!#`+\Ffa42iVk+`R89%c"'6K/`.MN#W^[`Q:'(r_5[*JM"P3_)E8V[Q.he:#cLkp,-kLk!jkKGZ,#>lje)G=KF-V!L'd'W0C*1(s+uU:(\usVH:>nZ&.o;s%_U#*e6,OG2D'n]\QSB[BQGoq+#(9em(ZAgE=^9I6OsLC+%YP8kqWi"rgOmiS#T34>e1PokKJ0h[%E_OfdOdV/<$Q55Xc_bT;iSj^%1uM1VC1![/XT:u9jAmCT4r_2iWc&.@%em[[p=D"7TEtn9&eW&+-#q-CKSB[oLp2m$6qc]6-a,+n6P+SN'a11c']@V]+D;^q<-ec6%qg&e^!Poj.h.q"0Woc27,(:g[]GmT=]@]Hq(U,2q<jdh;d5hcH-&Bp>EZPOfA8J^r+0dC?ZAbo:T_>LB9'\Il]2aL:M?^BF6N_qr%gtTtVl3[sc&Ii21b%^o1HEErEA@n@>Ci#Ebe"F%gbe?E_KT.6dbp$B"#%P]a1"u5o=Cd/l/!i:8d'+#hs"b$F$]TmDg+D!&oW$f5%IHW99(lNiAp7\s+PIWmEVX-ZgabH;Sei..^H:p0Ea_RBO&%s8nR^^d`b-nc*RuF2'p.fCIA)#i#D&]5.7Vmiafo#aSD8_1`YK9i3%Ir6JhCAhf<g6eFjfM!l/A%kR'X`F>lo2WqL'ahYLLZYY%fd^N>rh9.fJ37%iopF#"Wl>"8*G5j@>XW<CVg\4>P/HYkDjl=?C(<$f%gUY.>1p(p"$q(?f`;_7T%t;M2:7@#$R:m9s7,cm(fAT/DS[?^G!s=[/,V(JTUY^#JRs)_7c6Rf1GZDAf/3&hgS@8suSiOK7)QF6e%K-VOD[;#dNgCDAo"of\E"s7smji%2=%S@oI,lI`S(%C6&]_^C)3Nnr+Dj7R=9AQ<T57X,l_JBpK=]6C$9UK9&1jDI2^F,sJc11&n%<P9[i3-?D?'nmc,W2u0[j`k`<<E.FtC75XQ5S5@_%C9<0LN)Ks,!dsQ9nK3e!.tIeW#1HL`9<R%5'(f[4icS6HB.TeSDJlE=GB0s%i]N->6l?2oLrI2Wn=6.S?@E))fJ!tM3$eeKk+[6&VF#ao_fVE+i=b2\7l*!G_/]MlG`K'd_AQ!c*.3dc5Re<*R*Jg$MF@OU;"lrg%_InmeX.J?[.`rnSb*s6ma!",'#&;@/_AFNB0YI%2.,n_nVkbZ<"9Y904os`-"$C!'/AsE-+1qWu7rJrG<R7Vhi&M//NJHO#J0tk#%:^Kf+)e5OW^c+!66#XOTHt3mQH3A@Z6pP9\186MCa%uu#@1k7]'X]63k$rE+bWp'.B>c[_<[7q.CR!in'Zr3HMp]$;IM3+0UD1i_%B+sJh`j*$j\L?Ha'XN@N1?aiq,Z#L@L-lCfLE`^DAn&,H!l'SH\QCs$!J5J`cP2.<*l)4*,9hr"T9N)@V<h$+5pPt-Pfge]mV+]c%`Pt^aL-stC1-?<dFf3>C":#qTZTO4t`hNOcO6-o<%.G,l06j?Z'7a_UU,i#e1bWZYMO*-ni0sig<SkOSBO')M<6m,=@2S&7*T^E1%#'iQ:je.2s`=WB-'KuR(TEB15Pe<C!(L0)=ap!#<#cn)'oaEQ!#l%*qLasR25Y,g,NlP]B8CBL(:?abL\]5sp3@9QS8;p(W_I!@C%Gt(n_CMa-<W.3o:5VJu_=[%9S$j@o9OlZg1E\'^j-3HCS56Coih6?((?c95IalQC?Qbc=0JH9%-$5B_/$@3uDZa_RM<q8$HcI-^&%+27j?@t4Z%H&4R6ogneH"^EJtdhE%m$#2na!>so-G\6b2;AGj46?uTcP;f/4!=]Q\nBi(>Kp7<!21"[VX>)WY.QLV(Ii&n'ngq,-%]RWEJ^Lb+7Y,/an-1h?9%f>BZh+4+5r,5q/dOga:#`uVdF4E<T*#5Db<hWFqLptE7`:'3hqdO2s2''-CFuUHOa1(dbA5H#XntR/f%hLG-hmY5k233OOSNo*>*#-`=EGmSL$q>7]`&G2&ug"O01lM*Bck.j*;4"HCu6q=`LMWArUp]L[V7Sf6=Z5gK@1at(5l\aSMDDDs*%e3J5K['pq2Tt:bXbCrMjpWomGMZ;g-A?<^\Me_fdY3mlUEEoZU:Lhu2ZMUh<7ZmTJWX\3:ErfQG)!BT#YVVTglU@Ji6kk2Y]!d^p%<U]h[G^OoLOKQ#mIZCtX3k26QNn["jlHt`nW!S:6$dZ?j(%bFqdj=<b8O^$Wp39Y9([*4]\E*"XZ]ld./kJDfBQOu7J#5'=OWejf%ZSM?-:35I$\2/?:Sg4g,7"G]1SJY\e`iKN&]311qPH"hmSeg_]YdD&EQO<9>o%3m!luaa^TJ-=*b`a)'^#ZN29:\5u>GT?&H$pV^%$mCkYrT.:BbBhG@lgl=.M@-HP_(7JFktbXC$?88N;SMF(5#jH)e$)ta)F!2cFh;][0%+8j(Rd2NMat/,REnIQ\?ke6/<(%=O;H!c%7%!/_DpZ0gNHZHH#8eG9?.c![:PQdn,m9\ZkSdA5`o_`>WUo:OGFkd=p/0b2@jHM[eu<D?Dl*j"`oemik#n60=05U[=0::U7f$[Y%K4_5W3d4MNmWS+J"l*((G+KCQVDdT\o<]bq\_kub()7k7\t`HG%%np%68O55VMA3s"e5L4-=N)1qsV5OLXtp?p`7GcB#Zr_oIGu/%QL1CED?DjR]#!%rcV`is^Ya`(`;l(\7V`1BIQ.CK%1H-$-rA9g6shTqO)$NXj!*Y8=ePi[:X<Ut<0a4@NFo<0K?0:Jr"[;D,]deo%PmbfZm*p78e$!`YO^c9_mTt@\DA<XNCE:0=3"in86s=nd>A!0B%,4L'%gug)h#!#RK_QZ.c_+G,f=-=OA/MOZqNbXN5'JbAiX74Z%=+?5p5d(glp<oueqU^d*mj=Wf(Qgk)PdtFeX*92/d(5kiETN@GB<[?a'OB[_RW:\UY8JA'jT=JB!\\N74n\95r>8K/f>W2$f?fma%L7>6aJS8"LfVhGM45B.HI[6PYeBbO<AU[4?!7^G-!;WSI"hRHd_K3Z9-R"_NZa?-/FiO2YULS\CX0u(,#5"H;6Jmb2FAlIFTijQ,%%OVo(^^dffM*SGnp+E96CnIM[eg9TP82qdF".Z9Z:VBXL08E:a6c^(c(4QQlB&]+i&[3Lo>SA<`2O;ppSh6G8DfVLep,/LjR"(;p%k/o"5[dEg,kFe1.heJaDFd9+G8SXi(Un?\u3IXe+C=T.^1=:QEc?Ap9ZFo@VSu)kY+bqjWetAr7>jV'%O(i[$A=q32Wq%k&?Nf:P%1+&[c`cgUp<c6PYp<'E6!nWap\]D1d\*p/dgJ$2oD:VlRjRj]Pc"Mi"%lUg,pa%"`"^`A3K+XR^B.pj2i$8*sA)=oYoK[:MLR](g%!DS\`)LFcIMtGM\CG)tlP_UIK*Z(@.'Xs!%Wq7r_QNDXtTZ?h/#&nAYfu<TYQNZpfV[4<mVQ;IoXBag-6/jhreL<i*8uC?W_SZpj%[i'`H90=BW<2lh9=l7Lp0*$?Pnc[WXW5_NSb&tX&@m[+4SYaR]X#$WI2(Rg`[G/i+^PlgP\og$=mulK_b<imqc?"oIcYHNa7X;r`%A5KnJ18Td:1-ChKAb(,>TKf<W*]GI,`a,In;kSpdM1J;*"he?Hpb:Xq?.5)tTn_PDp*.lD(Ei%-fHj_Ac&`dO5X`W3d`0)fN,cJ<%1@4EcDWadpbKZ,k2n`@\GcU;mF;f<`IHCiMrJnnZE4-&<g=[.H=;Y!7hS2m]0<pbb28*q1(E#XR(_Q\"cZ2j)k"1'*dZ.fV>MYA?%!7Y&=#,a6'9=/WJg/e&5#26-\qYE+gG"Qm^HcMhpWk:=.g;UQ2$+)1[)S1_<I5$/cIQ4&cR#,[Q`_;u4Z,Or$m20kiZ)K>CpJaO!%C/[4A3k%>bP0V@R?='?_oZ$#;K-sj;Z+7q,-#RNapDu7OT_B?'pFhaj<@gYsfW7PtSZ0M"g4;dJCbE$6#Z()E1ZM/IK[YBYP7V'Q%>Rm[8\?NMc4):W")fMT[fV%P7Np_"_3UIV@$)'Ykki17[HbD;<CDOKop9pp&DAP2=LVB4Ce(pDVf]g6WaI:R2Cbi,@QFdsHY.=0e%4^Ze@=``>G$qME@oe$DB35tpA)VZa\YA4nKNBOF[0FDTfFC!oO'u+El`H=nLot&-T]rkMJSnW1MK5mZk-eC5B>[nbgY$"-*%=2<D%BYCQg7'CAY#<#:Pf4_EM*p*#7F,tgjD3?=bP"dPJoWfgI#@,i1Y2\g.A^0CaJOb"AY&^PQ*P\6lB-8]e(GLYt<%Hf*hbt-fX5!Ga%X0"^pi>8$PG#Hf[O.Xs)i0eW)AGhs`4iJ#BiY,d\(7*>qWRL80:H:\blt^laWC[MD!.FY9\BT'EQ=X6'jp8'YK0:G&<-Y&X]`\B%%%J+h8UdNbiR@:2ceY*eAV5ssdET3iNdBlKd6P/-t'-\&MXr]tt<ib]#4*b[Sf**pV+J?29'g*/3erh7q/L?'eGFg,lX4?=:bAFd@%>EoF)h3Xq]V2P>)1(KbJ+?[g3C!pUH@p*b`m[H)T*er"mkM5!;_3G:-qcjjdaahQTdf*#Br2_#`UL5+//E&7lXW4?Jb[:EI_UH,:%B;=(HjHjOZ8.JSS5]"oA5PEVe:sehRDU-=]4AA9Wf-$a0M7!D2^\L\Z="<_s'8C>T?3W=VFQY$mWY7`>rYr=UEgW:9S,*<6;%ICV%Sj:^]`4g"HDb?\[begJc4#KZ*QW3%qZ_FLeId@u3]?J;4W[3)]B%49H49#5!Y$PGT(%oBHL]qqVh:ZMSlZ5=p8\I6q>A(./nJSKf%nCMrnH!c"plEjo!3hk6%?=$k1hKld\"jGGn?]uPdWl0VOD<0+Q801^#Nf":n43gKkUIRcJ92j+#;*?l>caYnsQqC06@'iSP!50[)%",Zo:7XjtRh3+?[^9/i(3RsJZd2PS?ecQgcPH(\ZWW!?g@spUkY0RXhp<$?1m89pVlb."]Y]n#C;FYVk!aW^'ECj>tXt:-j>tNc0%CpfY;^m89`q'B3f.n=uR8-mORc;GICfBJ2)S__u6/^i<nVt_>6qZPX^kY;_OD\X.Qp`!kIME`Tbh#^L/4!1VVN"`h$b?9%I9Zn%/%F!C.=F]W[qR]EU'7Meg%"daTC!BmI0n=*tb5WKe!/)4GW]ZcMk#)b=jK9s;"?IB@C"/UJj53F!QVB[`<FJ2m+U+Xq#f0eSX*d%!6%;Jnip(ESUp>1@g5;)DU[dL=//2lIo/a-*3bQ+7*J_%GLJ-5s:TLEP<Vf,MT8)c,dheJe!llK8\'+D,/>KG`jJ^S$N!NDU6.5]iZ*%DZE;ud^>\al)"J48q28Y*LniW%X[mHS<_e6Ic!3f'ju:7h'Dn7+@fqS_L.rCkqPTkL2=D]HG(J@4uc3K0(_2irY<[UjNg)18%G),%)`]YjDT&2(7Rbg%HK^te?`&#fpZfPP^e%)5%QoHbPsV5(*@;!nF:])3TDD(;=;d4a<K`U)/R1(Mnrdsp-ie=(QXH1o=e?%sFchbk%V+?XbXqdg6+`0i066#;\Zr>7(dCL_7M+*Pg#I0E2djDS*)J_Zp-`m[q5VJkllY@]l#X%nYS@k68'pcGpZa/010WXdb7k/?9c!O^s%A-S$?"ZesY5t-2U&;qMF(N\\JFVrB%.65<"0A=a!>aQ_O/O<rXO=m@f%3jPd-*Eb?iZ80rMeCT67ZX6c3.cB`EY.@+PTbTmMiD>9%`@hpe>>YOT0RO#J3eP33A!4fa83f,Pa^'3VdqMi4*D+#E;?/<TOK-lY5?0#7<>gh=<Ya/+fKue*:0UIK5Y^Zjlj#sTU6!6\)4a7;%&3*>nKAIFsVbU4@!(UmKV^e-3GPVIEOYpAN!@R6P(%Gl1m&lo!c/Jm6<#k*R;-c(\\@DW#T-9B[?s\l)B@^k*_?l-.1;m$j0k)`C%biV8m0=00M7bi,m7F8/q1i#><2(V?(e=e+e,UMHQQgG(Bg=]GsB/;\qk&eNu=pD45J;.:_2N8((YV)iqid"^OKOK4?eC](4;t@pa%d8XibKMou!2J-H53m&o][:TjU]k0u7A_8m'R:su`hYF3KW15Yo3&DGUBH/)p+b0IK'\P9c:X#LnLDRHGes#\u2"q4WOsC[W<c8GZ%Y[6]IjROW(CqSq*&k@%sQU0uh8j!chP#*Fd705H'b0n=4.o#V%)j]W?2Ed=fhAad/bIfMokNhFCiJ]\jg5NKA;#9M4.`!abY-%>P%6,L6lhi<BF1P/mDF=f+3OL$43\'@Hucn?LR$W[>T"a4@BBG%g!0(]Rf)DIIh/SL\`?JJT?ng:FG!4]N3&slW*f>aIN##Bc@AP(5l%_G]jlT",_-VLZ-)BJuj<+6rdoRUs5k$*g7BjYkp)YEjKSkn,7<+uoso:*UDPjf%NNc<=Wp)JO41)S@bknIs:'OL*VsZF,F6j?OR:%a+U_M=\S$BP-ol$pEN$l"ICQ5's"]4*1tTlT,@^RWQ=rRE\L_7l3M1#*Bi$/0AmT47;T0`SRrm`8dRf1$?8k(K=CEH+6JO`^:Lb4%YF6$Ka2hRUDunO/[XIQspMr=FD9,`sBh:Q/g@E=3)loJ#(M]cKa+&Z]dUr[fUI0cnTG:\f_FSL$[IU(7aWK"#`k'U/iqFC4f,D`$%c4q?Yp2B,O%UZ&7R!Pt:K#ha]K,^'h#E(ug%FGPOQ<=Eb)\Ym0c;^e.gY8rFPk`5Z;<-hnetI-mP2];!elW!X6);t\<>3O`&h6[X%I6^7g9VfKWB[leLD&@AGod.?6=C?qY*&2Lr,,+*lbOsu(cOE6XI458&4B=g#Y7;rP$1jb9CNK@C1-2;B,J(OHK/`@r(Ugu4c^g@<%+s^4tj>L',%s<.8Sa&+$(C-]j\$)?%[B?Zmf*h[bElbsD`K^l%$",9AV<%h&%K,EV>$7WBT.3V5ggi'9GSF*;7ALG!L;):Bh6-n*%1mpFEI^UO'A:ZGsco<)O[(T).)-qI<;':h#)ipKhV$n?^AHg8M=XeV%U?;F?%CntRQGKs8ke_j57Z*@V)",r98qB(m2-;!'.X!]4%aJHF7)uYKSe%>*Y<fK1*L[;slj`]@uc4E(Y)@+RS[_30G^E?7]s0c9V=gP0%$a%X:cEKRFCq)SD%DIT[IYQ+SS7+2T.tP(obR^KQ%\t+5)*I)QIcH!YG(J-hYQ=EFL4m;;=<)C)\O!?1e^.Y\;i39Z^b_hNt&hH:s1,K8YlI4(`,<=e'7YTL?3p@?*"hX)XA+$2Zm`SD2%7]2q7"G%g/6](>P#oga,==#O0UY2Ruk<o+ISt=Xcp9fVaB3QbSlI-;@?<b3i7Sqq05d1h/%ENXE9+]DB'eV&aGkr'X*l:$dp1Q03%1e^Z+CF"ps7\/T_LplWq+(O057r5f81"I%Y.e:l?d9l[f',DQYL0se[FICtfFS9bVfr<%*hR*+taW_ZkSUChMhY!;;o2!A>npReB%L>od0FXH=g':U61](7Xb>\7if2=%3G@V%/t`4V;**dDOTI^VY%^'u;s70ehtE@UkqKUt.j5h@oA&'f9l)oE5r5r&G@_-!.'@?lQV%1Abodnd`<_gnB_bJA/oB4;1F(Dh,7]onK^4b0kX6PoBVo9cB,?HL=(1jYNMP@J+.67uL#ME>fdXIAF\aLl3*a/2&,XI[$Ka.PZ$K%c?tAVcng44OKl1SUij]RA#!gCIfS3/F,?gkOUor?o9#(GEq0?1c[:cJ9Lo.%`PB/Hdt+SXTDBlKe&nT&M2Uj<rL!/O_)V]Kdm3+6%Rfl!>`m,r_<Z$I!D3!#30Ir=7!'R>(q`rGj:48a57ZGj(oG*t$[C%lRb_H);`A.'@pm;_#&J=j3_iQD?%D-DlI58bG60uG9O>Q;@%)UN]XV0M'l+?8<Q*X_ma_jR[(*NasM=t*+G.%_9"R^II58N;U1\#D21`IXADE'V@s%$H7?F=c5NE;D(HQ]kGe/,)uN(-?j4b1E/0%3P^G)DC:/iopkTaTT1rLf*.,S'&Vt;rGF`hA7a;B(WMT@T,"kH?#n;&IK?3P$t"ntbmf>7\7!\0cAe:!7jGd_FbHd:)Rf#>Xs5n9%=o=^5K<\l*!H.[VI4R6#NFm*qgA/Eak>YYY&N0C/O.Bt@Wj$]%@,c^Q522P5nTCbD^3)eq@df2jEF;kQT!<(IL\3_?dkVe+k<P(b%6U@'0BC%6kNuBeiaKn5/?+Or;2j7mK3G/d,9p615>%;8fdOG]+_t^I$2tc"0SX+HVh)4KfC@?046o-1Zl\?W`&!OWK<2piM[Gc]M%K+:[2J"aYkMsIoZ6U?=$`Y*r5jL`00Ar)j9Dl+IuSgXCCJ]o%eb>,Oj(gGF'bKV5:T86[V@=<PCBNr?6CBlj#)"25GX"S=n&-?=$%eN]'f#=_'sI6kt$":$M4cmp\#03$?j?2OleD49?DU0VDl>_MLOHcJh'^#Na$4sp,hZP1p?g/(cciH'"!$_Om.H.7`Zjc-LLQ/&5F%,AVS#&5>%>-Mm?L01DaR"O%(3@jW#<ANA8P\n79e(iVD=;!!?^"1lfp;"+?#9`\cOFUhTW@rT*1dH_N%W:uF9aB7pJcr1D.HmILp%]6)!H:1Dl"JWQ[XOFeBO"_bip\6s;PT^aUtDiHBdWFWp<qDM_F@IY,8'iBIE)N43a+cF=35>4E;kL[0EkuGOH]GY;crruA5f[:o6%>tChQIKi2J:.?p76._M#Q^#Di55.k#9KkZ7JNPAZk7i3rB<a%VQFIo)>[:qEk.1*5=lHdb9KI3)pNZmfa4._sA3qu)M&)l>&W]/t%#TKotX^C390M+*XY"t3omlNJl[NbPjdh7dQLsP2lE!Y4q("jUh1K44rf=+n6$$1()R)5;@'A6/4`Cl+rguOZ43QW-O9hPJUVC]Dp%>%sMf0&ic9*om=.jB`&hm%%9?/JD09YQcnX%4B?KZ"I]bn5C*e&$-.YN&.Qo2^@9&E?@<,Wf9l47;`A#1mHC1j2c'\KBq7_D#Z;D%ksc?2FRCEajD*tpB->RmaC?\%^*IH7WlrA1_\]Z1N"!';)9rjOY^\ASF"DVsiQhZZ;V^gqOA1qY9&/g"?rgI0bt5KZ&):FsTqQJq%S4ah9FOm.?en0)M9*jQ[kr2%/P?:)sV.j\[pIEgW&NqRAKGi.n?XS^@jM>-N0,B`:[RX#Z(EnWg<+ut1XI+^/&>5L^Ij+2B]?5GS%n,Q!Q\qT3RE1"C4!@br1F:FqA?)oC$'k&n_4;"*A&]Mr0)3*2RT0mQWkJQo.Cji?lg73hb2Lj/L_(2>mT];#cPS%TN'a9,#V-?>e%<1e+>ZY_TfM-uXn':RuqFm=JUH<W:HK7[u]T'48Eo!tiH8+FBfe:9Nh*.*;LFU*5r\GQDI:DjaDLN/sWI%gB?)'S'HMIIB(oq^[`%JDQE"8AjmO_B?q<=/$g9h5]/NduaUt,i(rRkp7'3bYOX`E<7Bsc]Hcch]RZ;)W+Xg>'Fe;P[J2c>_CBoO@q_R-U;Rr^($BS/'7r9%jO98T$A]k+@?;,-ZNCU`!i(OQ7A-1;H+H)?4>%%hN)1TB'jL*pL5e^7Bt063'$p5]s&[\A%ANL(5.bcbgf%'uMuP40DQ],h$:;id%6^hptPV)*!ZHouor-"ld-mD[c:1g>5i@m7upj<^j'O3Q'Cp!m"4.dpE!VMOOi1Pl)5YP0C9I:=ZlF5.t@hfX81QntC!SP_og8lp9%0Nu4+9NGppk/KR$TDMicZ-s$^@((]0UkP4$[rb$Uclm'^Vd9FaV9-WXPsf$+O[b8>kMF7hM8mkOI+R0&Ej;KM&:/=bTZUO)1-3KP%.:VC=es/lGf4#:514Jj.Up\EYL_146?/WB!jYA]A?>AB0;$37?*Gi1U#9&e4E>k,I*h,>lSf%OFUP=kNs1(qVF9(G/PO7]5n<lls%>Mc8'Pu(kaXI`EY_6a$&#BiadeX43XhB:mI^XPu?Aj3Yj]i-XjP3O3M.r*bnQ>-O*Ld)e"TGet@>e5/GS:]N%oMsa;j8@,F68(W4%B18fkG(2k_a4)q4K`Q7X0hnHZ(`(g9\u]$$p`:g5=-Ca\b'<N[&ut?$e=0A:JAkQW69+P[0I_\$Z#k[rNZ=(B67>>;7#"#^YpG+n%=YM@Z.PHkp&re/Z^R;=78[cbjaT@$pKRc6)7Z@uL7!$-&gBL#=3s8I4&0AuX;G=K]rfp\WjA/8QZ4h)'a^PO8-.%&ri4U:R$0Z.U%)9GAsN70Y;O&/SC,mkFH$'%;qc.8m#"/A:KJaf(jZ38hj=\<M7d[F0\`%UlgV6kn07IOEr12'_blUO:5.P&Z'.P>>rM,S.6&#iQC%MKk@5&/",\q.4,R&?99<b]M5[-u\^t'[kNgojKD#_rc-?'lqE<)%4(qHkCpr`^PmJ1=(uS(jP092L7`O1GO2C2YU25Sj$\4E?%`'%[s)scIW/gSMEIq4#bI*/*n^I./2"X0g\AU/g1MHk\52^`0>6d4SlkMWrr2E+=P4<PJsKD`<5Xec[/F`moE4@3Q;f#!*/k>O'*hj8%54P,:ccob69/7gG+HXWS\?-7jleBdsqEY\._rhe7W5%lGNVpq!S`P>&&KdkKk4PiU;E]j5+7d@I'ddn^O%+?Sd`a]O4c5TG:)?L_%ba0?%>Z9Z(3fF*X]O9E-'h7e?!\_(M#NkC(ET2%o_']AuWb2@0o)hmeK[BsippMqCbPOb>fNjDbfj1>[0/BAhqiMUAc_Z5b7nZg,%9lcR8h==PY&u+&TOkT$h0?>BeSX*6lLsYa#^]bi,q\IQbSRj1i,C(9E!U62dA"N(1(sQ)9/ZeuHC*%T4o0g?4ZG6#tH8nW#I!Z&#%n#f@tTQt7HZ3&:l&MtS,g"<Ua:uNG59`eb)Je#Sm#9VO\OFch*LQ(u#SFqlV@/=*"<Z`!9:G8#E5.SOtQ.M.QTQ=*qq=f-KJdX=d%lK2".Of/A/>H.o4?(8YrBrg:G%nD"#8I-&\7?5M(M?S)t1nRt,SLJJ(5]@h/AM--k#bF?JB&X*%q@66L9S>cip0;0f0L;./kY(Q>%["RPM*XE`'Lc+-f5Jq39KDCQ3M;AKceM_$J@.24##OSMb9@?&&hCh!kn%"C9D"'9M[=3NCHTij.F)#bI`D;YJ/hSel&0"lc_"@)g%)5PPJk_;Wm3]nitVW'E\ALqS%kp<cQ69;htnB)#:HK*W9*_`u)k0&g\6V2r,5>I?+:'<DDai6-aXAsL-,%_do5X_]re&AJt`_c1l%DiHSQN6j**&X0Ki9XG;[a09NY3rF'($iZH9)TcpuNMfi1ZCnUPL8\8HH39NiWCoX9fgVPO8DppU6O[BipemkB:s-p;S-"`*B25K2%-Ti)?.47M/@Q[@o<bk6O+O`ta#=/+kHNs,DM.b28%MGMEV'FQ7j(WqJ>!j?S]FB..0g:a/R0t@`f]f\q"bAN+"0n!D1Dtk=CSJSX%bmr#9K]!8VU:=+tm/X9,cBT;=P;JHsfNt9n>XsH]`k9GfTbXFA&GU=[#`lI20h>=o/:_E7R-f1ke`D):eni\'G.<ClM8(GnYa7ID%(Qp.!dF)R88=O>8?(+8N21YIH6[=Q_g,(B@:O<V(5k+QE[.qm=&7,4&J]0N%<W^$_n#9aoOfSi90H_b-JrZpVXa4@MGBr1?VqTbc%0\QV]H-a&JCrkLY05rNAl,]\I-KpTA?;=l)k8r.6Kn1@H53U?Nmu1D/<_&OB*NAkB5Q&KT[io`F3pJE;>+lqKPooto-O*F,U]/n1%k"R^d$)T*C:'^3/m[kHs73k,.[WSLZF`Y="CSdk7@$=UFYt427N]ITR<[\2kj[VQ+4+g&L(%.8&<PP6c4p`>n+UGi3g2rrTU=CWR%&G8U?KKb72P9,KYX84)>bL@nJ8GFGC66-4J+`aFc5hF_Qnj"O4,bk_.!@6tcbGC_R)Qd<P6Xo@P#h?TXZit'L`hI!%m$>$_OPXGn%!Bp+'7@lg2er^O"3ZQPL_g1N*i3iF40b>J>o2Z3d+\:J54FZk^i@EB!970JX#0SYkf5$rQ9k97I0^,9e_0Q`.SJ*-*[0&08l[9SR%)UhM9cbNpU%F7=,5i]0fM5S`Ze;C&q%`B8\SuH(ue`a2TZ=(WH>n4qANAL69*`iHVU4dL`61Z"$fml8#7SOm&k"[]>#\%gQM8d)n%i+TJ)h2niB&jd0J:GZXcehDZWSRDR%H2>`rb#)dc/jhlWjWU4YBc$Yj^.OE#\Z1[%"X;3;\3#$H3$=I@.)!5bNFH.:.R;7Gp_g2G%X!)2-!YKEEUpp_8CJ4iKi0S73!nhii/WW8_$a@`SG;:VOa+&N_)gf65Zajl@ahWt'2#*U/O<?;1U.$qaU/cgn6oB3UW50-ClK;-I%C@K_.e_l2#W_S?UrmG;p&d;Rugr`0m4k#6TEcBX]F.)3ZD`j$1ASjsVbWo\mQ)>.Pes_?b0(c'-4IdLn!&Vq1iu,5+[m3oF4/*YK%H)`dr>$Zd@>m]O9?%YLVqh1:0EDR+9Bkm.`.:f.KQ93+24/NC'iKosgH]X;GdBIZF9bU%H31K'6;<,pd#kMpW:#e;)$e5a,_.g*j%&T*5AYZ?5H_p#_l\!hM33k]+P&j_!0[\k'F:.P<m;<,k[R.6L-<qC4n9r7jkYs1)S7&Qf0L1i)rK=19V+)9YH6nM<jDFk&MN/54h%M,foSIe<j99Pt9cD=jW#R9b(2UelW@qpEPcgbC.I7dDN\,Z\>?/0ciog5<1>@hl-iHUt6T2'oifbKQTZb&m`;`LX0k5QCT=8<L[t%4LA39\b+HLQ_ME@nY*rTU4KmDj=CbJispgXitjeQK,Rd;P93t2C6frJmF@EDP[dl*8ZSa7.5-#'_S4XY@q8s(`nDMb"O;e1^KD=r%"GXR>LgsR"eAl2npccpY6!(%NE\h5L#QYo7Z5bSW%(g[gFkab1MP7):]m6q>el($uR?lLAcb?2ZNr;ND=Lb8ZZlPJiTPFk-JhB*h%\)]_:qE@`(q0tF<eji':_13RY[Ns4rj\9M6D0F6p(6FXid+6VommW19$cJ.6>QWjg@m#2)CTV<]*"=TXj`2V#hod"c4[o)HB\W=#%8[0@cYP(KelCW=m1&$L]n.j#,1L(qk[TenNRE9YsC)C7\4?HpA!U2Ij_tP]0c9mH>h:.N'W.\!G`m^i<ef"XEUqs\11f-I.74;(J%Y8I1*lTc=#;[=hFO`8@<fh2nJY/s)eq-49<c'Z"Jh^5gMdTaIfka0&r9>XB/VYRN/CMGnE0ih+3#([gIhfe!>9tom=%gb(M12;G-%(T"n3eaI>jDohk=2Z]E[6U%m8UH<pbXOfC;/C3[uAq&\SH@=,H=+K?'?-t"angcN0p>)1-=<3%Y#L]RtH'=F7oW+$E&2ONNAYs!>%EoG=<]D#ZqJ/AKM?i,;2R6R+,RWQqqIJ8hISUTgM!D3:OQbK)GZ8t+BD3I"C&sVC85E]@*)]uH3AOYBYT)j2"6-l@B6+<Fk%!ud.%W%7hKhsg+j>J=BX7^(;/X\Xc<^4_;'0V10cXB(rkVl45%.<UMidh'lK`fW@1WaZU8#.l,6G3>iQo3,E@k7K!Onc6O^U/pF)?%2km%B:@\'"%(H_KHgf7-8553jo$W2T7"im4qD>$Fi%tt"R1JC6jS\)@A,"$7&3@UQO/e_.8OkdHe3E$_)Gi.lqVoba?eF"DG7E@Q\NGC%8Vjdfg%MCnPF$"O](qQqA[Hp3OdsI>@M4HS1F1i5i[C>j=9(i:Ne4+pY[bo;3-=X<2ZCF1!/h\O92E7.eJJW91-ldE&L8SL5cQ1k%1.4dZJk&W;iCb,LQiO81+e='sNhA@9Z:.ju"krn<N?7((Na;L-"N<fse\lq<*BAMf1brU=J;-ji-2G`B#"P2>+40M6K=ig_LX'8j%h+Q/b$$JX7^P5Mad6+iGT.hu6%A,=?'apWnqA-5Yp]Q[)`WO++<;8nW-Z$#E7o*MPocugRJ:g#EjSCmgjBVf'UF!.#T,*P7kkm93%ogU]PcQYl#^54"`c`mHuR_sO<Z'iX%I2c)&O2eAGb$,WaG2"+FoG)m=^p)H+rCrQtj\\qVD+U-\Qsg:$?\M.Gb[Er2).mdp&?d=\%PMl0Z+'F\\.\2(mIlL7V2/%_(e(D]2DrD7>ap01b<SH.oRoe<Kkr2U9#kQ7@i0ai9D"C:UKG^\0TrHl)74sZPU.")Zic+!VmhZB%%nI)gNM6d><Cf"AD>D`k!-5=W5J?GL"]#jR=q?+k.ZUUj$DpOSI+J/kC1$LV4ZRBf]$/isf63\1;NogJtU)X^`$X1hs7ImTPg\<'^%3&I`4]VVV(\1)qup0B+X2`V;m!73:0N_@CK9GntTj$t6O2\.[dW3Nel&J?2P@-oe96X!4j73k\UpeP.YT*p\YQ2d?4R+QfVJ)jL:%^A,>$,XFN%1WHaDA-U+"0qOot"g?u'@m$AhL=;=bSM;LL8F#o4&C>2a/VUJ0rccWp`gY&o)3VSronH-Hf%l9LKBKGE&%"$MQB^XD%'/i7!VDlGW=d^U\k0=Xd$`]H<jR7+VK+G:P)L3i1VF>N[V-cd>i+@;lUg[#pO@I9'7Rf#JK7Zb+bBLj@%+pbB`pdtoI2b0W]526]%<lpuW!:>BaH^DS5c+)sfddB>FI4LNa^,PF:<!*g([f\Vfa>8AIE9IMJpc9)Yep+hEQG_%QUes.8NnTELfh*d21=8PMi!h+Jqu1n/%1b)ONC+]al<(R;D8imbr8*&HA7J9NJX*d/=;Q$N)$GuE_VZ?DIT7KD:'#J8>lKtQJ#?"GGRK:H1Fm[teH1fNUAM1Z3l>!&?e"C8<%@ZV3hOW%"/\^_Un[,fd`%28[9H"8SALAV)Z.R5(Y>Etgjqj9Hkg4qJE2ji;>An^AV%RZn6[n-?-s.5AN2Ls33\HMEAc.H_l]gD0,%[YK9'l<A*Dj(W)so0RhIK8nDp<?PX5*3j_a`ka]EFX[4]XlHj#q9)P2gg(QpJJq-OjlrPO,b9tH(nu*!3=JW;*'GWC):Tn2O2su2%F\aW1m;_s<(5Jg:Gag*4Lg]8-"ODfFH`1&iFgfe^asT#8IXUO/Nq^8rfISa'IhOi93#Ftae$pc/e:]&%F^B"%,<6mg;&-?;l,jq_%5+WMq=YqC5:M!_%/$j?/.glAe^*Z5e/hEc-;Q8)Ohdg/HN:bi6C3IO2ap<&8icBfp31nbJ*G$c2KZ&l#e'_VDhKg\ni3Z6ASJJIl%ibC.lO2gaQVe+Se>$VS`93hu.Ok4&KL6kW3T,D]!4B+U*4??/oim0laAI2egWdI4SCV^>OD<!kam7QYG@Vg<<MD>ge*'Bc-"mnj>%<'i!5j(VE#>%=A.*irhH&5Sog[n7i1;p_35Y08cqk8`Ko\d,Zr9:Tc39Ra_jT?j=PWQ7a'/JeXW<\:''+Z?XqRO96oS!XbafQ3&Y%$:m$TM7AO78^Mti[^7j[a;;*/?]OA3"l4$ZiS)<']QPrBD$0#c(I:6M`6lYDjf>P"MmkNn6`AdV1p"8*6!QjVF\f!LB`cYnLN/Sn%q1`?FoQ,I!WUa%?j!j5#U/p(Wn0(Zbr,jLi&t=T5<d0-h,;%d([lIs7Q$C]W'(1oe]1C@M6TVMAF<2ps3f3R$c&jV;io&2%(o25g%lVRGDBP*@K&"j_N@UO:W@>Hd-)-@hBHJtQ_;)<8o0m!+gjENuO[WTHd`%OU1(3Ju8+B:UuiZ*iO2+i"TB(,0M;<&He+41o1USA;d%X;/ak>5?R,pUg/`,ubg6O5Fbs^fFbG1fSPnXu_tiRpR?L'oE^\=oH)\X7nZc%)8j5GWOZ?"Td5J)8WK@/9NOiV7us*;V-`.^V2T'%gWEcj^WTg>]32&D>`plq<tM0GhMgO_#>ncdI\L^umPLR)0,3?nDE@p+;VF<"i/mDrRDWU@eMS'36ShA!,62HFXULCNF*$,'b,LWg%D>(Xt'OHOeof:<0S0iJ)Y6IpiGFh5<Gla$D,DoT`E+TGj,Npc*C!Apr#d\Z)"$W\o)@(ES*Mi!LZt#>cF;0hj6>Lj><D-mAp?L8=%^*I30<-M%"T`iFr+jlu),aBe!VJ#VFS4`s6G]^2`Ycf3fD.EcR$L$%#O8uj<RTuKUG"`q#.@SCA.Xg?FkjAJW7!u+IKGgqPVp9Xm%e^qr4AppunJRnW[oMY\sHmt_tT%^f0qTA=unt,f:%+Y6Ck%nHQG@l>G##1i^]RhL0`RH<sEC`RH99ZtX1RWIc8KCO4(or\8+=2[B%24c.6X#1(f.E6_\K@KDX]9lA]^SU?\'<Qmt85(,D6LEo6lm9a-*0e*(0h'DZCA$oI[+9YnRBLT=Ejsqnr%=>hc:k^lO/mV[)*/Yt%e<nHH*7iUCBL7G2Fcj\"JLJs4R)r;ol0mp0)bZ0-GPYl]9";4g'X7+5o#7mk-alG0UcG\;im5d6fI4g^lb0&f<.p1rSXb-o&EIS$%^[qou)*XtH:6rn^'[0,e8&K>K$kbCNGdlIS`8LlV`Li>VI\27))L<NG:Yj.QLV2`m>$rDdZ1R2+4as#WOt)uHmTQoGAnoTn"[GCg%>MCqcF4h-_&79@s?,DdK.a<)pkV873T9A7r[/FMh8[p99(\'E2b0@;@AND!7oeHS[OEbeT7&;r2As5_S0ph$X"*l3u10Gr-oLhO#%5gK_**^$97;6*7jD]WN6ia<a;R-9a+d;(Al6t-/;64d4>)<!9L!U7L<*bO"NT//i%[ng&7bWC;f!L\`j^?nbQ0$CVZa:P[+1[ms-%YHZNaj-BIe6hp,6h!g7FmP>mG5kk5se*4"d"Gll:&@U@r>0j9JpX=L^6hTh/HE$2mTXj_.:6A168@E)"&?"?AG=7KHi)&MH`ab%\%iTD=/Ndo!',(c3:%F(gkSG"u`d8i43CZS&Nlm.h\eru3j&P4)SHf)l)+&;"%$)04PlrK]q;N6#%=c[q3c&bTAd8LE7*PF3r)rM^;%JKM!i:Wq=N"Lm?"F2V]_7\BfJn'DV=A(sAOXGIU-5'AL%;<MMfBEi+;BN[*Npi=Xck-ss3`TjkBeRAu1UBNnU%Vj@uKSL!n*:g@+%/^5p`*]?N_@0pA[b`&l3Rbm@!_[u5k=)Jn9XD?oQXZ\!%FBZ*q7q.u$6D5;n'=u^4",3&llsX*mT!G4KVlDrc*]DA9V%=]VcPZkF%Y`#)rI"qmRP.))]Je5&6R?mh4i`g4g2NsHMUO:l@&CJ&Z(5q\+e+4UgA>F(0!M'&^7[7]@@hYS7c3U59GZ&"M<g>EqMO.s%.5T$>%#pYKkajUU?Zn-uckU)c2[QSk-hkF/8a5(:la;6$k'n4RX$[N=B@PTC%X<Tq)1W"^EOp]G=]#s3lA!?k]*1S_(.OWiulB4TYC-$7g%,n&f#5dl,F<dh9A'VB2.e0g^tGRG-WS9Il%ifm0^&uVf5INdd.?3l,MU-e)8!56hZ&"CP)%#1uhCHd<"hKl/S8)]kbVFJfK+pLI?%3"3Wd`^-V(%1370et*>.MtEQ6%+''L$(pIb/-KnsECMpMLX.*2kZ2CK%Vo/t%VrY@Z*"tj7#Qs_+gs?C_Sm*LAYM\s[Q&)n@WC$k%=rA8nFh_HjSA_&+R$!3GXXW+#[>YU0FS?bFp/*b9Q*3V:NW"8@M#nCp1#RkO1Ce0oGTCZ>SY@93nV_I7KU/..m]mu`<$pmJWn-qP%3n$fDXimJuOg;A>krCk29-SMZjAuH##fA.FrY!JZVLdmMdVc+oDHIE5;fdg!]5c>f<o*3;$KZX3c*&SKh]I9bWX]31?#Yg'9aQbL%[P#R#]8'7e6"r66!I3iF]B[g3g)p#S''nce;UA&R>sKlh+@<"^o3=shEaVda:!J6s*Yk3@E@[1r_e!3M)/^NIM!(_pQl]Ge,TQ1h%<pSq=K=uL*h&VR506%nR8Y<*ba<mntd6<CT<#cS"n!4]<!h^Nn]kC6EI_%$T20ob82g`8>]L^ib!UXk=_Qu^>`"='`4Z"?-35RXN%eK/%tCE.8\CE.8>PhCB&;3j\oAfS\@GX:so^d8*_,[0Ja,l8nP@aA"\X7'pk\1:aNWNe.s1MBf=4SI">s,=2@;pAJ2f;.D$U6q*c%3/M*M'p]EN!4TJ[ca4%sOI-mli@l0G)eQ-.VM6u[B#\p[gknYKN+J`+AqYOk@pa-[VfYJ>8iD/<!g$c].tlcWLUT'"36VpMH:A`r%"M3r=%hKR8gYE:Y4`@#aL^%]F@Y_ad1\"1i#)P>SiE-t,m$'<7i$tch!j]JX&WqdghO/u&#["SSK>dh(2GZIdSKiu\j/h<4b`.9p%+;'[i_AG\lpR,]8Pt(p23KE6\LbbE+fm,W\PJ`Ja.LC[9S>XVYX#8JNd0Ik"<fm,.%5_aV7DW-k0St6>.Xb&>cX/lsok)h^89HOD%G7"@qc3_fc!:C$s8GsXkU?3<;J>gRA"f.2D,@*5QI<fTc0i:!^UPLkJ=En=?3b3,m>eg,4!1B6DM!=RC[&J@-!dO%15j$L90'Y:8%9i/S3ROL6nrATN=PR'50@R-s8+E*6Znb.G(.=#!^H(;_-H=$B;+?_Ci(fb(cfIT`.BRo/[kEh#6P,.IX>&D5d*^"HNI:Qaj^c^>f%`un:t)5=u=N)dnfjfU>`?2WeiA*C8ackq#BQhVn2K/a<3\hjuGH,e@AU/d_*WP.Fib4PJRW>?5A-cQXhm]Z(hjf-21I/5P!c9"78%6fA]m1ef`=9>Z7I8IjFj!gbNoKrdD?.9>X1-c7b#2cDLQ3>Vcq9a5lYN/P1>UJJTh;\Ntu,#**CZ[tkqgb-ndm`#7`3\-<hgl74D%^=39iTK$]qYp&d!=B[:t0d,"WOLN6>G^D[OPSY`S1GlYq7q'L^c9mmARSphVi?/jTq;__C`\<JW^d-MiljC"kYBOYCb")8f9p]fu%9gFlAbM-'O,cNi>A)bH-9M$B[N&-",Q-Y]L:@><hG6l<[$0\IVn6uC/asXJ5I'F6tI8VndUG1Zrb"L^WUC[UC,-u^qB$5gk;K\]p%i((8,E9Q,@MVk/"FX^EeZ!>YE2IcmkE/+NZ%1-Ed$(dkI<!r"=a&(oWIfoKB&qFQBQMg]C_qmaU^O)nAkD[kBBgg&3;[4dZI`K:N%^HgN&91)Pu%qAQ1JBK"*`t,giP2C`4oF$&;\\t=j!,n#785I'4dUf*5g(T352tBU?q%lQl+<T;N^2.1^4sp-=P%[$(8@uUlSIle)%nr*PYs)u8("4YV=aP:'>LqMCq^?W@g]%uCH/A"H_]Ei(%(kH>g2oZ>LBCkK!(Esa&:-@4W'm9CRg,J8PaJNJ`#u>5C!oLQ;@1a%m%;B&"h/Jj/PA6QX>),b\B)ak3(il_=`<4-s=F8Nm%)Mn8Y"#:f#^_A#",/F8X[@hEbK$QNc'Kc=-B^Lt?D07;,BClWEf4]nTZ6ViX%2#-@7mrV+KaYHgmUrbCQh-:X5E]=TL$0]Au&GM=$5r;'$Y>:JC9$44TDdca.h?tuKrH-$c&6ES#e5uJNnU`>IVWTa:Y3s^T5kgVb%+F>i4#3mpk"2ndID8+1;30GeY%^B[9N>K;C1?3B2Mbn][SK&`M&82\S+qGaraDGkC2m(/fbj5pAI1l<W>*6uhZ't2?\#-`3*gd&p%9?,e;,B;jP;#nh-+b^?a(I/#Bqd9;8,-$rI8i.TeUilU8+06hn/.fa_0Z'aUGCUi*?U"V?/HMJ-d?0Q0Xl0Y2F#tsjS+Z^rb[%@V%f@$[Hn*'oIee=.ZYNZS0>ij^#gdj/$q$Z_nn_3LL$Pe(do>mm7#ZK,p4gcCq\*g#M]E$b6)Od:q;b8TuC8%,aP12W_HAkXQNT;LB%%)W#t1)X!5`](pObn*l(Tnme(o0SFA^+s:H@Wg(2/L'0:VKj*,[Yl6Z*[EdCAO/p3oC_ZN#/58-/B/8Ki(=cM1i>M!VW("kfN/7s%*e0WT*tV*rLfo35PbQ1RqW$<CK2I$Ziu\g2qcWso2uhhYro$*@QXBdQs7S\T>@RX.^Z#hO<sA`>AsJ.<%!#6rdOZZ+2onN:9]T9/%*FXmhG86F9i]9$t9(H19"lHeu^IL8L'K8'&Y[B8(JX3e=]sjVH*eWtMSmOMI4t5K^.f)-FkULd1d4<-fQ;tS!"&\;^0j9@\d4bMg%`(ULCUSEhTVj1:"#A`Ek5PPBe\F?Y@l,-NOg/c#GPcM$I$u%bso!\*M*6-lkMe@Y\_hf6hdqB[@_ki0s5g*C/hV8(],p+c.P9Sj4%'pR0"8k2k5c9V]QlgWm(G1gh;ZYd42No;b3>%&DPPoos4hi=Mto\kB3_obpYRo#NjKOn[bdh.kSQ+,^Mr\7Z6i,$sD^@An$)5D%j%bQgRQ\?rmXf6dDdlC.M-k1FBj)<)RnRNP6elQl+6!eVf`$p5)ccusFp5/f-eA_(:3X=jO,W<qSr[+/T@[DMQr[IU(7Gq);@I!I."%b=B*(mI_fZ/MdmfEiUG]AeW;`Ao#Qc(:<bZ&8QtO;JYAa5Oqd4^A2#3`93S0FkZ.U#[:m\]PgtDlC6'Hs+O04P>9IO5=;Mj2P[Bm%+8pFgB!+IJSLNP+9c("^^:YI`"lL@oKif@h6>WdV05N)*&i)MtPTcnjN.\*kO+*a?NKN0WWK8?kc_a$h,a9ttU1@.FL6r=qnu<mm%^T3HNcPg^$1D4Bp<8-QoYD>&$MHfE'>Q<9J(bG!8%@2.Y#0Z3I/446XN.VUofAV?nc*AEnUQ'iP;2$1E#\@C\r9-T;=^#8]CKk7+%(:M/?`k0Z^#7Kjm`F*-Qgs_irCUA<0Iph;H%"d%K%'V)BE*E]7qHtaRrqPr3d#.arr:+-^N>R^4a!5J*k3q]N*_3)V_\I9C,PAZ7%N\&2s^G9crM3Ss.8RU,#5T$cR^R1J!Y3j:<aL.q,,G=QB))MEDS]6H1O7FuXchUocg$#+#`+-7KLK>rNA&*)dX>E;[R9rL93TW'K%`\,Z?O:2P+UL&LbZ^mqL6E>3"gjru?ZB3#[P$HIoi2K9#+kiS4Ha44@Z&^jjK]BQ3/hdb'(2[IOf=*3F./P2!r_se`P#6F//fs*L%4Wtgn9fNJJWuPNBN12]IW`*(Viia"$T+CE2lXd*WW&'`*g,q72k=@q8fu?oOAT\@UodL&nU]J3'4[Un>=>=YF2:%'s'!7=:`'ok$%FMo#22n_Nobs:RU3Kn-,+B6V/9^qa%S4FBS,;,F<8AgF`p<2_Xd<s"9U?NVoN6fc+);sQZh.(>H?6IJ!*_,)tI4U/IT-cF+<'K$F%"_OR2K`J2Y%S3d^TCtnC1S)n_JYF!"4u=9+Aj,&?`iK\Ka4:54g&Nf:c:s)9X7N%Ppr)=LX9Z&Zn@MAZAWSs[NcYRAjK$XJ\N3'^%f&ee;Ut#L*I4*Ft(cX."N1]Yei<18A?24qdg$nj&:2Nniof6+G2&PoI,;/G&([D\%eaJGNblDE^IkP&GaQC;5AYXb6r<9t0CrhNQ%306_`b9/0AYJE#.ek-uOAs\Rm^,#8D=_+"VJ^>\8*4#:a'stWH5n85@"YrF&rKV@.RW\,S#"5O5YDf]^F,BF!4TQ!ud<g/N<)W0<%ZB5mZb:r+(iYf,shN3S)@pQj1+@q^b#2Hn.iQ_e=k1n@0+o/FA+Q&@a2MbDhBs$=ZgV?b@16ETF@%.#u^b:]u0[ts!capJWl3DqM%5b]j-Hqh[Z>PI(SoAnq&:j=QDe1Z6*30`S)_$@84K,RGoOB$HHUPh9d,EPAN&<XU\oT@N.@l1CK/T'#pRUaM7c3tRX)JqSMXeTTd%2XH\0[bOub'XUJr!n8_Q'ho%.p[%V>NR.,AM$?\BZb.D9/?]J\$!-1.5,_\'6^@TGS-@\_O=P-g]&A&WEs/"]Rf*Fp$U-PGZ`bHU%"co%AGkS9r"TUaV`.R><;V]CPAB,AU,L;e^)5?E$O0C[b1fF9-mGV?1]G:8=d:#uh,.nc+oMkoSq][>B;;8emOHB.>`T*'cE0&^I%'kodijqjhrc!B<Fpuoqa;+$d4]S<%6Q^;6n*K2kS<lNF!Du0QK7%.WDRXU?Wq(&-%Q@<\O2mMfhQsfQ4,gIG7E$#U:0!00PrOC2(%+t92:,O_)5H:*XW6k/Mdd[,@Q@Hrb`VsgEI.VjLS9ot4Pkq'Xr&?rU*AEMIZ:LW7P0DMj2Q[I+qF#48r!=h7(cRsB5U3iO/\Lp2;%ghQHE=:f?Mbs#;L/u@53R=Y'i/[Ce#(Tu.V>U7FE_39[)gWPflfHD'0rLbea:2L#kNP!H`J[i.!e3H&;q)6`;+pn.cK`CCKeS*a_%s754JnSeEo+92.drUK'#pZ!q,m6?R0o'cVCJ,f,Ds52`5rpTjBO2(VSJ,\aurp;rLrNH7alYh:QnW3_@fDk#PJ,Ju3rop'TornDl%\,Ydnjc=ohqqqD7?iTrjJ,A85rf;R.It?B!p@H&sjkp)6s5D#u%g.D'XT~>%AI9_PrivateDataEnd